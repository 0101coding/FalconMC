// @generated
#![allow(clippy::derivable_impls)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Blocks {
    Air,
    Stone,
    Granite,
    PolishedGranite,
    Diorite,
    PolishedDiorite,
    Andesite,
    PolishedAndesite,
    GrassBlock(GrassBlockState),
    Dirt,
    CoarseDirt,
    Podzol(PodzolState),
    Cobblestone,
    OakPlanks,
    SprucePlanks,
    BirchPlanks,
    JunglePlanks,
    AcaciaPlanks,
    DarkOakPlanks,
    OakSapling(OakSaplingState),
    SpruceSapling(SpruceSaplingState),
    BirchSapling(BirchSaplingState),
    JungleSapling(JungleSaplingState),
    AcaciaSapling(AcaciaSaplingState),
    DarkOakSapling(DarkOakSaplingState),
    Bedrock,
    Water(WaterState),
    Lava(LavaState),
    Sand,
    RedSand,
    Gravel,
    GoldOre,
    DeepslateGoldOre,
    IronOre,
    DeepslateIronOre,
    CoalOre,
    DeepslateCoalOre,
    NetherGoldOre,
    OakLog(OakLogState),
    SpruceLog(SpruceLogState),
    BirchLog(BirchLogState),
    JungleLog(JungleLogState),
    AcaciaLog(AcaciaLogState),
    DarkOakLog(DarkOakLogState),
    StrippedSpruceLog(StrippedSpruceLogState),
    StrippedBirchLog(StrippedBirchLogState),
    StrippedJungleLog(StrippedJungleLogState),
    StrippedAcaciaLog(StrippedAcaciaLogState),
    StrippedDarkOakLog(StrippedDarkOakLogState),
    StrippedOakLog(StrippedOakLogState),
    OakWood(OakWoodState),
    SpruceWood(SpruceWoodState),
    BirchWood(BirchWoodState),
    JungleWood(JungleWoodState),
    AcaciaWood(AcaciaWoodState),
    DarkOakWood(DarkOakWoodState),
    StrippedOakWood(StrippedOakWoodState),
    StrippedSpruceWood(StrippedSpruceWoodState),
    StrippedBirchWood(StrippedBirchWoodState),
    StrippedJungleWood(StrippedJungleWoodState),
    StrippedAcaciaWood(StrippedAcaciaWoodState),
    StrippedDarkOakWood(StrippedDarkOakWoodState),
    OakLeaves(OakLeavesState),
    SpruceLeaves(SpruceLeavesState),
    BirchLeaves(BirchLeavesState),
    JungleLeaves(JungleLeavesState),
    AcaciaLeaves(AcaciaLeavesState),
    DarkOakLeaves(DarkOakLeavesState),
    AzaleaLeaves(AzaleaLeavesState),
    FloweringAzaleaLeaves(FloweringAzaleaLeavesState),
    Sponge,
    WetSponge,
    Glass,
    LapisOre,
    DeepslateLapisOre,
    LapisBlock,
    Dispenser(DispenserState),
    Sandstone,
    ChiseledSandstone,
    CutSandstone,
    NoteBlock(NoteBlockState),
    WhiteBed(WhiteBedState),
    OrangeBed(OrangeBedState),
    MagentaBed(MagentaBedState),
    LightBlueBed(LightBlueBedState),
    YellowBed(YellowBedState),
    LimeBed(LimeBedState),
    PinkBed(PinkBedState),
    GrayBed(GrayBedState),
    LightGrayBed(LightGrayBedState),
    CyanBed(CyanBedState),
    PurpleBed(PurpleBedState),
    BlueBed(BlueBedState),
    BrownBed(BrownBedState),
    GreenBed(GreenBedState),
    RedBed(RedBedState),
    BlackBed(BlackBedState),
    PoweredRail(PoweredRailState),
    DetectorRail(DetectorRailState),
    StickyPiston(StickyPistonState),
    Cobweb,
    Grass,
    Fern,
    DeadBush,
    Seagrass,
    TallSeagrass(TallSeagrassState),
    Piston(PistonState),
    PistonHead(PistonHeadState),
    WhiteWool,
    OrangeWool,
    MagentaWool,
    LightBlueWool,
    YellowWool,
    LimeWool,
    PinkWool,
    GrayWool,
    LightGrayWool,
    CyanWool,
    PurpleWool,
    BlueWool,
    BrownWool,
    GreenWool,
    RedWool,
    BlackWool,
    MovingPiston(MovingPistonState),
    Dandelion,
    Poppy,
    BlueOrchid,
    Allium,
    AzureBluet,
    RedTulip,
    OrangeTulip,
    WhiteTulip,
    PinkTulip,
    OxeyeDaisy,
    Cornflower,
    WitherRose,
    LilyOfTheValley,
    BrownMushroom,
    RedMushroom,
    GoldBlock,
    IronBlock,
    Bricks,
    Tnt(TntState),
    Bookshelf,
    MossyCobblestone,
    Obsidian,
    Torch,
    WallTorch(WallTorchState),
    Fire(FireState),
    SoulFire,
    Spawner,
    OakStairs(OakStairsState),
    Chest(ChestState),
    RedstoneWire(RedstoneWireState),
    DiamondOre,
    DeepslateDiamondOre,
    DiamondBlock,
    CraftingTable,
    Wheat(WheatState),
    Farmland(FarmlandState),
    Furnace(FurnaceState),
    OakSign(OakSignState),
    SpruceSign(SpruceSignState),
    BirchSign(BirchSignState),
    AcaciaSign(AcaciaSignState),
    JungleSign(JungleSignState),
    DarkOakSign(DarkOakSignState),
    OakDoor(OakDoorState),
    Ladder(LadderState),
    Rail(RailState),
    CobblestoneStairs(CobblestoneStairsState),
    OakWallSign(OakWallSignState),
    SpruceWallSign(SpruceWallSignState),
    BirchWallSign(BirchWallSignState),
    AcaciaWallSign(AcaciaWallSignState),
    JungleWallSign(JungleWallSignState),
    DarkOakWallSign(DarkOakWallSignState),
    Lever(LeverState),
    StonePressurePlate(StonePressurePlateState),
    IronDoor(IronDoorState),
    OakPressurePlate(OakPressurePlateState),
    SprucePressurePlate(SprucePressurePlateState),
    BirchPressurePlate(BirchPressurePlateState),
    JunglePressurePlate(JunglePressurePlateState),
    AcaciaPressurePlate(AcaciaPressurePlateState),
    DarkOakPressurePlate(DarkOakPressurePlateState),
    RedstoneOre(RedstoneOreState),
    DeepslateRedstoneOre(DeepslateRedstoneOreState),
    RedstoneTorch(RedstoneTorchState),
    RedstoneWallTorch(RedstoneWallTorchState),
    StoneButton(StoneButtonState),
    Snow(SnowState),
    Ice,
    SnowBlock,
    Cactus(CactusState),
    Clay,
    SugarCane(SugarCaneState),
    Jukebox(JukeboxState),
    OakFence(OakFenceState),
    Pumpkin,
    Netherrack,
    SoulSand,
    SoulSoil,
    Basalt(BasaltState),
    PolishedBasalt(PolishedBasaltState),
    SoulTorch,
    SoulWallTorch(SoulWallTorchState),
    Glowstone,
    NetherPortal(NetherPortalState),
    CarvedPumpkin(CarvedPumpkinState),
    JackOLantern(JackOLanternState),
    Cake(CakeState),
    Repeater(RepeaterState),
    WhiteStainedGlass,
    OrangeStainedGlass,
    MagentaStainedGlass,
    LightBlueStainedGlass,
    YellowStainedGlass,
    LimeStainedGlass,
    PinkStainedGlass,
    GrayStainedGlass,
    LightGrayStainedGlass,
    CyanStainedGlass,
    PurpleStainedGlass,
    BlueStainedGlass,
    BrownStainedGlass,
    GreenStainedGlass,
    RedStainedGlass,
    BlackStainedGlass,
    OakTrapdoor(OakTrapdoorState),
    SpruceTrapdoor(SpruceTrapdoorState),
    BirchTrapdoor(BirchTrapdoorState),
    JungleTrapdoor(JungleTrapdoorState),
    AcaciaTrapdoor(AcaciaTrapdoorState),
    DarkOakTrapdoor(DarkOakTrapdoorState),
    StoneBricks,
    MossyStoneBricks,
    CrackedStoneBricks,
    ChiseledStoneBricks,
    InfestedStone,
    InfestedCobblestone,
    InfestedStoneBricks,
    InfestedMossyStoneBricks,
    InfestedCrackedStoneBricks,
    InfestedChiseledStoneBricks,
    BrownMushroomBlock(BrownMushroomBlockState),
    RedMushroomBlock(RedMushroomBlockState),
    MushroomStem(MushroomStemState),
    IronBars(IronBarsState),
    Chain(ChainState),
    GlassPane(GlassPaneState),
    Melon,
    AttachedPumpkinStem(AttachedPumpkinStemState),
    AttachedMelonStem(AttachedMelonStemState),
    PumpkinStem(PumpkinStemState),
    MelonStem(MelonStemState),
    Vine(VineState),
    GlowLichen(GlowLichenState),
    OakFenceGate(OakFenceGateState),
    BrickStairs(BrickStairsState),
    StoneBrickStairs(StoneBrickStairsState),
    Mycelium(MyceliumState),
    LilyPad,
    NetherBricks,
    NetherBrickFence(NetherBrickFenceState),
    NetherBrickStairs(NetherBrickStairsState),
    NetherWart(NetherWartState),
    EnchantingTable,
    BrewingStand(BrewingStandState),
    Cauldron,
    WaterCauldron(WaterCauldronState),
    LavaCauldron,
    PowderSnowCauldron(PowderSnowCauldronState),
    EndPortal,
    EndPortalFrame(EndPortalFrameState),
    EndStone,
    DragonEgg,
    RedstoneLamp(RedstoneLampState),
    Cocoa(CocoaState),
    SandstoneStairs(SandstoneStairsState),
    EmeraldOre,
    DeepslateEmeraldOre,
    EnderChest(EnderChestState),
    TripwireHook(TripwireHookState),
    Tripwire(TripwireState),
    EmeraldBlock,
    SpruceStairs(SpruceStairsState),
    BirchStairs(BirchStairsState),
    JungleStairs(JungleStairsState),
    CommandBlock(CommandBlockState),
    Beacon,
    CobblestoneWall(CobblestoneWallState),
    MossyCobblestoneWall(MossyCobblestoneWallState),
    FlowerPot,
    PottedOakSapling,
    PottedSpruceSapling,
    PottedBirchSapling,
    PottedJungleSapling,
    PottedAcaciaSapling,
    PottedDarkOakSapling,
    PottedFern,
    PottedDandelion,
    PottedPoppy,
    PottedBlueOrchid,
    PottedAllium,
    PottedAzureBluet,
    PottedRedTulip,
    PottedOrangeTulip,
    PottedWhiteTulip,
    PottedPinkTulip,
    PottedOxeyeDaisy,
    PottedCornflower,
    PottedLilyOfTheValley,
    PottedWitherRose,
    PottedRedMushroom,
    PottedBrownMushroom,
    PottedDeadBush,
    PottedCactus,
    Carrots(CarrotsState),
    Potatoes(PotatoesState),
    OakButton(OakButtonState),
    SpruceButton(SpruceButtonState),
    BirchButton(BirchButtonState),
    JungleButton(JungleButtonState),
    AcaciaButton(AcaciaButtonState),
    DarkOakButton(DarkOakButtonState),
    SkeletonSkull(SkeletonSkullState),
    SkeletonWallSkull(SkeletonWallSkullState),
    WitherSkeletonSkull(WitherSkeletonSkullState),
    WitherSkeletonWallSkull(WitherSkeletonWallSkullState),
    ZombieHead(ZombieHeadState),
    ZombieWallHead(ZombieWallHeadState),
    PlayerHead(PlayerHeadState),
    PlayerWallHead(PlayerWallHeadState),
    CreeperHead(CreeperHeadState),
    CreeperWallHead(CreeperWallHeadState),
    DragonHead(DragonHeadState),
    DragonWallHead(DragonWallHeadState),
    Anvil(AnvilState),
    ChippedAnvil(ChippedAnvilState),
    DamagedAnvil(DamagedAnvilState),
    TrappedChest(TrappedChestState),
    LightWeightedPressurePlate(LightWeightedPressurePlateState),
    HeavyWeightedPressurePlate(HeavyWeightedPressurePlateState),
    Comparator(ComparatorState),
    DaylightDetector(DaylightDetectorState),
    RedstoneBlock,
    NetherQuartzOre,
    Hopper(HopperState),
    QuartzBlock,
    ChiseledQuartzBlock,
    QuartzPillar(QuartzPillarState),
    QuartzStairs(QuartzStairsState),
    ActivatorRail(ActivatorRailState),
    Dropper(DropperState),
    WhiteTerracotta,
    OrangeTerracotta,
    MagentaTerracotta,
    LightBlueTerracotta,
    YellowTerracotta,
    LimeTerracotta,
    PinkTerracotta,
    GrayTerracotta,
    LightGrayTerracotta,
    CyanTerracotta,
    PurpleTerracotta,
    BlueTerracotta,
    BrownTerracotta,
    GreenTerracotta,
    RedTerracotta,
    BlackTerracotta,
    WhiteStainedGlassPane(WhiteStainedGlassPaneState),
    OrangeStainedGlassPane(OrangeStainedGlassPaneState),
    MagentaStainedGlassPane(MagentaStainedGlassPaneState),
    LightBlueStainedGlassPane(LightBlueStainedGlassPaneState),
    YellowStainedGlassPane(YellowStainedGlassPaneState),
    LimeStainedGlassPane(LimeStainedGlassPaneState),
    PinkStainedGlassPane(PinkStainedGlassPaneState),
    GrayStainedGlassPane(GrayStainedGlassPaneState),
    LightGrayStainedGlassPane(LightGrayStainedGlassPaneState),
    CyanStainedGlassPane(CyanStainedGlassPaneState),
    PurpleStainedGlassPane(PurpleStainedGlassPaneState),
    BlueStainedGlassPane(BlueStainedGlassPaneState),
    BrownStainedGlassPane(BrownStainedGlassPaneState),
    GreenStainedGlassPane(GreenStainedGlassPaneState),
    RedStainedGlassPane(RedStainedGlassPaneState),
    BlackStainedGlassPane(BlackStainedGlassPaneState),
    AcaciaStairs(AcaciaStairsState),
    DarkOakStairs(DarkOakStairsState),
    SlimeBlock,
    Barrier,
    Light(LightState),
    IronTrapdoor(IronTrapdoorState),
    Prismarine,
    PrismarineBricks,
    DarkPrismarine,
    PrismarineStairs(PrismarineStairsState),
    PrismarineBrickStairs(PrismarineBrickStairsState),
    DarkPrismarineStairs(DarkPrismarineStairsState),
    PrismarineSlab(PrismarineSlabState),
    PrismarineBrickSlab(PrismarineBrickSlabState),
    DarkPrismarineSlab(DarkPrismarineSlabState),
    SeaLantern,
    HayBlock(HayBlockState),
    WhiteCarpet,
    OrangeCarpet,
    MagentaCarpet,
    LightBlueCarpet,
    YellowCarpet,
    LimeCarpet,
    PinkCarpet,
    GrayCarpet,
    LightGrayCarpet,
    CyanCarpet,
    PurpleCarpet,
    BlueCarpet,
    BrownCarpet,
    GreenCarpet,
    RedCarpet,
    BlackCarpet,
    Terracotta,
    CoalBlock,
    PackedIce,
    Sunflower(SunflowerState),
    Lilac(LilacState),
    RoseBush(RoseBushState),
    Peony(PeonyState),
    TallGrass(TallGrassState),
    LargeFern(LargeFernState),
    WhiteBanner(WhiteBannerState),
    OrangeBanner(OrangeBannerState),
    MagentaBanner(MagentaBannerState),
    LightBlueBanner(LightBlueBannerState),
    YellowBanner(YellowBannerState),
    LimeBanner(LimeBannerState),
    PinkBanner(PinkBannerState),
    GrayBanner(GrayBannerState),
    LightGrayBanner(LightGrayBannerState),
    CyanBanner(CyanBannerState),
    PurpleBanner(PurpleBannerState),
    BlueBanner(BlueBannerState),
    BrownBanner(BrownBannerState),
    GreenBanner(GreenBannerState),
    RedBanner(RedBannerState),
    BlackBanner(BlackBannerState),
    WhiteWallBanner(WhiteWallBannerState),
    OrangeWallBanner(OrangeWallBannerState),
    MagentaWallBanner(MagentaWallBannerState),
    LightBlueWallBanner(LightBlueWallBannerState),
    YellowWallBanner(YellowWallBannerState),
    LimeWallBanner(LimeWallBannerState),
    PinkWallBanner(PinkWallBannerState),
    GrayWallBanner(GrayWallBannerState),
    LightGrayWallBanner(LightGrayWallBannerState),
    CyanWallBanner(CyanWallBannerState),
    PurpleWallBanner(PurpleWallBannerState),
    BlueWallBanner(BlueWallBannerState),
    BrownWallBanner(BrownWallBannerState),
    GreenWallBanner(GreenWallBannerState),
    RedWallBanner(RedWallBannerState),
    BlackWallBanner(BlackWallBannerState),
    RedSandstone,
    ChiseledRedSandstone,
    CutRedSandstone,
    RedSandstoneStairs(RedSandstoneStairsState),
    OakSlab(OakSlabState),
    SpruceSlab(SpruceSlabState),
    BirchSlab(BirchSlabState),
    JungleSlab(JungleSlabState),
    AcaciaSlab(AcaciaSlabState),
    DarkOakSlab(DarkOakSlabState),
    StoneSlab(StoneSlabState),
    SmoothStoneSlab(SmoothStoneSlabState),
    SandstoneSlab(SandstoneSlabState),
    CutSandstoneSlab(CutSandstoneSlabState),
    PetrifiedOakSlab(PetrifiedOakSlabState),
    CobblestoneSlab(CobblestoneSlabState),
    BrickSlab(BrickSlabState),
    StoneBrickSlab(StoneBrickSlabState),
    NetherBrickSlab(NetherBrickSlabState),
    QuartzSlab(QuartzSlabState),
    RedSandstoneSlab(RedSandstoneSlabState),
    CutRedSandstoneSlab(CutRedSandstoneSlabState),
    PurpurSlab(PurpurSlabState),
    SmoothStone,
    SmoothSandstone,
    SmoothQuartz,
    SmoothRedSandstone,
    SpruceFenceGate(SpruceFenceGateState),
    BirchFenceGate(BirchFenceGateState),
    JungleFenceGate(JungleFenceGateState),
    AcaciaFenceGate(AcaciaFenceGateState),
    DarkOakFenceGate(DarkOakFenceGateState),
    SpruceFence(SpruceFenceState),
    BirchFence(BirchFenceState),
    JungleFence(JungleFenceState),
    AcaciaFence(AcaciaFenceState),
    DarkOakFence(DarkOakFenceState),
    SpruceDoor(SpruceDoorState),
    BirchDoor(BirchDoorState),
    JungleDoor(JungleDoorState),
    AcaciaDoor(AcaciaDoorState),
    DarkOakDoor(DarkOakDoorState),
    EndRod(EndRodState),
    ChorusPlant(ChorusPlantState),
    ChorusFlower(ChorusFlowerState),
    PurpurBlock,
    PurpurPillar(PurpurPillarState),
    PurpurStairs(PurpurStairsState),
    EndStoneBricks,
    Beetroots(BeetrootsState),
    DirtPath,
    EndGateway,
    RepeatingCommandBlock(RepeatingCommandBlockState),
    ChainCommandBlock(ChainCommandBlockState),
    FrostedIce(FrostedIceState),
    MagmaBlock,
    NetherWartBlock,
    RedNetherBricks,
    BoneBlock(BoneBlockState),
    StructureVoid,
    Observer(ObserverState),
    ShulkerBox(ShulkerBoxState),
    WhiteShulkerBox(WhiteShulkerBoxState),
    OrangeShulkerBox(OrangeShulkerBoxState),
    MagentaShulkerBox(MagentaShulkerBoxState),
    LightBlueShulkerBox(LightBlueShulkerBoxState),
    YellowShulkerBox(YellowShulkerBoxState),
    LimeShulkerBox(LimeShulkerBoxState),
    PinkShulkerBox(PinkShulkerBoxState),
    GrayShulkerBox(GrayShulkerBoxState),
    LightGrayShulkerBox(LightGrayShulkerBoxState),
    CyanShulkerBox(CyanShulkerBoxState),
    PurpleShulkerBox(PurpleShulkerBoxState),
    BlueShulkerBox(BlueShulkerBoxState),
    BrownShulkerBox(BrownShulkerBoxState),
    GreenShulkerBox(GreenShulkerBoxState),
    RedShulkerBox(RedShulkerBoxState),
    BlackShulkerBox(BlackShulkerBoxState),
    WhiteGlazedTerracotta(WhiteGlazedTerracottaState),
    OrangeGlazedTerracotta(OrangeGlazedTerracottaState),
    MagentaGlazedTerracotta(MagentaGlazedTerracottaState),
    LightBlueGlazedTerracotta(LightBlueGlazedTerracottaState),
    YellowGlazedTerracotta(YellowGlazedTerracottaState),
    LimeGlazedTerracotta(LimeGlazedTerracottaState),
    PinkGlazedTerracotta(PinkGlazedTerracottaState),
    GrayGlazedTerracotta(GrayGlazedTerracottaState),
    LightGrayGlazedTerracotta(LightGrayGlazedTerracottaState),
    CyanGlazedTerracotta(CyanGlazedTerracottaState),
    PurpleGlazedTerracotta(PurpleGlazedTerracottaState),
    BlueGlazedTerracotta(BlueGlazedTerracottaState),
    BrownGlazedTerracotta(BrownGlazedTerracottaState),
    GreenGlazedTerracotta(GreenGlazedTerracottaState),
    RedGlazedTerracotta(RedGlazedTerracottaState),
    BlackGlazedTerracotta(BlackGlazedTerracottaState),
    WhiteConcrete,
    OrangeConcrete,
    MagentaConcrete,
    LightBlueConcrete,
    YellowConcrete,
    LimeConcrete,
    PinkConcrete,
    GrayConcrete,
    LightGrayConcrete,
    CyanConcrete,
    PurpleConcrete,
    BlueConcrete,
    BrownConcrete,
    GreenConcrete,
    RedConcrete,
    BlackConcrete,
    WhiteConcretePowder,
    OrangeConcretePowder,
    MagentaConcretePowder,
    LightBlueConcretePowder,
    YellowConcretePowder,
    LimeConcretePowder,
    PinkConcretePowder,
    GrayConcretePowder,
    LightGrayConcretePowder,
    CyanConcretePowder,
    PurpleConcretePowder,
    BlueConcretePowder,
    BrownConcretePowder,
    GreenConcretePowder,
    RedConcretePowder,
    BlackConcretePowder,
    Kelp(KelpState),
    KelpPlant,
    DriedKelpBlock,
    TurtleEgg(TurtleEggState),
    DeadTubeCoralBlock,
    DeadBrainCoralBlock,
    DeadBubbleCoralBlock,
    DeadFireCoralBlock,
    DeadHornCoralBlock,
    TubeCoralBlock,
    BrainCoralBlock,
    BubbleCoralBlock,
    FireCoralBlock,
    HornCoralBlock,
    DeadTubeCoral(DeadTubeCoralState),
    DeadBrainCoral(DeadBrainCoralState),
    DeadBubbleCoral(DeadBubbleCoralState),
    DeadFireCoral(DeadFireCoralState),
    DeadHornCoral(DeadHornCoralState),
    TubeCoral(TubeCoralState),
    BrainCoral(BrainCoralState),
    BubbleCoral(BubbleCoralState),
    FireCoral(FireCoralState),
    HornCoral(HornCoralState),
    DeadTubeCoralFan(DeadTubeCoralFanState),
    DeadBrainCoralFan(DeadBrainCoralFanState),
    DeadBubbleCoralFan(DeadBubbleCoralFanState),
    DeadFireCoralFan(DeadFireCoralFanState),
    DeadHornCoralFan(DeadHornCoralFanState),
    TubeCoralFan(TubeCoralFanState),
    BrainCoralFan(BrainCoralFanState),
    BubbleCoralFan(BubbleCoralFanState),
    FireCoralFan(FireCoralFanState),
    HornCoralFan(HornCoralFanState),
    DeadTubeCoralWallFan(DeadTubeCoralWallFanState),
    DeadBrainCoralWallFan(DeadBrainCoralWallFanState),
    DeadBubbleCoralWallFan(DeadBubbleCoralWallFanState),
    DeadFireCoralWallFan(DeadFireCoralWallFanState),
    DeadHornCoralWallFan(DeadHornCoralWallFanState),
    TubeCoralWallFan(TubeCoralWallFanState),
    BrainCoralWallFan(BrainCoralWallFanState),
    BubbleCoralWallFan(BubbleCoralWallFanState),
    FireCoralWallFan(FireCoralWallFanState),
    HornCoralWallFan(HornCoralWallFanState),
    SeaPickle(SeaPickleState),
    BlueIce,
    Conduit(ConduitState),
    BambooSapling,
    Bamboo(BambooState),
    PottedBamboo,
    VoidAir,
    CaveAir,
    BubbleColumn(BubbleColumnState),
    PolishedGraniteStairs(PolishedGraniteStairsState),
    SmoothRedSandstoneStairs(SmoothRedSandstoneStairsState),
    MossyStoneBrickStairs(MossyStoneBrickStairsState),
    PolishedDioriteStairs(PolishedDioriteStairsState),
    MossyCobblestoneStairs(MossyCobblestoneStairsState),
    EndStoneBrickStairs(EndStoneBrickStairsState),
    StoneStairs(StoneStairsState),
    SmoothSandstoneStairs(SmoothSandstoneStairsState),
    SmoothQuartzStairs(SmoothQuartzStairsState),
    GraniteStairs(GraniteStairsState),
    AndesiteStairs(AndesiteStairsState),
    RedNetherBrickStairs(RedNetherBrickStairsState),
    PolishedAndesiteStairs(PolishedAndesiteStairsState),
    DioriteStairs(DioriteStairsState),
    PolishedGraniteSlab(PolishedGraniteSlabState),
    SmoothRedSandstoneSlab(SmoothRedSandstoneSlabState),
    MossyStoneBrickSlab(MossyStoneBrickSlabState),
    PolishedDioriteSlab(PolishedDioriteSlabState),
    MossyCobblestoneSlab(MossyCobblestoneSlabState),
    EndStoneBrickSlab(EndStoneBrickSlabState),
    SmoothSandstoneSlab(SmoothSandstoneSlabState),
    SmoothQuartzSlab(SmoothQuartzSlabState),
    GraniteSlab(GraniteSlabState),
    AndesiteSlab(AndesiteSlabState),
    RedNetherBrickSlab(RedNetherBrickSlabState),
    PolishedAndesiteSlab(PolishedAndesiteSlabState),
    DioriteSlab(DioriteSlabState),
    BrickWall(BrickWallState),
    PrismarineWall(PrismarineWallState),
    RedSandstoneWall(RedSandstoneWallState),
    MossyStoneBrickWall(MossyStoneBrickWallState),
    GraniteWall(GraniteWallState),
    StoneBrickWall(StoneBrickWallState),
    NetherBrickWall(NetherBrickWallState),
    AndesiteWall(AndesiteWallState),
    RedNetherBrickWall(RedNetherBrickWallState),
    SandstoneWall(SandstoneWallState),
    EndStoneBrickWall(EndStoneBrickWallState),
    DioriteWall(DioriteWallState),
    Scaffolding(ScaffoldingState),
    Loom(LoomState),
    Barrel(BarrelState),
    Smoker(SmokerState),
    BlastFurnace(BlastFurnaceState),
    CartographyTable,
    FletchingTable,
    Grindstone(GrindstoneState),
    Lectern(LecternState),
    SmithingTable,
    Stonecutter(StonecutterState),
    Bell(BellState),
    Lantern(LanternState),
    SoulLantern(SoulLanternState),
    Campfire(CampfireState),
    SoulCampfire(SoulCampfireState),
    SweetBerryBush(SweetBerryBushState),
    WarpedStem(WarpedStemState),
    StrippedWarpedStem(StrippedWarpedStemState),
    WarpedHyphae(WarpedHyphaeState),
    StrippedWarpedHyphae(StrippedWarpedHyphaeState),
    WarpedNylium,
    WarpedFungus,
    WarpedWartBlock,
    WarpedRoots,
    NetherSprouts,
    CrimsonStem(CrimsonStemState),
    StrippedCrimsonStem(StrippedCrimsonStemState),
    CrimsonHyphae(CrimsonHyphaeState),
    StrippedCrimsonHyphae(StrippedCrimsonHyphaeState),
    CrimsonNylium,
    CrimsonFungus,
    Shroomlight,
    WeepingVines(WeepingVinesState),
    WeepingVinesPlant,
    TwistingVines(TwistingVinesState),
    TwistingVinesPlant,
    CrimsonRoots,
    CrimsonPlanks,
    WarpedPlanks,
    CrimsonSlab(CrimsonSlabState),
    WarpedSlab(WarpedSlabState),
    CrimsonPressurePlate(CrimsonPressurePlateState),
    WarpedPressurePlate(WarpedPressurePlateState),
    CrimsonFence(CrimsonFenceState),
    WarpedFence(WarpedFenceState),
    CrimsonTrapdoor(CrimsonTrapdoorState),
    WarpedTrapdoor(WarpedTrapdoorState),
    CrimsonFenceGate(CrimsonFenceGateState),
    WarpedFenceGate(WarpedFenceGateState),
    CrimsonStairs(CrimsonStairsState),
    WarpedStairs(WarpedStairsState),
    CrimsonButton(CrimsonButtonState),
    WarpedButton(WarpedButtonState),
    CrimsonDoor(CrimsonDoorState),
    WarpedDoor(WarpedDoorState),
    CrimsonSign(CrimsonSignState),
    WarpedSign(WarpedSignState),
    CrimsonWallSign(CrimsonWallSignState),
    WarpedWallSign(WarpedWallSignState),
    StructureBlock(StructureBlockState),
    Jigsaw(JigsawState),
    Composter(ComposterState),
    Target(TargetState),
    BeeNest(BeeNestState),
    Beehive(BeehiveState),
    HoneyBlock,
    HoneycombBlock,
    NetheriteBlock,
    AncientDebris,
    CryingObsidian,
    RespawnAnchor(RespawnAnchorState),
    PottedCrimsonFungus,
    PottedWarpedFungus,
    PottedCrimsonRoots,
    PottedWarpedRoots,
    Lodestone,
    Blackstone,
    BlackstoneStairs(BlackstoneStairsState),
    BlackstoneWall(BlackstoneWallState),
    BlackstoneSlab(BlackstoneSlabState),
    PolishedBlackstone,
    PolishedBlackstoneBricks,
    CrackedPolishedBlackstoneBricks,
    ChiseledPolishedBlackstone,
    PolishedBlackstoneBrickSlab(PolishedBlackstoneBrickSlabState),
    PolishedBlackstoneBrickStairs(PolishedBlackstoneBrickStairsState),
    PolishedBlackstoneBrickWall(PolishedBlackstoneBrickWallState),
    GildedBlackstone,
    PolishedBlackstoneStairs(PolishedBlackstoneStairsState),
    PolishedBlackstoneSlab(PolishedBlackstoneSlabState),
    PolishedBlackstonePressurePlate(PolishedBlackstonePressurePlateState),
    PolishedBlackstoneButton(PolishedBlackstoneButtonState),
    PolishedBlackstoneWall(PolishedBlackstoneWallState),
    ChiseledNetherBricks,
    CrackedNetherBricks,
    QuartzBricks,
    Candle(CandleState),
    WhiteCandle(WhiteCandleState),
    OrangeCandle(OrangeCandleState),
    MagentaCandle(MagentaCandleState),
    LightBlueCandle(LightBlueCandleState),
    YellowCandle(YellowCandleState),
    LimeCandle(LimeCandleState),
    PinkCandle(PinkCandleState),
    GrayCandle(GrayCandleState),
    LightGrayCandle(LightGrayCandleState),
    CyanCandle(CyanCandleState),
    PurpleCandle(PurpleCandleState),
    BlueCandle(BlueCandleState),
    BrownCandle(BrownCandleState),
    GreenCandle(GreenCandleState),
    RedCandle(RedCandleState),
    BlackCandle(BlackCandleState),
    CandleCake(CandleCakeState),
    WhiteCandleCake(WhiteCandleCakeState),
    OrangeCandleCake(OrangeCandleCakeState),
    MagentaCandleCake(MagentaCandleCakeState),
    LightBlueCandleCake(LightBlueCandleCakeState),
    YellowCandleCake(YellowCandleCakeState),
    LimeCandleCake(LimeCandleCakeState),
    PinkCandleCake(PinkCandleCakeState),
    GrayCandleCake(GrayCandleCakeState),
    LightGrayCandleCake(LightGrayCandleCakeState),
    CyanCandleCake(CyanCandleCakeState),
    PurpleCandleCake(PurpleCandleCakeState),
    BlueCandleCake(BlueCandleCakeState),
    BrownCandleCake(BrownCandleCakeState),
    GreenCandleCake(GreenCandleCakeState),
    RedCandleCake(RedCandleCakeState),
    BlackCandleCake(BlackCandleCakeState),
    AmethystBlock,
    BuddingAmethyst,
    AmethystCluster(AmethystClusterState),
    LargeAmethystBud(LargeAmethystBudState),
    MediumAmethystBud(MediumAmethystBudState),
    SmallAmethystBud(SmallAmethystBudState),
    Tuff,
    Calcite,
    TintedGlass,
    PowderSnow,
    SculkSensor(SculkSensorState),
    OxidizedCopper,
    WeatheredCopper,
    ExposedCopper,
    CopperBlock,
    CopperOre,
    DeepslateCopperOre,
    OxidizedCutCopper,
    WeatheredCutCopper,
    ExposedCutCopper,
    CutCopper,
    OxidizedCutCopperStairs(OxidizedCutCopperStairsState),
    WeatheredCutCopperStairs(WeatheredCutCopperStairsState),
    ExposedCutCopperStairs(ExposedCutCopperStairsState),
    CutCopperStairs(CutCopperStairsState),
    OxidizedCutCopperSlab(OxidizedCutCopperSlabState),
    WeatheredCutCopperSlab(WeatheredCutCopperSlabState),
    ExposedCutCopperSlab(ExposedCutCopperSlabState),
    CutCopperSlab(CutCopperSlabState),
    WaxedCopperBlock,
    WaxedWeatheredCopper,
    WaxedExposedCopper,
    WaxedOxidizedCopper,
    WaxedOxidizedCutCopper,
    WaxedWeatheredCutCopper,
    WaxedExposedCutCopper,
    WaxedCutCopper,
    WaxedOxidizedCutCopperStairs(WaxedOxidizedCutCopperStairsState),
    WaxedWeatheredCutCopperStairs(WaxedWeatheredCutCopperStairsState),
    WaxedExposedCutCopperStairs(WaxedExposedCutCopperStairsState),
    WaxedCutCopperStairs(WaxedCutCopperStairsState),
    WaxedOxidizedCutCopperSlab(WaxedOxidizedCutCopperSlabState),
    WaxedWeatheredCutCopperSlab(WaxedWeatheredCutCopperSlabState),
    WaxedExposedCutCopperSlab(WaxedExposedCutCopperSlabState),
    WaxedCutCopperSlab(WaxedCutCopperSlabState),
    LightningRod(LightningRodState),
    PointedDripstone(PointedDripstoneState),
    DripstoneBlock,
    CaveVines(CaveVinesState),
    CaveVinesPlant(CaveVinesPlantState),
    SporeBlossom,
    Azalea,
    FloweringAzalea,
    MossCarpet,
    MossBlock,
    BigDripleaf(BigDripleafState),
    BigDripleafStem(BigDripleafStemState),
    SmallDripleaf(SmallDripleafState),
    HangingRoots(HangingRootsState),
    RootedDirt,
    Deepslate(DeepslateState),
    CobbledDeepslate,
    CobbledDeepslateStairs(CobbledDeepslateStairsState),
    CobbledDeepslateSlab(CobbledDeepslateSlabState),
    CobbledDeepslateWall(CobbledDeepslateWallState),
    PolishedDeepslate,
    PolishedDeepslateStairs(PolishedDeepslateStairsState),
    PolishedDeepslateSlab(PolishedDeepslateSlabState),
    PolishedDeepslateWall(PolishedDeepslateWallState),
    DeepslateTiles,
    DeepslateTileStairs(DeepslateTileStairsState),
    DeepslateTileSlab(DeepslateTileSlabState),
    DeepslateTileWall(DeepslateTileWallState),
    DeepslateBricks,
    DeepslateBrickStairs(DeepslateBrickStairsState),
    DeepslateBrickSlab(DeepslateBrickSlabState),
    DeepslateBrickWall(DeepslateBrickWallState),
    ChiseledDeepslate,
    CrackedDeepslateBricks,
    CrackedDeepslateTiles,
    InfestedDeepslate(InfestedDeepslateState),
    SmoothBasalt,
    RawIronBlock,
    RawCopperBlock,
    RawGoldBlock,
    PottedAzaleaBush,
    PottedFloweringAzaleaBush,
}
impl Blocks {
    pub fn get_global_id_2730(&self) -> Option<i32> {
        match self {
            Blocks::Air => Some(0i32),
            Blocks::Stone => Some(1i32),
            Blocks::Granite => Some(2i32),
            Blocks::PolishedGranite => Some(3i32),
            Blocks::Diorite => Some(4i32),
            Blocks::PolishedDiorite => Some(5i32),
            Blocks::Andesite => Some(6i32),
            Blocks::PolishedAndesite => Some(7i32),
            Blocks::GrassBlock(state_unique_falcon) => {
                Some(8i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Dirt => Some(10i32),
            Blocks::CoarseDirt => Some(11i32),
            Blocks::Podzol(state_unique_falcon) => {
                Some(12i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Cobblestone => Some(14i32),
            Blocks::OakPlanks => Some(15i32),
            Blocks::SprucePlanks => Some(16i32),
            Blocks::BirchPlanks => Some(17i32),
            Blocks::JunglePlanks => Some(18i32),
            Blocks::AcaciaPlanks => Some(19i32),
            Blocks::DarkOakPlanks => Some(20i32),
            Blocks::OakSapling(state_unique_falcon) => Some(21i32 + state_unique_falcon.stage),
            Blocks::SpruceSapling(state_unique_falcon) => Some(23i32 + state_unique_falcon.stage),
            Blocks::BirchSapling(state_unique_falcon) => Some(25i32 + state_unique_falcon.stage),
            Blocks::JungleSapling(state_unique_falcon) => Some(27i32 + state_unique_falcon.stage),
            Blocks::AcaciaSapling(state_unique_falcon) => Some(29i32 + state_unique_falcon.stage),
            Blocks::DarkOakSapling(state_unique_falcon) => Some(31i32 + state_unique_falcon.stage),
            Blocks::Bedrock => Some(33i32),
            Blocks::Water(state_unique_falcon) => Some(34i32 + state_unique_falcon.level),
            Blocks::Lava(state_unique_falcon) => Some(50i32 + state_unique_falcon.level),
            Blocks::Sand => Some(66i32),
            Blocks::RedSand => Some(67i32),
            Blocks::Gravel => Some(68i32),
            Blocks::GoldOre => Some(69i32),
            Blocks::DeepslateGoldOre => Some(70i32),
            Blocks::IronOre => Some(71i32),
            Blocks::DeepslateIronOre => Some(72i32),
            Blocks::CoalOre => Some(73i32),
            Blocks::DeepslateCoalOre => Some(74i32),
            Blocks::NetherGoldOre => Some(75i32),
            Blocks::OakLog(state_unique_falcon) => Some(76i32 + (state_unique_falcon.axis as i32)),
            Blocks::SpruceLog(state_unique_falcon) => {
                Some(79i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchLog(state_unique_falcon) => {
                Some(82i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleLog(state_unique_falcon) => {
                Some(85i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaLog(state_unique_falcon) => {
                Some(88i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakLog(state_unique_falcon) => {
                Some(91i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceLog(state_unique_falcon) => {
                Some(94i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchLog(state_unique_falcon) => {
                Some(97i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleLog(state_unique_falcon) => {
                Some(100i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaLog(state_unique_falcon) => {
                Some(103i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakLog(state_unique_falcon) => {
                Some(106i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakLog(state_unique_falcon) => {
                Some(109i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakWood(state_unique_falcon) => {
                Some(112i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SpruceWood(state_unique_falcon) => {
                Some(115i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchWood(state_unique_falcon) => {
                Some(118i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleWood(state_unique_falcon) => {
                Some(121i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaWood(state_unique_falcon) => {
                Some(124i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakWood(state_unique_falcon) => {
                Some(127i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakWood(state_unique_falcon) => {
                Some(130i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceWood(state_unique_falcon) => {
                Some(133i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchWood(state_unique_falcon) => {
                Some(136i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleWood(state_unique_falcon) => {
                Some(139i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaWood(state_unique_falcon) => {
                Some(142i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakWood(state_unique_falcon) => {
                Some(145i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakLeaves(state_unique_falcon) => Some(
                148i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::SpruceLeaves(state_unique_falcon) => Some(
                162i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::BirchLeaves(state_unique_falcon) => Some(
                176i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::JungleLeaves(state_unique_falcon) => Some(
                190i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::AcaciaLeaves(state_unique_falcon) => Some(
                204i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::DarkOakLeaves(state_unique_falcon) => Some(
                218i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::AzaleaLeaves(state_unique_falcon) => Some(
                232i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::FloweringAzaleaLeaves(state_unique_falcon) => Some(
                246i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::Sponge => Some(260i32),
            Blocks::WetSponge => Some(261i32),
            Blocks::Glass => Some(262i32),
            Blocks::LapisOre => Some(263i32),
            Blocks::DeepslateLapisOre => Some(264i32),
            Blocks::LapisBlock => Some(265i32),
            Blocks::Dispenser(state_unique_falcon) => Some(
                266i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Sandstone => Some(278i32),
            Blocks::ChiseledSandstone => Some(279i32),
            Blocks::CutSandstone => Some(280i32),
            Blocks::NoteBlock(state_unique_falcon) => Some(
                281i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * state_unique_falcon.note
                    + 50 * (state_unique_falcon.instrument as i32),
            ),
            Blocks::WhiteBed(state_unique_falcon) => Some(
                1081i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OrangeBed(state_unique_falcon) => Some(
                1097i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MagentaBed(state_unique_falcon) => Some(
                1113i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightBlueBed(state_unique_falcon) => Some(
                1129i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::YellowBed(state_unique_falcon) => Some(
                1145i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LimeBed(state_unique_falcon) => Some(
                1161i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PinkBed(state_unique_falcon) => Some(
                1177i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GrayBed(state_unique_falcon) => Some(
                1193i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightGrayBed(state_unique_falcon) => Some(
                1209i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CyanBed(state_unique_falcon) => Some(
                1225i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PurpleBed(state_unique_falcon) => Some(
                1241i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlueBed(state_unique_falcon) => Some(
                1257i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrownBed(state_unique_falcon) => Some(
                1273i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GreenBed(state_unique_falcon) => Some(
                1289i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedBed(state_unique_falcon) => Some(
                1305i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlackBed(state_unique_falcon) => Some(
                1321i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PoweredRail(state_unique_falcon) => Some(
                1337i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 12 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::DetectorRail(state_unique_falcon) => Some(
                1361i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 12 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::StickyPiston(state_unique_falcon) => Some(
                1385i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::Cobweb => Some(1397i32),
            Blocks::Grass => Some(1398i32),
            Blocks::Fern => Some(1399i32),
            Blocks::DeadBush => Some(1400i32),
            Blocks::Seagrass => Some(1401i32),
            Blocks::TallSeagrass(state_unique_falcon) => {
                Some(1402i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Piston(state_unique_falcon) => Some(
                1404i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::PistonHead(state_unique_falcon) => Some(
                1416i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (!state_unique_falcon.short() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteWool => Some(1440i32),
            Blocks::OrangeWool => Some(1441i32),
            Blocks::MagentaWool => Some(1442i32),
            Blocks::LightBlueWool => Some(1443i32),
            Blocks::YellowWool => Some(1444i32),
            Blocks::LimeWool => Some(1445i32),
            Blocks::PinkWool => Some(1446i32),
            Blocks::GrayWool => Some(1447i32),
            Blocks::LightGrayWool => Some(1448i32),
            Blocks::CyanWool => Some(1449i32),
            Blocks::PurpleWool => Some(1450i32),
            Blocks::BlueWool => Some(1451i32),
            Blocks::BrownWool => Some(1452i32),
            Blocks::GreenWool => Some(1453i32),
            Blocks::RedWool => Some(1454i32),
            Blocks::BlackWool => Some(1455i32),
            Blocks::MovingPiston(state_unique_falcon) => Some(
                1456i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Dandelion => Some(1468i32),
            Blocks::Poppy => Some(1469i32),
            Blocks::BlueOrchid => Some(1470i32),
            Blocks::Allium => Some(1471i32),
            Blocks::AzureBluet => Some(1472i32),
            Blocks::RedTulip => Some(1473i32),
            Blocks::OrangeTulip => Some(1474i32),
            Blocks::WhiteTulip => Some(1475i32),
            Blocks::PinkTulip => Some(1476i32),
            Blocks::OxeyeDaisy => Some(1477i32),
            Blocks::Cornflower => Some(1478i32),
            Blocks::WitherRose => Some(1479i32),
            Blocks::LilyOfTheValley => Some(1480i32),
            Blocks::BrownMushroom => Some(1481i32),
            Blocks::RedMushroom => Some(1482i32),
            Blocks::GoldBlock => Some(1483i32),
            Blocks::IronBlock => Some(1484i32),
            Blocks::Bricks => Some(1485i32),
            Blocks::Tnt(state_unique_falcon) => {
                Some(1486i32 + (!state_unique_falcon.unstable() as i32))
            }
            Blocks::Bookshelf => Some(1488i32),
            Blocks::MossyCobblestone => Some(1489i32),
            Blocks::Obsidian => Some(1490i32),
            Blocks::Torch => Some(1491i32),
            Blocks::WallTorch(state_unique_falcon) => {
                Some(1492i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Fire(state_unique_falcon) => Some(
                1496i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * state_unique_falcon.age,
            ),
            Blocks::SoulFire => Some(2008i32),
            Blocks::Spawner => Some(2009i32),
            Blocks::OakStairs(state_unique_falcon) => Some(
                2010i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Chest(state_unique_falcon) => Some(
                2090i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedstoneWire(state_unique_falcon) => Some(
                2114i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (state_unique_falcon.south as i32)
                    + 9 * state_unique_falcon.power
                    + 144 * (state_unique_falcon.north as i32)
                    + 432 * (state_unique_falcon.east as i32),
            ),
            Blocks::DiamondOre => Some(3410i32),
            Blocks::DeepslateDiamondOre => Some(3411i32),
            Blocks::DiamondBlock => Some(3412i32),
            Blocks::CraftingTable => Some(3413i32),
            Blocks::Wheat(state_unique_falcon) => Some(3414i32 + state_unique_falcon.age),
            Blocks::Farmland(state_unique_falcon) => Some(3422i32 + state_unique_falcon.moisture),
            Blocks::Furnace(state_unique_falcon) => Some(
                3430i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSign(state_unique_falcon) => Some(
                3438i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::SpruceSign(state_unique_falcon) => Some(
                3470i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::BirchSign(state_unique_falcon) => Some(
                3502i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::AcaciaSign(state_unique_falcon) => Some(
                3534i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::JungleSign(state_unique_falcon) => Some(
                3566i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::DarkOakSign(state_unique_falcon) => Some(
                3598i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::OakDoor(state_unique_falcon) => Some(
                3630i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Ladder(state_unique_falcon) => Some(
                3694i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Rail(state_unique_falcon) => Some(
                3702i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32),
            ),
            Blocks::CobblestoneStairs(state_unique_falcon) => Some(
                3722i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakWallSign(state_unique_falcon) => Some(
                3802i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceWallSign(state_unique_falcon) => Some(
                3810i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchWallSign(state_unique_falcon) => Some(
                3818i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaWallSign(state_unique_falcon) => Some(
                3826i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleWallSign(state_unique_falcon) => Some(
                3834i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakWallSign(state_unique_falcon) => Some(
                3842i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Lever(state_unique_falcon) => Some(
                3850i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::StonePressurePlate(state_unique_falcon) => {
                Some(3874i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::IronDoor(state_unique_falcon) => Some(
                3876i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakPressurePlate(state_unique_falcon) => {
                Some(3940i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::SprucePressurePlate(state_unique_falcon) => {
                Some(3942i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::BirchPressurePlate(state_unique_falcon) => {
                Some(3944i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::JunglePressurePlate(state_unique_falcon) => {
                Some(3946i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::AcaciaPressurePlate(state_unique_falcon) => {
                Some(3948i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::DarkOakPressurePlate(state_unique_falcon) => {
                Some(3950i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::RedstoneOre(state_unique_falcon) => {
                Some(3952i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::DeepslateRedstoneOre(state_unique_falcon) => {
                Some(3954i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneTorch(state_unique_falcon) => {
                Some(3956i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneWallTorch(state_unique_falcon) => Some(
                3958i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneButton(state_unique_falcon) => Some(
                3966i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::Snow(state_unique_falcon) => Some(3990i32 + state_unique_falcon.layers),
            Blocks::Ice => Some(3998i32),
            Blocks::SnowBlock => Some(3999i32),
            Blocks::Cactus(state_unique_falcon) => Some(4000i32 + state_unique_falcon.age),
            Blocks::Clay => Some(4016i32),
            Blocks::SugarCane(state_unique_falcon) => Some(4017i32 + state_unique_falcon.age),
            Blocks::Jukebox(state_unique_falcon) => {
                Some(4033i32 + (!state_unique_falcon.has_record() as i32))
            }
            Blocks::OakFence(state_unique_falcon) => Some(
                4035i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Pumpkin => Some(4067i32),
            Blocks::Netherrack => Some(4068i32),
            Blocks::SoulSand => Some(4069i32),
            Blocks::SoulSoil => Some(4070i32),
            Blocks::Basalt(state_unique_falcon) => {
                Some(4071i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::PolishedBasalt(state_unique_falcon) => {
                Some(4074i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SoulTorch => Some(4077i32),
            Blocks::SoulWallTorch(state_unique_falcon) => {
                Some(4078i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Glowstone => Some(4082i32),
            Blocks::NetherPortal(state_unique_falcon) => {
                Some(4083i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CarvedPumpkin(state_unique_falcon) => {
                Some(4085i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::JackOLantern(state_unique_falcon) => {
                Some(4089i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Cake(state_unique_falcon) => Some(4093i32 + state_unique_falcon.bites),
            Blocks::Repeater(state_unique_falcon) => Some(
                4100i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.locked() as i32)
                    + 4 * (state_unique_falcon.facing as i32)
                    + 16 * state_unique_falcon.delay,
            ),
            Blocks::WhiteStainedGlass => Some(4164i32),
            Blocks::OrangeStainedGlass => Some(4165i32),
            Blocks::MagentaStainedGlass => Some(4166i32),
            Blocks::LightBlueStainedGlass => Some(4167i32),
            Blocks::YellowStainedGlass => Some(4168i32),
            Blocks::LimeStainedGlass => Some(4169i32),
            Blocks::PinkStainedGlass => Some(4170i32),
            Blocks::GrayStainedGlass => Some(4171i32),
            Blocks::LightGrayStainedGlass => Some(4172i32),
            Blocks::CyanStainedGlass => Some(4173i32),
            Blocks::PurpleStainedGlass => Some(4174i32),
            Blocks::BlueStainedGlass => Some(4175i32),
            Blocks::BrownStainedGlass => Some(4176i32),
            Blocks::GreenStainedGlass => Some(4177i32),
            Blocks::RedStainedGlass => Some(4178i32),
            Blocks::BlackStainedGlass => Some(4179i32),
            Blocks::OakTrapdoor(state_unique_falcon) => Some(
                4180i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceTrapdoor(state_unique_falcon) => Some(
                4244i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchTrapdoor(state_unique_falcon) => Some(
                4308i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleTrapdoor(state_unique_falcon) => Some(
                4372i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaTrapdoor(state_unique_falcon) => Some(
                4436i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakTrapdoor(state_unique_falcon) => Some(
                4500i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBricks => Some(4564i32),
            Blocks::MossyStoneBricks => Some(4565i32),
            Blocks::CrackedStoneBricks => Some(4566i32),
            Blocks::ChiseledStoneBricks => Some(4567i32),
            Blocks::InfestedStone => Some(4568i32),
            Blocks::InfestedCobblestone => Some(4569i32),
            Blocks::InfestedStoneBricks => Some(4570i32),
            Blocks::InfestedMossyStoneBricks => Some(4571i32),
            Blocks::InfestedCrackedStoneBricks => Some(4572i32),
            Blocks::InfestedChiseledStoneBricks => Some(4573i32),
            Blocks::BrownMushroomBlock(state_unique_falcon) => Some(
                4574i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::RedMushroomBlock(state_unique_falcon) => Some(
                4638i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::MushroomStem(state_unique_falcon) => Some(
                4702i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::IronBars(state_unique_falcon) => Some(
                4766i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Chain(state_unique_falcon) => Some(
                4798i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.axis as i32),
            ),
            Blocks::GlassPane(state_unique_falcon) => Some(
                4804i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Melon => Some(4836i32),
            Blocks::AttachedPumpkinStem(state_unique_falcon) => {
                Some(4837i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::AttachedMelonStem(state_unique_falcon) => {
                Some(4841i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PumpkinStem(state_unique_falcon) => Some(4845i32 + state_unique_falcon.age),
            Blocks::MelonStem(state_unique_falcon) => Some(4853i32 + state_unique_falcon.age),
            Blocks::Vine(state_unique_falcon) => Some(
                4861i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GlowLichen(state_unique_falcon) => Some(
                4893i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.up() as i32)
                    + 8 * (!state_unique_falcon.south() as i32)
                    + 16 * (!state_unique_falcon.north() as i32)
                    + 32 * (!state_unique_falcon.east() as i32)
                    + 64 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::OakFenceGate(state_unique_falcon) => Some(
                5021i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrickStairs(state_unique_falcon) => Some(
                5053i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBrickStairs(state_unique_falcon) => Some(
                5133i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Mycelium(state_unique_falcon) => {
                Some(5213i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::LilyPad => Some(5215i32),
            Blocks::NetherBricks => Some(5216i32),
            Blocks::NetherBrickFence(state_unique_falcon) => Some(
                5217i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::NetherBrickStairs(state_unique_falcon) => Some(
                5249i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::NetherWart(state_unique_falcon) => Some(5329i32 + state_unique_falcon.age),
            Blocks::EnchantingTable => Some(5333i32),
            Blocks::BrewingStand(state_unique_falcon) => Some(
                5334i32
                    + (!state_unique_falcon.has_bottle_2() as i32)
                    + 2 * (!state_unique_falcon.has_bottle_1() as i32)
                    + 4 * (!state_unique_falcon.has_bottle_0() as i32),
            ),
            Blocks::Cauldron => Some(5342i32),
            Blocks::WaterCauldron(state_unique_falcon) => Some(5343i32 + state_unique_falcon.level),
            Blocks::LavaCauldron => Some(5346i32),
            Blocks::PowderSnowCauldron(state_unique_falcon) => {
                Some(5347i32 + state_unique_falcon.level)
            }
            Blocks::EndPortal => Some(5350i32),
            Blocks::EndPortalFrame(state_unique_falcon) => Some(
                5351i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (!state_unique_falcon.eye() as i32),
            ),
            Blocks::EndStone => Some(5359i32),
            Blocks::DragonEgg => Some(5360i32),
            Blocks::RedstoneLamp(state_unique_falcon) => {
                Some(5361i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::Cocoa(state_unique_falcon) => {
                Some(5363i32 + (state_unique_falcon.facing as i32) + 4 * state_unique_falcon.age)
            }
            Blocks::SandstoneStairs(state_unique_falcon) => Some(
                5375i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EmeraldOre => Some(5455i32),
            Blocks::DeepslateEmeraldOre => Some(5456i32),
            Blocks::EnderChest(state_unique_falcon) => Some(
                5457i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TripwireHook(state_unique_falcon) => Some(
                5465i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::Tripwire(state_unique_falcon) => Some(
                5481i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.south() as i32)
                    + 4 * (!state_unique_falcon.powered() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.disarmed() as i32)
                    + 64 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::EmeraldBlock => Some(5609i32),
            Blocks::SpruceStairs(state_unique_falcon) => Some(
                5610i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchStairs(state_unique_falcon) => Some(
                5690i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleStairs(state_unique_falcon) => Some(
                5770i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CommandBlock(state_unique_falcon) => Some(
                5850i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::Beacon => Some(5862i32),
            Blocks::CobblestoneWall(state_unique_falcon) => Some(
                5863i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::MossyCobblestoneWall(state_unique_falcon) => Some(
                6187i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::FlowerPot => Some(6511i32),
            Blocks::PottedOakSapling => Some(6512i32),
            Blocks::PottedSpruceSapling => Some(6513i32),
            Blocks::PottedBirchSapling => Some(6514i32),
            Blocks::PottedJungleSapling => Some(6515i32),
            Blocks::PottedAcaciaSapling => Some(6516i32),
            Blocks::PottedDarkOakSapling => Some(6517i32),
            Blocks::PottedFern => Some(6518i32),
            Blocks::PottedDandelion => Some(6519i32),
            Blocks::PottedPoppy => Some(6520i32),
            Blocks::PottedBlueOrchid => Some(6521i32),
            Blocks::PottedAllium => Some(6522i32),
            Blocks::PottedAzureBluet => Some(6523i32),
            Blocks::PottedRedTulip => Some(6524i32),
            Blocks::PottedOrangeTulip => Some(6525i32),
            Blocks::PottedWhiteTulip => Some(6526i32),
            Blocks::PottedPinkTulip => Some(6527i32),
            Blocks::PottedOxeyeDaisy => Some(6528i32),
            Blocks::PottedCornflower => Some(6529i32),
            Blocks::PottedLilyOfTheValley => Some(6530i32),
            Blocks::PottedWitherRose => Some(6531i32),
            Blocks::PottedRedMushroom => Some(6532i32),
            Blocks::PottedBrownMushroom => Some(6533i32),
            Blocks::PottedDeadBush => Some(6534i32),
            Blocks::PottedCactus => Some(6535i32),
            Blocks::Carrots(state_unique_falcon) => Some(6536i32 + state_unique_falcon.age),
            Blocks::Potatoes(state_unique_falcon) => Some(6544i32 + state_unique_falcon.age),
            Blocks::OakButton(state_unique_falcon) => Some(
                6552i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SpruceButton(state_unique_falcon) => Some(
                6576i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::BirchButton(state_unique_falcon) => Some(
                6600i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::JungleButton(state_unique_falcon) => Some(
                6624i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::AcaciaButton(state_unique_falcon) => Some(
                6648i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::DarkOakButton(state_unique_falcon) => Some(
                6672i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SkeletonSkull(state_unique_falcon) => {
                Some(6696i32 + state_unique_falcon.rotation)
            }
            Blocks::SkeletonWallSkull(state_unique_falcon) => {
                Some(6712i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WitherSkeletonSkull(state_unique_falcon) => {
                Some(6716i32 + state_unique_falcon.rotation)
            }
            Blocks::WitherSkeletonWallSkull(state_unique_falcon) => {
                Some(6732i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ZombieHead(state_unique_falcon) => Some(6736i32 + state_unique_falcon.rotation),
            Blocks::ZombieWallHead(state_unique_falcon) => {
                Some(6752i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PlayerHead(state_unique_falcon) => Some(6756i32 + state_unique_falcon.rotation),
            Blocks::PlayerWallHead(state_unique_falcon) => {
                Some(6772i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CreeperHead(state_unique_falcon) => {
                Some(6776i32 + state_unique_falcon.rotation)
            }
            Blocks::CreeperWallHead(state_unique_falcon) => {
                Some(6792i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DragonHead(state_unique_falcon) => Some(6796i32 + state_unique_falcon.rotation),
            Blocks::DragonWallHead(state_unique_falcon) => {
                Some(6812i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Anvil(state_unique_falcon) => {
                Some(6816i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChippedAnvil(state_unique_falcon) => {
                Some(6820i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DamagedAnvil(state_unique_falcon) => {
                Some(6824i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::TrappedChest(state_unique_falcon) => Some(
                6828i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightWeightedPressurePlate(state_unique_falcon) => {
                Some(6852i32 + state_unique_falcon.power)
            }
            Blocks::HeavyWeightedPressurePlate(state_unique_falcon) => {
                Some(6868i32 + state_unique_falcon.power)
            }
            Blocks::Comparator(state_unique_falcon) => Some(
                6884i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.mode as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DaylightDetector(state_unique_falcon) => Some(
                6900i32 + state_unique_falcon.power + 16 * (!state_unique_falcon.inverted() as i32),
            ),
            Blocks::RedstoneBlock => Some(6932i32),
            Blocks::NetherQuartzOre => Some(6933i32),
            Blocks::Hopper(state_unique_falcon) => Some(
                6934i32
                    + (state_unique_falcon.facing as i32)
                    + 5 * (!state_unique_falcon.enabled() as i32),
            ),
            Blocks::QuartzBlock => Some(6944i32),
            Blocks::ChiseledQuartzBlock => Some(6945i32),
            Blocks::QuartzPillar(state_unique_falcon) => {
                Some(6946i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::QuartzStairs(state_unique_falcon) => Some(
                6949i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ActivatorRail(state_unique_falcon) => Some(
                7029i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 12 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::Dropper(state_unique_falcon) => Some(
                7053i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteTerracotta => Some(7065i32),
            Blocks::OrangeTerracotta => Some(7066i32),
            Blocks::MagentaTerracotta => Some(7067i32),
            Blocks::LightBlueTerracotta => Some(7068i32),
            Blocks::YellowTerracotta => Some(7069i32),
            Blocks::LimeTerracotta => Some(7070i32),
            Blocks::PinkTerracotta => Some(7071i32),
            Blocks::GrayTerracotta => Some(7072i32),
            Blocks::LightGrayTerracotta => Some(7073i32),
            Blocks::CyanTerracotta => Some(7074i32),
            Blocks::PurpleTerracotta => Some(7075i32),
            Blocks::BlueTerracotta => Some(7076i32),
            Blocks::BrownTerracotta => Some(7077i32),
            Blocks::GreenTerracotta => Some(7078i32),
            Blocks::RedTerracotta => Some(7079i32),
            Blocks::BlackTerracotta => Some(7080i32),
            Blocks::WhiteStainedGlassPane(state_unique_falcon) => Some(
                7081i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OrangeStainedGlassPane(state_unique_falcon) => Some(
                7113i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::MagentaStainedGlassPane(state_unique_falcon) => Some(
                7145i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightBlueStainedGlassPane(state_unique_falcon) => Some(
                7177i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::YellowStainedGlassPane(state_unique_falcon) => Some(
                7209i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LimeStainedGlassPane(state_unique_falcon) => Some(
                7241i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PinkStainedGlassPane(state_unique_falcon) => Some(
                7273i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GrayStainedGlassPane(state_unique_falcon) => Some(
                7305i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightGrayStainedGlassPane(state_unique_falcon) => Some(
                7337i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::CyanStainedGlassPane(state_unique_falcon) => Some(
                7369i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PurpleStainedGlassPane(state_unique_falcon) => Some(
                7401i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlueStainedGlassPane(state_unique_falcon) => Some(
                7433i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BrownStainedGlassPane(state_unique_falcon) => Some(
                7465i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GreenStainedGlassPane(state_unique_falcon) => Some(
                7497i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::RedStainedGlassPane(state_unique_falcon) => Some(
                7529i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlackStainedGlassPane(state_unique_falcon) => Some(
                7561i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaStairs(state_unique_falcon) => Some(
                7593i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakStairs(state_unique_falcon) => Some(
                7673i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SlimeBlock => Some(7753i32),
            Blocks::Barrier => Some(7754i32),
            Blocks::Light(state_unique_falcon) => Some(
                7755i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.level,
            ),
            Blocks::IronTrapdoor(state_unique_falcon) => Some(
                7787i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Prismarine => Some(7851i32),
            Blocks::PrismarineBricks => Some(7852i32),
            Blocks::DarkPrismarine => Some(7853i32),
            Blocks::PrismarineStairs(state_unique_falcon) => Some(
                7854i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineBrickStairs(state_unique_falcon) => Some(
                7934i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkPrismarineStairs(state_unique_falcon) => Some(
                8014i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineSlab(state_unique_falcon) => Some(
                8094i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PrismarineBrickSlab(state_unique_falcon) => Some(
                8100i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkPrismarineSlab(state_unique_falcon) => Some(
                8106i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SeaLantern => Some(8112i32),
            Blocks::HayBlock(state_unique_falcon) => {
                Some(8113i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WhiteCarpet => Some(8116i32),
            Blocks::OrangeCarpet => Some(8117i32),
            Blocks::MagentaCarpet => Some(8118i32),
            Blocks::LightBlueCarpet => Some(8119i32),
            Blocks::YellowCarpet => Some(8120i32),
            Blocks::LimeCarpet => Some(8121i32),
            Blocks::PinkCarpet => Some(8122i32),
            Blocks::GrayCarpet => Some(8123i32),
            Blocks::LightGrayCarpet => Some(8124i32),
            Blocks::CyanCarpet => Some(8125i32),
            Blocks::PurpleCarpet => Some(8126i32),
            Blocks::BlueCarpet => Some(8127i32),
            Blocks::BrownCarpet => Some(8128i32),
            Blocks::GreenCarpet => Some(8129i32),
            Blocks::RedCarpet => Some(8130i32),
            Blocks::BlackCarpet => Some(8131i32),
            Blocks::Terracotta => Some(8132i32),
            Blocks::CoalBlock => Some(8133i32),
            Blocks::PackedIce => Some(8134i32),
            Blocks::Sunflower(state_unique_falcon) => {
                Some(8135i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Lilac(state_unique_falcon) => Some(8137i32 + (state_unique_falcon.half as i32)),
            Blocks::RoseBush(state_unique_falcon) => {
                Some(8139i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Peony(state_unique_falcon) => Some(8141i32 + (state_unique_falcon.half as i32)),
            Blocks::TallGrass(state_unique_falcon) => {
                Some(8143i32 + (state_unique_falcon.half as i32))
            }
            Blocks::LargeFern(state_unique_falcon) => {
                Some(8145i32 + (state_unique_falcon.half as i32))
            }
            Blocks::WhiteBanner(state_unique_falcon) => {
                Some(8147i32 + state_unique_falcon.rotation)
            }
            Blocks::OrangeBanner(state_unique_falcon) => {
                Some(8163i32 + state_unique_falcon.rotation)
            }
            Blocks::MagentaBanner(state_unique_falcon) => {
                Some(8179i32 + state_unique_falcon.rotation)
            }
            Blocks::LightBlueBanner(state_unique_falcon) => {
                Some(8195i32 + state_unique_falcon.rotation)
            }
            Blocks::YellowBanner(state_unique_falcon) => {
                Some(8211i32 + state_unique_falcon.rotation)
            }
            Blocks::LimeBanner(state_unique_falcon) => Some(8227i32 + state_unique_falcon.rotation),
            Blocks::PinkBanner(state_unique_falcon) => Some(8243i32 + state_unique_falcon.rotation),
            Blocks::GrayBanner(state_unique_falcon) => Some(8259i32 + state_unique_falcon.rotation),
            Blocks::LightGrayBanner(state_unique_falcon) => {
                Some(8275i32 + state_unique_falcon.rotation)
            }
            Blocks::CyanBanner(state_unique_falcon) => Some(8291i32 + state_unique_falcon.rotation),
            Blocks::PurpleBanner(state_unique_falcon) => {
                Some(8307i32 + state_unique_falcon.rotation)
            }
            Blocks::BlueBanner(state_unique_falcon) => Some(8323i32 + state_unique_falcon.rotation),
            Blocks::BrownBanner(state_unique_falcon) => {
                Some(8339i32 + state_unique_falcon.rotation)
            }
            Blocks::GreenBanner(state_unique_falcon) => {
                Some(8355i32 + state_unique_falcon.rotation)
            }
            Blocks::RedBanner(state_unique_falcon) => Some(8371i32 + state_unique_falcon.rotation),
            Blocks::BlackBanner(state_unique_falcon) => {
                Some(8387i32 + state_unique_falcon.rotation)
            }
            Blocks::WhiteWallBanner(state_unique_falcon) => {
                Some(8403i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeWallBanner(state_unique_falcon) => {
                Some(8407i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaWallBanner(state_unique_falcon) => {
                Some(8411i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueWallBanner(state_unique_falcon) => {
                Some(8415i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowWallBanner(state_unique_falcon) => {
                Some(8419i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeWallBanner(state_unique_falcon) => {
                Some(8423i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkWallBanner(state_unique_falcon) => {
                Some(8427i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayWallBanner(state_unique_falcon) => {
                Some(8431i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayWallBanner(state_unique_falcon) => {
                Some(8435i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanWallBanner(state_unique_falcon) => {
                Some(8439i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleWallBanner(state_unique_falcon) => {
                Some(8443i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueWallBanner(state_unique_falcon) => {
                Some(8447i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownWallBanner(state_unique_falcon) => {
                Some(8451i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenWallBanner(state_unique_falcon) => {
                Some(8455i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedWallBanner(state_unique_falcon) => {
                Some(8459i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackWallBanner(state_unique_falcon) => {
                Some(8463i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedSandstone => Some(8467i32),
            Blocks::ChiseledRedSandstone => Some(8468i32),
            Blocks::CutRedSandstone => Some(8469i32),
            Blocks::RedSandstoneStairs(state_unique_falcon) => Some(
                8470i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSlab(state_unique_falcon) => Some(
                8550i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SpruceSlab(state_unique_falcon) => Some(
                8556i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BirchSlab(state_unique_falcon) => Some(
                8562i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::JungleSlab(state_unique_falcon) => Some(
                8568i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AcaciaSlab(state_unique_falcon) => Some(
                8574i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkOakSlab(state_unique_falcon) => Some(
                8580i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneSlab(state_unique_falcon) => Some(
                8586i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStoneSlab(state_unique_falcon) => Some(
                8592i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SandstoneSlab(state_unique_falcon) => Some(
                8598i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutSandstoneSlab(state_unique_falcon) => Some(
                8604i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PetrifiedOakSlab(state_unique_falcon) => Some(
                8610i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CobblestoneSlab(state_unique_falcon) => Some(
                8616i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickSlab(state_unique_falcon) => Some(
                8622i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneBrickSlab(state_unique_falcon) => Some(
                8628i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::NetherBrickSlab(state_unique_falcon) => Some(
                8634i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::QuartzSlab(state_unique_falcon) => Some(
                8640i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedSandstoneSlab(state_unique_falcon) => Some(
                8646i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutRedSandstoneSlab(state_unique_falcon) => Some(
                8652i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PurpurSlab(state_unique_falcon) => Some(
                8658i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStone => Some(8664i32),
            Blocks::SmoothSandstone => Some(8665i32),
            Blocks::SmoothQuartz => Some(8666i32),
            Blocks::SmoothRedSandstone => Some(8667i32),
            Blocks::SpruceFenceGate(state_unique_falcon) => Some(
                8668i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchFenceGate(state_unique_falcon) => Some(
                8700i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleFenceGate(state_unique_falcon) => Some(
                8732i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaFenceGate(state_unique_falcon) => Some(
                8764i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakFenceGate(state_unique_falcon) => Some(
                8796i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceFence(state_unique_falcon) => Some(
                8828i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BirchFence(state_unique_falcon) => Some(
                8860i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::JungleFence(state_unique_falcon) => Some(
                8892i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaFence(state_unique_falcon) => Some(
                8924i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::DarkOakFence(state_unique_falcon) => Some(
                8956i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::SpruceDoor(state_unique_falcon) => Some(
                8988i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchDoor(state_unique_falcon) => Some(
                9052i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleDoor(state_unique_falcon) => Some(
                9116i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaDoor(state_unique_falcon) => Some(
                9180i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakDoor(state_unique_falcon) => Some(
                9244i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndRod(state_unique_falcon) => {
                Some(9308i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChorusPlant(state_unique_falcon) => Some(
                9314i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::ChorusFlower(state_unique_falcon) => Some(9378i32 + state_unique_falcon.age),
            Blocks::PurpurBlock => Some(9384i32),
            Blocks::PurpurPillar(state_unique_falcon) => {
                Some(9385i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::PurpurStairs(state_unique_falcon) => Some(
                9388i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBricks => Some(9468i32),
            Blocks::Beetroots(state_unique_falcon) => Some(9469i32 + state_unique_falcon.age),
            Blocks::DirtPath => Some(9473i32),
            Blocks::EndGateway => Some(9474i32),
            Blocks::RepeatingCommandBlock(state_unique_falcon) => Some(
                9475i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::ChainCommandBlock(state_unique_falcon) => Some(
                9487i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::FrostedIce(state_unique_falcon) => Some(9499i32 + state_unique_falcon.age),
            Blocks::MagmaBlock => Some(9503i32),
            Blocks::NetherWartBlock => Some(9504i32),
            Blocks::RedNetherBricks => Some(9505i32),
            Blocks::BoneBlock(state_unique_falcon) => {
                Some(9506i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StructureVoid => Some(9509i32),
            Blocks::Observer(state_unique_falcon) => Some(
                9510i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ShulkerBox(state_unique_falcon) => {
                Some(9522i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteShulkerBox(state_unique_falcon) => {
                Some(9528i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeShulkerBox(state_unique_falcon) => {
                Some(9534i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaShulkerBox(state_unique_falcon) => {
                Some(9540i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueShulkerBox(state_unique_falcon) => {
                Some(9546i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowShulkerBox(state_unique_falcon) => {
                Some(9552i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeShulkerBox(state_unique_falcon) => {
                Some(9558i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkShulkerBox(state_unique_falcon) => {
                Some(9564i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayShulkerBox(state_unique_falcon) => {
                Some(9570i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayShulkerBox(state_unique_falcon) => {
                Some(9576i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanShulkerBox(state_unique_falcon) => {
                Some(9582i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleShulkerBox(state_unique_falcon) => {
                Some(9588i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueShulkerBox(state_unique_falcon) => {
                Some(9594i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownShulkerBox(state_unique_falcon) => {
                Some(9600i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenShulkerBox(state_unique_falcon) => {
                Some(9606i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedShulkerBox(state_unique_falcon) => {
                Some(9612i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackShulkerBox(state_unique_falcon) => {
                Some(9618i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteGlazedTerracotta(state_unique_falcon) => {
                Some(9624i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeGlazedTerracotta(state_unique_falcon) => {
                Some(9628i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaGlazedTerracotta(state_unique_falcon) => {
                Some(9632i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueGlazedTerracotta(state_unique_falcon) => {
                Some(9636i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowGlazedTerracotta(state_unique_falcon) => {
                Some(9640i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeGlazedTerracotta(state_unique_falcon) => {
                Some(9644i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkGlazedTerracotta(state_unique_falcon) => {
                Some(9648i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayGlazedTerracotta(state_unique_falcon) => {
                Some(9652i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayGlazedTerracotta(state_unique_falcon) => {
                Some(9656i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanGlazedTerracotta(state_unique_falcon) => {
                Some(9660i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleGlazedTerracotta(state_unique_falcon) => {
                Some(9664i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueGlazedTerracotta(state_unique_falcon) => {
                Some(9668i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownGlazedTerracotta(state_unique_falcon) => {
                Some(9672i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenGlazedTerracotta(state_unique_falcon) => {
                Some(9676i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedGlazedTerracotta(state_unique_falcon) => {
                Some(9680i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackGlazedTerracotta(state_unique_falcon) => {
                Some(9684i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteConcrete => Some(9688i32),
            Blocks::OrangeConcrete => Some(9689i32),
            Blocks::MagentaConcrete => Some(9690i32),
            Blocks::LightBlueConcrete => Some(9691i32),
            Blocks::YellowConcrete => Some(9692i32),
            Blocks::LimeConcrete => Some(9693i32),
            Blocks::PinkConcrete => Some(9694i32),
            Blocks::GrayConcrete => Some(9695i32),
            Blocks::LightGrayConcrete => Some(9696i32),
            Blocks::CyanConcrete => Some(9697i32),
            Blocks::PurpleConcrete => Some(9698i32),
            Blocks::BlueConcrete => Some(9699i32),
            Blocks::BrownConcrete => Some(9700i32),
            Blocks::GreenConcrete => Some(9701i32),
            Blocks::RedConcrete => Some(9702i32),
            Blocks::BlackConcrete => Some(9703i32),
            Blocks::WhiteConcretePowder => Some(9704i32),
            Blocks::OrangeConcretePowder => Some(9705i32),
            Blocks::MagentaConcretePowder => Some(9706i32),
            Blocks::LightBlueConcretePowder => Some(9707i32),
            Blocks::YellowConcretePowder => Some(9708i32),
            Blocks::LimeConcretePowder => Some(9709i32),
            Blocks::PinkConcretePowder => Some(9710i32),
            Blocks::GrayConcretePowder => Some(9711i32),
            Blocks::LightGrayConcretePowder => Some(9712i32),
            Blocks::CyanConcretePowder => Some(9713i32),
            Blocks::PurpleConcretePowder => Some(9714i32),
            Blocks::BlueConcretePowder => Some(9715i32),
            Blocks::BrownConcretePowder => Some(9716i32),
            Blocks::GreenConcretePowder => Some(9717i32),
            Blocks::RedConcretePowder => Some(9718i32),
            Blocks::BlackConcretePowder => Some(9719i32),
            Blocks::Kelp(state_unique_falcon) => Some(9720i32 + state_unique_falcon.age),
            Blocks::KelpPlant => Some(9746i32),
            Blocks::DriedKelpBlock => Some(9747i32),
            Blocks::TurtleEgg(state_unique_falcon) => {
                Some(9748i32 + state_unique_falcon.hatch + 3 * state_unique_falcon.eggs)
            }
            Blocks::DeadTubeCoralBlock => Some(9760i32),
            Blocks::DeadBrainCoralBlock => Some(9761i32),
            Blocks::DeadBubbleCoralBlock => Some(9762i32),
            Blocks::DeadFireCoralBlock => Some(9763i32),
            Blocks::DeadHornCoralBlock => Some(9764i32),
            Blocks::TubeCoralBlock => Some(9765i32),
            Blocks::BrainCoralBlock => Some(9766i32),
            Blocks::BubbleCoralBlock => Some(9767i32),
            Blocks::FireCoralBlock => Some(9768i32),
            Blocks::HornCoralBlock => Some(9769i32),
            Blocks::DeadTubeCoral(state_unique_falcon) => {
                Some(9770i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoral(state_unique_falcon) => {
                Some(9772i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoral(state_unique_falcon) => {
                Some(9774i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoral(state_unique_falcon) => {
                Some(9776i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoral(state_unique_falcon) => {
                Some(9778i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoral(state_unique_falcon) => {
                Some(9780i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoral(state_unique_falcon) => {
                Some(9782i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoral(state_unique_falcon) => {
                Some(9784i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoral(state_unique_falcon) => {
                Some(9786i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoral(state_unique_falcon) => {
                Some(9788i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralFan(state_unique_falcon) => {
                Some(9790i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoralFan(state_unique_falcon) => {
                Some(9792i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoralFan(state_unique_falcon) => {
                Some(9794i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoralFan(state_unique_falcon) => {
                Some(9796i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoralFan(state_unique_falcon) => {
                Some(9798i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoralFan(state_unique_falcon) => {
                Some(9800i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoralFan(state_unique_falcon) => {
                Some(9802i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoralFan(state_unique_falcon) => {
                Some(9804i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoralFan(state_unique_falcon) => {
                Some(9806i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoralFan(state_unique_falcon) => {
                Some(9808i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralWallFan(state_unique_falcon) => Some(
                9810i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBrainCoralWallFan(state_unique_falcon) => Some(
                9818i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBubbleCoralWallFan(state_unique_falcon) => Some(
                9826i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadFireCoralWallFan(state_unique_falcon) => Some(
                9834i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadHornCoralWallFan(state_unique_falcon) => Some(
                9842i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TubeCoralWallFan(state_unique_falcon) => Some(
                9850i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrainCoralWallFan(state_unique_falcon) => Some(
                9858i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BubbleCoralWallFan(state_unique_falcon) => Some(
                9866i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::FireCoralWallFan(state_unique_falcon) => Some(
                9874i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HornCoralWallFan(state_unique_falcon) => Some(
                9882i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SeaPickle(state_unique_falcon) => Some(
                9890i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.pickles,
            ),
            Blocks::BlueIce => Some(9898i32),
            Blocks::Conduit(state_unique_falcon) => {
                Some(9899i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BambooSapling => Some(9901i32),
            Blocks::Bamboo(state_unique_falcon) => Some(
                9902i32
                    + state_unique_falcon.stage
                    + 2 * (state_unique_falcon.leaves as i32)
                    + 6 * state_unique_falcon.age,
            ),
            Blocks::PottedBamboo => Some(9914i32),
            Blocks::VoidAir => Some(9915i32),
            Blocks::CaveAir => Some(9916i32),
            Blocks::BubbleColumn(state_unique_falcon) => {
                Some(9917i32 + (!state_unique_falcon.drag() as i32))
            }
            Blocks::PolishedGraniteStairs(state_unique_falcon) => Some(
                9919i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothRedSandstoneStairs(state_unique_falcon) => Some(
                9999i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MossyStoneBrickStairs(state_unique_falcon) => Some(
                10079i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedDioriteStairs(state_unique_falcon) => Some(
                10159i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MossyCobblestoneStairs(state_unique_falcon) => Some(
                10239i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBrickStairs(state_unique_falcon) => Some(
                10319i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneStairs(state_unique_falcon) => Some(
                10399i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothSandstoneStairs(state_unique_falcon) => Some(
                10479i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothQuartzStairs(state_unique_falcon) => Some(
                10559i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GraniteStairs(state_unique_falcon) => Some(
                10639i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AndesiteStairs(state_unique_falcon) => Some(
                10719i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedNetherBrickStairs(state_unique_falcon) => Some(
                10799i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedAndesiteStairs(state_unique_falcon) => Some(
                10879i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DioriteStairs(state_unique_falcon) => Some(
                10959i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedGraniteSlab(state_unique_falcon) => Some(
                11039i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothRedSandstoneSlab(state_unique_falcon) => Some(
                11045i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::MossyStoneBrickSlab(state_unique_falcon) => Some(
                11051i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedDioriteSlab(state_unique_falcon) => Some(
                11057i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::MossyCobblestoneSlab(state_unique_falcon) => Some(
                11063i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::EndStoneBrickSlab(state_unique_falcon) => Some(
                11069i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothSandstoneSlab(state_unique_falcon) => Some(
                11075i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothQuartzSlab(state_unique_falcon) => Some(
                11081i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::GraniteSlab(state_unique_falcon) => Some(
                11087i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AndesiteSlab(state_unique_falcon) => Some(
                11093i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedNetherBrickSlab(state_unique_falcon) => Some(
                11099i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedAndesiteSlab(state_unique_falcon) => Some(
                11105i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DioriteSlab(state_unique_falcon) => Some(
                11111i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickWall(state_unique_falcon) => Some(
                11117i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::PrismarineWall(state_unique_falcon) => Some(
                11441i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::RedSandstoneWall(state_unique_falcon) => Some(
                11765i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::MossyStoneBrickWall(state_unique_falcon) => Some(
                12089i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::GraniteWall(state_unique_falcon) => Some(
                12413i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::StoneBrickWall(state_unique_falcon) => Some(
                12737i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::NetherBrickWall(state_unique_falcon) => Some(
                13061i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::AndesiteWall(state_unique_falcon) => Some(
                13385i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::RedNetherBrickWall(state_unique_falcon) => Some(
                13709i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::SandstoneWall(state_unique_falcon) => Some(
                14033i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::EndStoneBrickWall(state_unique_falcon) => Some(
                14357i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::DioriteWall(state_unique_falcon) => Some(
                14681i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::Scaffolding(state_unique_falcon) => Some(
                15005i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.distance
                    + 16 * (!state_unique_falcon.bottom() as i32),
            ),
            Blocks::Loom(state_unique_falcon) => {
                Some(15037i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Barrel(state_unique_falcon) => Some(
                15041i32
                    + (!state_unique_falcon.open() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Smoker(state_unique_falcon) => Some(
                15053i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlastFurnace(state_unique_falcon) => Some(
                15061i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CartographyTable => Some(15069i32),
            Blocks::FletchingTable => Some(15070i32),
            Blocks::Grindstone(state_unique_falcon) => Some(
                15071i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (state_unique_falcon.face as i32),
            ),
            Blocks::Lectern(state_unique_falcon) => Some(
                15083i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.has_book() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmithingTable => Some(15099i32),
            Blocks::Stonecutter(state_unique_falcon) => {
                Some(15100i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Bell(state_unique_falcon) => Some(
                15104i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.attachment as i32),
            ),
            Blocks::Lantern(state_unique_falcon) => Some(
                15136i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.hanging() as i32),
            ),
            Blocks::SoulLantern(state_unique_falcon) => Some(
                15140i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.hanging() as i32),
            ),
            Blocks::Campfire(state_unique_falcon) => Some(
                15144i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.signal_fire() as i32)
                    + 4 * (!state_unique_falcon.lit() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SoulCampfire(state_unique_falcon) => Some(
                15176i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.signal_fire() as i32)
                    + 4 * (!state_unique_falcon.lit() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SweetBerryBush(state_unique_falcon) => Some(15208i32 + state_unique_falcon.age),
            Blocks::WarpedStem(state_unique_falcon) => {
                Some(15212i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedWarpedStem(state_unique_falcon) => {
                Some(15215i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WarpedHyphae(state_unique_falcon) => {
                Some(15218i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedWarpedHyphae(state_unique_falcon) => {
                Some(15221i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WarpedNylium => Some(15224i32),
            Blocks::WarpedFungus => Some(15225i32),
            Blocks::WarpedWartBlock => Some(15226i32),
            Blocks::WarpedRoots => Some(15227i32),
            Blocks::NetherSprouts => Some(15228i32),
            Blocks::CrimsonStem(state_unique_falcon) => {
                Some(15229i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedCrimsonStem(state_unique_falcon) => {
                Some(15232i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CrimsonHyphae(state_unique_falcon) => {
                Some(15235i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedCrimsonHyphae(state_unique_falcon) => {
                Some(15238i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CrimsonNylium => Some(15241i32),
            Blocks::CrimsonFungus => Some(15242i32),
            Blocks::Shroomlight => Some(15243i32),
            Blocks::WeepingVines(state_unique_falcon) => Some(15244i32 + state_unique_falcon.age),
            Blocks::WeepingVinesPlant => Some(15270i32),
            Blocks::TwistingVines(state_unique_falcon) => Some(15271i32 + state_unique_falcon.age),
            Blocks::TwistingVinesPlant => Some(15297i32),
            Blocks::CrimsonRoots => Some(15298i32),
            Blocks::CrimsonPlanks => Some(15299i32),
            Blocks::WarpedPlanks => Some(15300i32),
            Blocks::CrimsonSlab(state_unique_falcon) => Some(
                15301i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::WarpedSlab(state_unique_falcon) => Some(
                15307i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CrimsonPressurePlate(state_unique_falcon) => {
                Some(15313i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::WarpedPressurePlate(state_unique_falcon) => {
                Some(15315i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::CrimsonFence(state_unique_falcon) => Some(
                15317i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::WarpedFence(state_unique_falcon) => Some(
                15349i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::CrimsonTrapdoor(state_unique_falcon) => Some(
                15381i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedTrapdoor(state_unique_falcon) => Some(
                15445i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonFenceGate(state_unique_falcon) => Some(
                15509i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedFenceGate(state_unique_falcon) => Some(
                15541i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonStairs(state_unique_falcon) => Some(
                15573i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedStairs(state_unique_falcon) => Some(
                15653i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonButton(state_unique_falcon) => Some(
                15733i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::WarpedButton(state_unique_falcon) => Some(
                15757i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::CrimsonDoor(state_unique_falcon) => Some(
                15781i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedDoor(state_unique_falcon) => Some(
                15845i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonSign(state_unique_falcon) => Some(
                15909i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::WarpedSign(state_unique_falcon) => Some(
                15941i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::CrimsonWallSign(state_unique_falcon) => Some(
                15973i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedWallSign(state_unique_falcon) => Some(
                15981i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StructureBlock(state_unique_falcon) => {
                Some(15989i32 + (state_unique_falcon.mode as i32))
            }
            Blocks::Jigsaw(state_unique_falcon) => {
                Some(15993i32 + (state_unique_falcon.orientation as i32))
            }
            Blocks::Composter(state_unique_falcon) => Some(16005i32 + state_unique_falcon.level),
            Blocks::Target(state_unique_falcon) => Some(16014i32 + state_unique_falcon.power),
            Blocks::BeeNest(state_unique_falcon) => Some(
                16030i32
                    + state_unique_falcon.honey_level
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Beehive(state_unique_falcon) => Some(
                16054i32
                    + state_unique_falcon.honey_level
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HoneyBlock => Some(16078i32),
            Blocks::HoneycombBlock => Some(16079i32),
            Blocks::NetheriteBlock => Some(16080i32),
            Blocks::AncientDebris => Some(16081i32),
            Blocks::CryingObsidian => Some(16082i32),
            Blocks::RespawnAnchor(state_unique_falcon) => {
                Some(16083i32 + state_unique_falcon.charges)
            }
            Blocks::PottedCrimsonFungus => Some(16088i32),
            Blocks::PottedWarpedFungus => Some(16089i32),
            Blocks::PottedCrimsonRoots => Some(16090i32),
            Blocks::PottedWarpedRoots => Some(16091i32),
            Blocks::Lodestone => Some(16092i32),
            Blocks::Blackstone => Some(16093i32),
            Blocks::BlackstoneStairs(state_unique_falcon) => Some(
                16094i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlackstoneWall(state_unique_falcon) => Some(
                16174i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::BlackstoneSlab(state_unique_falcon) => Some(
                16498i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedBlackstone => Some(16504i32),
            Blocks::PolishedBlackstoneBricks => Some(16505i32),
            Blocks::CrackedPolishedBlackstoneBricks => Some(16506i32),
            Blocks::ChiseledPolishedBlackstone => Some(16507i32),
            Blocks::PolishedBlackstoneBrickSlab(state_unique_falcon) => Some(
                16508i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedBlackstoneBrickStairs(state_unique_falcon) => Some(
                16514i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedBlackstoneBrickWall(state_unique_falcon) => Some(
                16594i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::GildedBlackstone => Some(16918i32),
            Blocks::PolishedBlackstoneStairs(state_unique_falcon) => Some(
                16919i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedBlackstoneSlab(state_unique_falcon) => Some(
                16999i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedBlackstonePressurePlate(state_unique_falcon) => {
                Some(17005i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::PolishedBlackstoneButton(state_unique_falcon) => Some(
                17007i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::PolishedBlackstoneWall(state_unique_falcon) => Some(
                17031i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::ChiseledNetherBricks => Some(17355i32),
            Blocks::CrackedNetherBricks => Some(17356i32),
            Blocks::QuartzBricks => Some(17357i32),
            Blocks::Candle(state_unique_falcon) => Some(
                17358i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::WhiteCandle(state_unique_falcon) => Some(
                17374i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::OrangeCandle(state_unique_falcon) => Some(
                17390i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::MagentaCandle(state_unique_falcon) => Some(
                17406i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::LightBlueCandle(state_unique_falcon) => Some(
                17422i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::YellowCandle(state_unique_falcon) => Some(
                17438i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::LimeCandle(state_unique_falcon) => Some(
                17454i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::PinkCandle(state_unique_falcon) => Some(
                17470i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::GrayCandle(state_unique_falcon) => Some(
                17486i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::LightGrayCandle(state_unique_falcon) => Some(
                17502i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::CyanCandle(state_unique_falcon) => Some(
                17518i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::PurpleCandle(state_unique_falcon) => Some(
                17534i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::BlueCandle(state_unique_falcon) => Some(
                17550i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::BrownCandle(state_unique_falcon) => Some(
                17566i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::GreenCandle(state_unique_falcon) => Some(
                17582i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::RedCandle(state_unique_falcon) => Some(
                17598i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::BlackCandle(state_unique_falcon) => Some(
                17614i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.lit() as i32)
                    + 4 * state_unique_falcon.candles,
            ),
            Blocks::CandleCake(state_unique_falcon) => {
                Some(17630i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::WhiteCandleCake(state_unique_falcon) => {
                Some(17632i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::OrangeCandleCake(state_unique_falcon) => {
                Some(17634i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::MagentaCandleCake(state_unique_falcon) => {
                Some(17636i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::LightBlueCandleCake(state_unique_falcon) => {
                Some(17638i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::YellowCandleCake(state_unique_falcon) => {
                Some(17640i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::LimeCandleCake(state_unique_falcon) => {
                Some(17642i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::PinkCandleCake(state_unique_falcon) => {
                Some(17644i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::GrayCandleCake(state_unique_falcon) => {
                Some(17646i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::LightGrayCandleCake(state_unique_falcon) => {
                Some(17648i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::CyanCandleCake(state_unique_falcon) => {
                Some(17650i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::PurpleCandleCake(state_unique_falcon) => {
                Some(17652i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::BlueCandleCake(state_unique_falcon) => {
                Some(17654i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::BrownCandleCake(state_unique_falcon) => {
                Some(17656i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::GreenCandleCake(state_unique_falcon) => {
                Some(17658i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedCandleCake(state_unique_falcon) => {
                Some(17660i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::BlackCandleCake(state_unique_falcon) => {
                Some(17662i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::AmethystBlock => Some(17664i32),
            Blocks::BuddingAmethyst => Some(17665i32),
            Blocks::AmethystCluster(state_unique_falcon) => Some(
                17666i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LargeAmethystBud(state_unique_falcon) => Some(
                17678i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MediumAmethystBud(state_unique_falcon) => Some(
                17690i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmallAmethystBud(state_unique_falcon) => Some(
                17702i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Tuff => Some(17714i32),
            Blocks::Calcite => Some(17715i32),
            Blocks::TintedGlass => Some(17716i32),
            Blocks::PowderSnow => Some(17717i32),
            Blocks::SculkSensor(state_unique_falcon) => Some(
                17718i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.sculk_sensor_phase as i32)
                    + 6 * state_unique_falcon.power,
            ),
            Blocks::OxidizedCopper => Some(17814i32),
            Blocks::WeatheredCopper => Some(17815i32),
            Blocks::ExposedCopper => Some(17816i32),
            Blocks::CopperBlock => Some(17817i32),
            Blocks::CopperOre => Some(17818i32),
            Blocks::DeepslateCopperOre => Some(17819i32),
            Blocks::OxidizedCutCopper => Some(17820i32),
            Blocks::WeatheredCutCopper => Some(17821i32),
            Blocks::ExposedCutCopper => Some(17822i32),
            Blocks::CutCopper => Some(17823i32),
            Blocks::OxidizedCutCopperStairs(state_unique_falcon) => Some(
                17824i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WeatheredCutCopperStairs(state_unique_falcon) => Some(
                17904i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ExposedCutCopperStairs(state_unique_falcon) => Some(
                17984i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CutCopperStairs(state_unique_falcon) => Some(
                18064i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OxidizedCutCopperSlab(state_unique_falcon) => Some(
                18144i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::WeatheredCutCopperSlab(state_unique_falcon) => Some(
                18150i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::ExposedCutCopperSlab(state_unique_falcon) => Some(
                18156i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutCopperSlab(state_unique_falcon) => Some(
                18162i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::WaxedCopperBlock => Some(18168i32),
            Blocks::WaxedWeatheredCopper => Some(18169i32),
            Blocks::WaxedExposedCopper => Some(18170i32),
            Blocks::WaxedOxidizedCopper => Some(18171i32),
            Blocks::WaxedOxidizedCutCopper => Some(18172i32),
            Blocks::WaxedWeatheredCutCopper => Some(18173i32),
            Blocks::WaxedExposedCutCopper => Some(18174i32),
            Blocks::WaxedCutCopper => Some(18175i32),
            Blocks::WaxedOxidizedCutCopperStairs(state_unique_falcon) => Some(
                18176i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WaxedWeatheredCutCopperStairs(state_unique_falcon) => Some(
                18256i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WaxedExposedCutCopperStairs(state_unique_falcon) => Some(
                18336i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WaxedCutCopperStairs(state_unique_falcon) => Some(
                18416i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WaxedOxidizedCutCopperSlab(state_unique_falcon) => Some(
                18496i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::WaxedWeatheredCutCopperSlab(state_unique_falcon) => Some(
                18502i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::WaxedExposedCutCopperSlab(state_unique_falcon) => Some(
                18508i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::WaxedCutCopperSlab(state_unique_falcon) => Some(
                18514i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::LightningRod(state_unique_falcon) => Some(
                18520i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PointedDripstone(state_unique_falcon) => Some(
                18544i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.vertical_direction as i32)
                    + 4 * (state_unique_falcon.thickness as i32),
            ),
            Blocks::DripstoneBlock => Some(18564i32),
            Blocks::CaveVines(state_unique_falcon) => Some(
                18565i32 + (!state_unique_falcon.berries() as i32) + 2 * state_unique_falcon.age,
            ),
            Blocks::CaveVinesPlant(state_unique_falcon) => {
                Some(18617i32 + (!state_unique_falcon.berries() as i32))
            }
            Blocks::SporeBlossom => Some(18619i32),
            Blocks::Azalea => Some(18620i32),
            Blocks::FloweringAzalea => Some(18621i32),
            Blocks::MossCarpet => Some(18622i32),
            Blocks::MossBlock => Some(18623i32),
            Blocks::BigDripleaf(state_unique_falcon) => Some(
                18624i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.tilt as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BigDripleafStem(state_unique_falcon) => Some(
                18656i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmallDripleaf(state_unique_falcon) => Some(
                18664i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.half as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HangingRoots(state_unique_falcon) => {
                Some(18680i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::RootedDirt => Some(18682i32),
            Blocks::Deepslate(state_unique_falcon) => {
                Some(18683i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CobbledDeepslate => Some(18686i32),
            Blocks::CobbledDeepslateStairs(state_unique_falcon) => Some(
                18687i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CobbledDeepslateSlab(state_unique_falcon) => Some(
                18767i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CobbledDeepslateWall(state_unique_falcon) => Some(
                18773i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::PolishedDeepslate => Some(19097i32),
            Blocks::PolishedDeepslateStairs(state_unique_falcon) => Some(
                19098i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedDeepslateSlab(state_unique_falcon) => Some(
                19178i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedDeepslateWall(state_unique_falcon) => Some(
                19184i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::DeepslateTiles => Some(19508i32),
            Blocks::DeepslateTileStairs(state_unique_falcon) => Some(
                19509i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeepslateTileSlab(state_unique_falcon) => Some(
                19589i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DeepslateTileWall(state_unique_falcon) => Some(
                19595i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::DeepslateBricks => Some(19919i32),
            Blocks::DeepslateBrickStairs(state_unique_falcon) => Some(
                19920i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeepslateBrickSlab(state_unique_falcon) => Some(
                20000i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DeepslateBrickWall(state_unique_falcon) => Some(
                20006i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::ChiseledDeepslate => Some(20330i32),
            Blocks::CrackedDeepslateBricks => Some(20331i32),
            Blocks::CrackedDeepslateTiles => Some(20332i32),
            Blocks::InfestedDeepslate(state_unique_falcon) => {
                Some(20333i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SmoothBasalt => Some(20336i32),
            Blocks::RawIronBlock => Some(20337i32),
            Blocks::RawCopperBlock => Some(20338i32),
            Blocks::RawGoldBlock => Some(20339i32),
            Blocks::PottedAzaleaBush => Some(20340i32),
            Blocks::PottedFloweringAzaleaBush => Some(20341i32),
        }
    }
    pub fn get_global_id_2586(&self) -> Option<i32> {
        match self {
            Blocks::Air => Some(0i32),
            Blocks::Stone => Some(1i32),
            Blocks::Granite => Some(2i32),
            Blocks::PolishedGranite => Some(3i32),
            Blocks::Diorite => Some(4i32),
            Blocks::PolishedDiorite => Some(5i32),
            Blocks::Andesite => Some(6i32),
            Blocks::PolishedAndesite => Some(7i32),
            Blocks::GrassBlock(state_unique_falcon) => {
                Some(8i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Dirt => Some(10i32),
            Blocks::CoarseDirt => Some(11i32),
            Blocks::Podzol(state_unique_falcon) => {
                Some(12i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Cobblestone => Some(14i32),
            Blocks::OakPlanks => Some(15i32),
            Blocks::SprucePlanks => Some(16i32),
            Blocks::BirchPlanks => Some(17i32),
            Blocks::JunglePlanks => Some(18i32),
            Blocks::AcaciaPlanks => Some(19i32),
            Blocks::DarkOakPlanks => Some(20i32),
            Blocks::OakSapling(state_unique_falcon) => Some(21i32 + state_unique_falcon.stage),
            Blocks::SpruceSapling(state_unique_falcon) => Some(23i32 + state_unique_falcon.stage),
            Blocks::BirchSapling(state_unique_falcon) => Some(25i32 + state_unique_falcon.stage),
            Blocks::JungleSapling(state_unique_falcon) => Some(27i32 + state_unique_falcon.stage),
            Blocks::AcaciaSapling(state_unique_falcon) => Some(29i32 + state_unique_falcon.stage),
            Blocks::DarkOakSapling(state_unique_falcon) => Some(31i32 + state_unique_falcon.stage),
            Blocks::Bedrock => Some(33i32),
            Blocks::Water(state_unique_falcon) => Some(34i32 + state_unique_falcon.level),
            Blocks::Lava(state_unique_falcon) => Some(50i32 + state_unique_falcon.level),
            Blocks::Sand => Some(66i32),
            Blocks::RedSand => Some(67i32),
            Blocks::Gravel => Some(68i32),
            Blocks::GoldOre => Some(69i32),
            Blocks::IronOre => Some(70i32),
            Blocks::CoalOre => Some(71i32),
            Blocks::NetherGoldOre => Some(72i32),
            Blocks::OakLog(state_unique_falcon) => Some(73i32 + (state_unique_falcon.axis as i32)),
            Blocks::SpruceLog(state_unique_falcon) => {
                Some(76i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchLog(state_unique_falcon) => {
                Some(79i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleLog(state_unique_falcon) => {
                Some(82i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaLog(state_unique_falcon) => {
                Some(85i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakLog(state_unique_falcon) => {
                Some(88i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceLog(state_unique_falcon) => {
                Some(91i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchLog(state_unique_falcon) => {
                Some(94i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleLog(state_unique_falcon) => {
                Some(97i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaLog(state_unique_falcon) => {
                Some(100i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakLog(state_unique_falcon) => {
                Some(103i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakLog(state_unique_falcon) => {
                Some(106i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakWood(state_unique_falcon) => {
                Some(109i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SpruceWood(state_unique_falcon) => {
                Some(112i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchWood(state_unique_falcon) => {
                Some(115i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleWood(state_unique_falcon) => {
                Some(118i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaWood(state_unique_falcon) => {
                Some(121i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakWood(state_unique_falcon) => {
                Some(124i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakWood(state_unique_falcon) => {
                Some(127i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceWood(state_unique_falcon) => {
                Some(130i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchWood(state_unique_falcon) => {
                Some(133i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleWood(state_unique_falcon) => {
                Some(136i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaWood(state_unique_falcon) => {
                Some(139i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakWood(state_unique_falcon) => {
                Some(142i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakLeaves(state_unique_falcon) => Some(
                145i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::SpruceLeaves(state_unique_falcon) => Some(
                159i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::BirchLeaves(state_unique_falcon) => Some(
                173i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::JungleLeaves(state_unique_falcon) => Some(
                187i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::AcaciaLeaves(state_unique_falcon) => Some(
                201i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::DarkOakLeaves(state_unique_falcon) => Some(
                215i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::Sponge => Some(229i32),
            Blocks::WetSponge => Some(230i32),
            Blocks::Glass => Some(231i32),
            Blocks::LapisOre => Some(232i32),
            Blocks::LapisBlock => Some(233i32),
            Blocks::Dispenser(state_unique_falcon) => Some(
                234i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Sandstone => Some(246i32),
            Blocks::ChiseledSandstone => Some(247i32),
            Blocks::CutSandstone => Some(248i32),
            Blocks::NoteBlock(state_unique_falcon) => Some(
                249i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * state_unique_falcon.note
                    + 50 * (state_unique_falcon.instrument as i32),
            ),
            Blocks::WhiteBed(state_unique_falcon) => Some(
                1049i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OrangeBed(state_unique_falcon) => Some(
                1065i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MagentaBed(state_unique_falcon) => Some(
                1081i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightBlueBed(state_unique_falcon) => Some(
                1097i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::YellowBed(state_unique_falcon) => Some(
                1113i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LimeBed(state_unique_falcon) => Some(
                1129i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PinkBed(state_unique_falcon) => Some(
                1145i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GrayBed(state_unique_falcon) => Some(
                1161i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightGrayBed(state_unique_falcon) => Some(
                1177i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CyanBed(state_unique_falcon) => Some(
                1193i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PurpleBed(state_unique_falcon) => Some(
                1209i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlueBed(state_unique_falcon) => Some(
                1225i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrownBed(state_unique_falcon) => Some(
                1241i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GreenBed(state_unique_falcon) => Some(
                1257i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedBed(state_unique_falcon) => Some(
                1273i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlackBed(state_unique_falcon) => Some(
                1289i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PoweredRail(state_unique_falcon) => Some(
                1305i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::DetectorRail(state_unique_falcon) => Some(
                1317i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::StickyPiston(state_unique_falcon) => Some(
                1329i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::Cobweb => Some(1341i32),
            Blocks::Grass => Some(1342i32),
            Blocks::Fern => Some(1343i32),
            Blocks::DeadBush => Some(1344i32),
            Blocks::Seagrass => Some(1345i32),
            Blocks::TallSeagrass(state_unique_falcon) => {
                Some(1346i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Piston(state_unique_falcon) => Some(
                1348i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::PistonHead(state_unique_falcon) => Some(
                1360i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (!state_unique_falcon.short() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteWool => Some(1384i32),
            Blocks::OrangeWool => Some(1385i32),
            Blocks::MagentaWool => Some(1386i32),
            Blocks::LightBlueWool => Some(1387i32),
            Blocks::YellowWool => Some(1388i32),
            Blocks::LimeWool => Some(1389i32),
            Blocks::PinkWool => Some(1390i32),
            Blocks::GrayWool => Some(1391i32),
            Blocks::LightGrayWool => Some(1392i32),
            Blocks::CyanWool => Some(1393i32),
            Blocks::PurpleWool => Some(1394i32),
            Blocks::BlueWool => Some(1395i32),
            Blocks::BrownWool => Some(1396i32),
            Blocks::GreenWool => Some(1397i32),
            Blocks::RedWool => Some(1398i32),
            Blocks::BlackWool => Some(1399i32),
            Blocks::MovingPiston(state_unique_falcon) => Some(
                1400i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Dandelion => Some(1412i32),
            Blocks::Poppy => Some(1413i32),
            Blocks::BlueOrchid => Some(1414i32),
            Blocks::Allium => Some(1415i32),
            Blocks::AzureBluet => Some(1416i32),
            Blocks::RedTulip => Some(1417i32),
            Blocks::OrangeTulip => Some(1418i32),
            Blocks::WhiteTulip => Some(1419i32),
            Blocks::PinkTulip => Some(1420i32),
            Blocks::OxeyeDaisy => Some(1421i32),
            Blocks::Cornflower => Some(1422i32),
            Blocks::WitherRose => Some(1423i32),
            Blocks::LilyOfTheValley => Some(1424i32),
            Blocks::BrownMushroom => Some(1425i32),
            Blocks::RedMushroom => Some(1426i32),
            Blocks::GoldBlock => Some(1427i32),
            Blocks::IronBlock => Some(1428i32),
            Blocks::Bricks => Some(1429i32),
            Blocks::Tnt(state_unique_falcon) => {
                Some(1430i32 + (!state_unique_falcon.unstable() as i32))
            }
            Blocks::Bookshelf => Some(1432i32),
            Blocks::MossyCobblestone => Some(1433i32),
            Blocks::Obsidian => Some(1434i32),
            Blocks::Torch => Some(1435i32),
            Blocks::WallTorch(state_unique_falcon) => {
                Some(1436i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Fire(state_unique_falcon) => Some(
                1440i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * state_unique_falcon.age,
            ),
            Blocks::SoulFire => Some(1952i32),
            Blocks::Spawner => Some(1953i32),
            Blocks::OakStairs(state_unique_falcon) => Some(
                1954i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Chest(state_unique_falcon) => Some(
                2034i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedstoneWire(state_unique_falcon) => Some(
                2058i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (state_unique_falcon.south as i32)
                    + 9 * state_unique_falcon.power
                    + 144 * (state_unique_falcon.north as i32)
                    + 432 * (state_unique_falcon.east as i32),
            ),
            Blocks::DiamondOre => Some(3354i32),
            Blocks::DiamondBlock => Some(3355i32),
            Blocks::CraftingTable => Some(3356i32),
            Blocks::Wheat(state_unique_falcon) => Some(3357i32 + state_unique_falcon.age),
            Blocks::Farmland(state_unique_falcon) => Some(3365i32 + state_unique_falcon.moisture),
            Blocks::Furnace(state_unique_falcon) => Some(
                3373i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSign(state_unique_falcon) => Some(
                3381i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::SpruceSign(state_unique_falcon) => Some(
                3413i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::BirchSign(state_unique_falcon) => Some(
                3445i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::AcaciaSign(state_unique_falcon) => Some(
                3477i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::JungleSign(state_unique_falcon) => Some(
                3509i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::DarkOakSign(state_unique_falcon) => Some(
                3541i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::OakDoor(state_unique_falcon) => Some(
                3573i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Ladder(state_unique_falcon) => Some(
                3637i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Rail(state_unique_falcon) => Some(3645i32 + (state_unique_falcon.shape as i32)),
            Blocks::CobblestoneStairs(state_unique_falcon) => Some(
                3655i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakWallSign(state_unique_falcon) => Some(
                3735i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceWallSign(state_unique_falcon) => Some(
                3743i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchWallSign(state_unique_falcon) => Some(
                3751i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaWallSign(state_unique_falcon) => Some(
                3759i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleWallSign(state_unique_falcon) => Some(
                3767i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakWallSign(state_unique_falcon) => Some(
                3775i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Lever(state_unique_falcon) => Some(
                3783i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::StonePressurePlate(state_unique_falcon) => {
                Some(3807i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::IronDoor(state_unique_falcon) => Some(
                3809i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakPressurePlate(state_unique_falcon) => {
                Some(3873i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::SprucePressurePlate(state_unique_falcon) => {
                Some(3875i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::BirchPressurePlate(state_unique_falcon) => {
                Some(3877i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::JunglePressurePlate(state_unique_falcon) => {
                Some(3879i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::AcaciaPressurePlate(state_unique_falcon) => {
                Some(3881i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::DarkOakPressurePlate(state_unique_falcon) => {
                Some(3883i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::RedstoneOre(state_unique_falcon) => {
                Some(3885i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneTorch(state_unique_falcon) => {
                Some(3887i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneWallTorch(state_unique_falcon) => Some(
                3889i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneButton(state_unique_falcon) => Some(
                3897i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::Snow(state_unique_falcon) => Some(3921i32 + state_unique_falcon.layers),
            Blocks::Ice => Some(3929i32),
            Blocks::SnowBlock => Some(3930i32),
            Blocks::Cactus(state_unique_falcon) => Some(3931i32 + state_unique_falcon.age),
            Blocks::Clay => Some(3947i32),
            Blocks::SugarCane(state_unique_falcon) => Some(3948i32 + state_unique_falcon.age),
            Blocks::Jukebox(state_unique_falcon) => {
                Some(3964i32 + (!state_unique_falcon.has_record() as i32))
            }
            Blocks::OakFence(state_unique_falcon) => Some(
                3966i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Pumpkin => Some(3998i32),
            Blocks::Netherrack => Some(3999i32),
            Blocks::SoulSand => Some(4000i32),
            Blocks::SoulSoil => Some(4001i32),
            Blocks::Basalt(state_unique_falcon) => {
                Some(4002i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::PolishedBasalt(state_unique_falcon) => {
                Some(4005i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SoulTorch => Some(4008i32),
            Blocks::SoulWallTorch(state_unique_falcon) => {
                Some(4009i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Glowstone => Some(4013i32),
            Blocks::NetherPortal(state_unique_falcon) => {
                Some(4014i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CarvedPumpkin(state_unique_falcon) => {
                Some(4016i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::JackOLantern(state_unique_falcon) => {
                Some(4020i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Cake(state_unique_falcon) => Some(4024i32 + state_unique_falcon.bites),
            Blocks::Repeater(state_unique_falcon) => Some(
                4031i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.locked() as i32)
                    + 4 * (state_unique_falcon.facing as i32)
                    + 16 * state_unique_falcon.delay,
            ),
            Blocks::WhiteStainedGlass => Some(4095i32),
            Blocks::OrangeStainedGlass => Some(4096i32),
            Blocks::MagentaStainedGlass => Some(4097i32),
            Blocks::LightBlueStainedGlass => Some(4098i32),
            Blocks::YellowStainedGlass => Some(4099i32),
            Blocks::LimeStainedGlass => Some(4100i32),
            Blocks::PinkStainedGlass => Some(4101i32),
            Blocks::GrayStainedGlass => Some(4102i32),
            Blocks::LightGrayStainedGlass => Some(4103i32),
            Blocks::CyanStainedGlass => Some(4104i32),
            Blocks::PurpleStainedGlass => Some(4105i32),
            Blocks::BlueStainedGlass => Some(4106i32),
            Blocks::BrownStainedGlass => Some(4107i32),
            Blocks::GreenStainedGlass => Some(4108i32),
            Blocks::RedStainedGlass => Some(4109i32),
            Blocks::BlackStainedGlass => Some(4110i32),
            Blocks::OakTrapdoor(state_unique_falcon) => Some(
                4111i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceTrapdoor(state_unique_falcon) => Some(
                4175i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchTrapdoor(state_unique_falcon) => Some(
                4239i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleTrapdoor(state_unique_falcon) => Some(
                4303i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaTrapdoor(state_unique_falcon) => Some(
                4367i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakTrapdoor(state_unique_falcon) => Some(
                4431i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBricks => Some(4495i32),
            Blocks::MossyStoneBricks => Some(4496i32),
            Blocks::CrackedStoneBricks => Some(4497i32),
            Blocks::ChiseledStoneBricks => Some(4498i32),
            Blocks::InfestedStone => Some(4499i32),
            Blocks::InfestedCobblestone => Some(4500i32),
            Blocks::InfestedStoneBricks => Some(4501i32),
            Blocks::InfestedMossyStoneBricks => Some(4502i32),
            Blocks::InfestedCrackedStoneBricks => Some(4503i32),
            Blocks::InfestedChiseledStoneBricks => Some(4504i32),
            Blocks::BrownMushroomBlock(state_unique_falcon) => Some(
                4505i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::RedMushroomBlock(state_unique_falcon) => Some(
                4569i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::MushroomStem(state_unique_falcon) => Some(
                4633i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::IronBars(state_unique_falcon) => Some(
                4697i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Chain(state_unique_falcon) => Some(
                4729i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.axis as i32),
            ),
            Blocks::GlassPane(state_unique_falcon) => Some(
                4735i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Melon => Some(4767i32),
            Blocks::AttachedPumpkinStem(state_unique_falcon) => {
                Some(4768i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::AttachedMelonStem(state_unique_falcon) => {
                Some(4772i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PumpkinStem(state_unique_falcon) => Some(4776i32 + state_unique_falcon.age),
            Blocks::MelonStem(state_unique_falcon) => Some(4784i32 + state_unique_falcon.age),
            Blocks::Vine(state_unique_falcon) => Some(
                4792i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OakFenceGate(state_unique_falcon) => Some(
                4824i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrickStairs(state_unique_falcon) => Some(
                4856i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBrickStairs(state_unique_falcon) => Some(
                4936i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Mycelium(state_unique_falcon) => {
                Some(5016i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::LilyPad => Some(5018i32),
            Blocks::NetherBricks => Some(5019i32),
            Blocks::NetherBrickFence(state_unique_falcon) => Some(
                5020i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::NetherBrickStairs(state_unique_falcon) => Some(
                5052i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::NetherWart(state_unique_falcon) => Some(5132i32 + state_unique_falcon.age),
            Blocks::EnchantingTable => Some(5136i32),
            Blocks::BrewingStand(state_unique_falcon) => Some(
                5137i32
                    + (!state_unique_falcon.has_bottle_2() as i32)
                    + 2 * (!state_unique_falcon.has_bottle_1() as i32)
                    + 4 * (!state_unique_falcon.has_bottle_0() as i32),
            ),
            Blocks::Cauldron => Some(5145i32),
            Blocks::WaterCauldron(state_unique_falcon) => Some(5146i32 + state_unique_falcon.level),
            Blocks::EndPortal => Some(5149i32),
            Blocks::EndPortalFrame(state_unique_falcon) => Some(
                5150i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (!state_unique_falcon.eye() as i32),
            ),
            Blocks::EndStone => Some(5158i32),
            Blocks::DragonEgg => Some(5159i32),
            Blocks::RedstoneLamp(state_unique_falcon) => {
                Some(5160i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::Cocoa(state_unique_falcon) => {
                Some(5162i32 + (state_unique_falcon.facing as i32) + 4 * state_unique_falcon.age)
            }
            Blocks::SandstoneStairs(state_unique_falcon) => Some(
                5174i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EmeraldOre => Some(5254i32),
            Blocks::EnderChest(state_unique_falcon) => Some(
                5255i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TripwireHook(state_unique_falcon) => Some(
                5263i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::Tripwire(state_unique_falcon) => Some(
                5279i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.south() as i32)
                    + 4 * (!state_unique_falcon.powered() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.disarmed() as i32)
                    + 64 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::EmeraldBlock => Some(5407i32),
            Blocks::SpruceStairs(state_unique_falcon) => Some(
                5408i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchStairs(state_unique_falcon) => Some(
                5488i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleStairs(state_unique_falcon) => Some(
                5568i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CommandBlock(state_unique_falcon) => Some(
                5648i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::Beacon => Some(5660i32),
            Blocks::CobblestoneWall(state_unique_falcon) => Some(
                5661i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::MossyCobblestoneWall(state_unique_falcon) => Some(
                5985i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::FlowerPot => Some(6309i32),
            Blocks::PottedOakSapling => Some(6310i32),
            Blocks::PottedSpruceSapling => Some(6311i32),
            Blocks::PottedBirchSapling => Some(6312i32),
            Blocks::PottedJungleSapling => Some(6313i32),
            Blocks::PottedAcaciaSapling => Some(6314i32),
            Blocks::PottedDarkOakSapling => Some(6315i32),
            Blocks::PottedFern => Some(6316i32),
            Blocks::PottedDandelion => Some(6317i32),
            Blocks::PottedPoppy => Some(6318i32),
            Blocks::PottedBlueOrchid => Some(6319i32),
            Blocks::PottedAllium => Some(6320i32),
            Blocks::PottedAzureBluet => Some(6321i32),
            Blocks::PottedRedTulip => Some(6322i32),
            Blocks::PottedOrangeTulip => Some(6323i32),
            Blocks::PottedWhiteTulip => Some(6324i32),
            Blocks::PottedPinkTulip => Some(6325i32),
            Blocks::PottedOxeyeDaisy => Some(6326i32),
            Blocks::PottedCornflower => Some(6327i32),
            Blocks::PottedLilyOfTheValley => Some(6328i32),
            Blocks::PottedWitherRose => Some(6329i32),
            Blocks::PottedRedMushroom => Some(6330i32),
            Blocks::PottedBrownMushroom => Some(6331i32),
            Blocks::PottedDeadBush => Some(6332i32),
            Blocks::PottedCactus => Some(6333i32),
            Blocks::Carrots(state_unique_falcon) => Some(6334i32 + state_unique_falcon.age),
            Blocks::Potatoes(state_unique_falcon) => Some(6342i32 + state_unique_falcon.age),
            Blocks::OakButton(state_unique_falcon) => Some(
                6350i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SpruceButton(state_unique_falcon) => Some(
                6374i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::BirchButton(state_unique_falcon) => Some(
                6398i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::JungleButton(state_unique_falcon) => Some(
                6422i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::AcaciaButton(state_unique_falcon) => Some(
                6446i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::DarkOakButton(state_unique_falcon) => Some(
                6470i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SkeletonSkull(state_unique_falcon) => {
                Some(6494i32 + state_unique_falcon.rotation)
            }
            Blocks::SkeletonWallSkull(state_unique_falcon) => {
                Some(6510i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WitherSkeletonSkull(state_unique_falcon) => {
                Some(6514i32 + state_unique_falcon.rotation)
            }
            Blocks::WitherSkeletonWallSkull(state_unique_falcon) => {
                Some(6530i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ZombieHead(state_unique_falcon) => Some(6534i32 + state_unique_falcon.rotation),
            Blocks::ZombieWallHead(state_unique_falcon) => {
                Some(6550i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PlayerHead(state_unique_falcon) => Some(6554i32 + state_unique_falcon.rotation),
            Blocks::PlayerWallHead(state_unique_falcon) => {
                Some(6570i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CreeperHead(state_unique_falcon) => {
                Some(6574i32 + state_unique_falcon.rotation)
            }
            Blocks::CreeperWallHead(state_unique_falcon) => {
                Some(6590i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DragonHead(state_unique_falcon) => Some(6594i32 + state_unique_falcon.rotation),
            Blocks::DragonWallHead(state_unique_falcon) => {
                Some(6610i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Anvil(state_unique_falcon) => {
                Some(6614i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChippedAnvil(state_unique_falcon) => {
                Some(6618i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DamagedAnvil(state_unique_falcon) => {
                Some(6622i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::TrappedChest(state_unique_falcon) => Some(
                6626i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightWeightedPressurePlate(state_unique_falcon) => {
                Some(6650i32 + state_unique_falcon.power)
            }
            Blocks::HeavyWeightedPressurePlate(state_unique_falcon) => {
                Some(6666i32 + state_unique_falcon.power)
            }
            Blocks::Comparator(state_unique_falcon) => Some(
                6682i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.mode as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DaylightDetector(state_unique_falcon) => Some(
                6698i32 + state_unique_falcon.power + 16 * (!state_unique_falcon.inverted() as i32),
            ),
            Blocks::RedstoneBlock => Some(6730i32),
            Blocks::NetherQuartzOre => Some(6731i32),
            Blocks::Hopper(state_unique_falcon) => Some(
                6732i32
                    + (state_unique_falcon.facing as i32)
                    + 5 * (!state_unique_falcon.enabled() as i32),
            ),
            Blocks::QuartzBlock => Some(6742i32),
            Blocks::ChiseledQuartzBlock => Some(6743i32),
            Blocks::QuartzPillar(state_unique_falcon) => {
                Some(6744i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::QuartzStairs(state_unique_falcon) => Some(
                6747i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ActivatorRail(state_unique_falcon) => Some(
                6827i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::Dropper(state_unique_falcon) => Some(
                6839i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteTerracotta => Some(6851i32),
            Blocks::OrangeTerracotta => Some(6852i32),
            Blocks::MagentaTerracotta => Some(6853i32),
            Blocks::LightBlueTerracotta => Some(6854i32),
            Blocks::YellowTerracotta => Some(6855i32),
            Blocks::LimeTerracotta => Some(6856i32),
            Blocks::PinkTerracotta => Some(6857i32),
            Blocks::GrayTerracotta => Some(6858i32),
            Blocks::LightGrayTerracotta => Some(6859i32),
            Blocks::CyanTerracotta => Some(6860i32),
            Blocks::PurpleTerracotta => Some(6861i32),
            Blocks::BlueTerracotta => Some(6862i32),
            Blocks::BrownTerracotta => Some(6863i32),
            Blocks::GreenTerracotta => Some(6864i32),
            Blocks::RedTerracotta => Some(6865i32),
            Blocks::BlackTerracotta => Some(6866i32),
            Blocks::WhiteStainedGlassPane(state_unique_falcon) => Some(
                6867i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OrangeStainedGlassPane(state_unique_falcon) => Some(
                6899i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::MagentaStainedGlassPane(state_unique_falcon) => Some(
                6931i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightBlueStainedGlassPane(state_unique_falcon) => Some(
                6963i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::YellowStainedGlassPane(state_unique_falcon) => Some(
                6995i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LimeStainedGlassPane(state_unique_falcon) => Some(
                7027i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PinkStainedGlassPane(state_unique_falcon) => Some(
                7059i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GrayStainedGlassPane(state_unique_falcon) => Some(
                7091i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightGrayStainedGlassPane(state_unique_falcon) => Some(
                7123i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::CyanStainedGlassPane(state_unique_falcon) => Some(
                7155i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PurpleStainedGlassPane(state_unique_falcon) => Some(
                7187i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlueStainedGlassPane(state_unique_falcon) => Some(
                7219i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BrownStainedGlassPane(state_unique_falcon) => Some(
                7251i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GreenStainedGlassPane(state_unique_falcon) => Some(
                7283i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::RedStainedGlassPane(state_unique_falcon) => Some(
                7315i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlackStainedGlassPane(state_unique_falcon) => Some(
                7347i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaStairs(state_unique_falcon) => Some(
                7379i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakStairs(state_unique_falcon) => Some(
                7459i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SlimeBlock => Some(7539i32),
            Blocks::Barrier => Some(7540i32),
            Blocks::IronTrapdoor(state_unique_falcon) => Some(
                7541i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Prismarine => Some(7605i32),
            Blocks::PrismarineBricks => Some(7606i32),
            Blocks::DarkPrismarine => Some(7607i32),
            Blocks::PrismarineStairs(state_unique_falcon) => Some(
                7608i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineBrickStairs(state_unique_falcon) => Some(
                7688i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkPrismarineStairs(state_unique_falcon) => Some(
                7768i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineSlab(state_unique_falcon) => Some(
                7848i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PrismarineBrickSlab(state_unique_falcon) => Some(
                7854i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkPrismarineSlab(state_unique_falcon) => Some(
                7860i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SeaLantern => Some(7866i32),
            Blocks::HayBlock(state_unique_falcon) => {
                Some(7867i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WhiteCarpet => Some(7870i32),
            Blocks::OrangeCarpet => Some(7871i32),
            Blocks::MagentaCarpet => Some(7872i32),
            Blocks::LightBlueCarpet => Some(7873i32),
            Blocks::YellowCarpet => Some(7874i32),
            Blocks::LimeCarpet => Some(7875i32),
            Blocks::PinkCarpet => Some(7876i32),
            Blocks::GrayCarpet => Some(7877i32),
            Blocks::LightGrayCarpet => Some(7878i32),
            Blocks::CyanCarpet => Some(7879i32),
            Blocks::PurpleCarpet => Some(7880i32),
            Blocks::BlueCarpet => Some(7881i32),
            Blocks::BrownCarpet => Some(7882i32),
            Blocks::GreenCarpet => Some(7883i32),
            Blocks::RedCarpet => Some(7884i32),
            Blocks::BlackCarpet => Some(7885i32),
            Blocks::Terracotta => Some(7886i32),
            Blocks::CoalBlock => Some(7887i32),
            Blocks::PackedIce => Some(7888i32),
            Blocks::Sunflower(state_unique_falcon) => {
                Some(7889i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Lilac(state_unique_falcon) => Some(7891i32 + (state_unique_falcon.half as i32)),
            Blocks::RoseBush(state_unique_falcon) => {
                Some(7893i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Peony(state_unique_falcon) => Some(7895i32 + (state_unique_falcon.half as i32)),
            Blocks::TallGrass(state_unique_falcon) => {
                Some(7897i32 + (state_unique_falcon.half as i32))
            }
            Blocks::LargeFern(state_unique_falcon) => {
                Some(7899i32 + (state_unique_falcon.half as i32))
            }
            Blocks::WhiteBanner(state_unique_falcon) => {
                Some(7901i32 + state_unique_falcon.rotation)
            }
            Blocks::OrangeBanner(state_unique_falcon) => {
                Some(7917i32 + state_unique_falcon.rotation)
            }
            Blocks::MagentaBanner(state_unique_falcon) => {
                Some(7933i32 + state_unique_falcon.rotation)
            }
            Blocks::LightBlueBanner(state_unique_falcon) => {
                Some(7949i32 + state_unique_falcon.rotation)
            }
            Blocks::YellowBanner(state_unique_falcon) => {
                Some(7965i32 + state_unique_falcon.rotation)
            }
            Blocks::LimeBanner(state_unique_falcon) => Some(7981i32 + state_unique_falcon.rotation),
            Blocks::PinkBanner(state_unique_falcon) => Some(7997i32 + state_unique_falcon.rotation),
            Blocks::GrayBanner(state_unique_falcon) => Some(8013i32 + state_unique_falcon.rotation),
            Blocks::LightGrayBanner(state_unique_falcon) => {
                Some(8029i32 + state_unique_falcon.rotation)
            }
            Blocks::CyanBanner(state_unique_falcon) => Some(8045i32 + state_unique_falcon.rotation),
            Blocks::PurpleBanner(state_unique_falcon) => {
                Some(8061i32 + state_unique_falcon.rotation)
            }
            Blocks::BlueBanner(state_unique_falcon) => Some(8077i32 + state_unique_falcon.rotation),
            Blocks::BrownBanner(state_unique_falcon) => {
                Some(8093i32 + state_unique_falcon.rotation)
            }
            Blocks::GreenBanner(state_unique_falcon) => {
                Some(8109i32 + state_unique_falcon.rotation)
            }
            Blocks::RedBanner(state_unique_falcon) => Some(8125i32 + state_unique_falcon.rotation),
            Blocks::BlackBanner(state_unique_falcon) => {
                Some(8141i32 + state_unique_falcon.rotation)
            }
            Blocks::WhiteWallBanner(state_unique_falcon) => {
                Some(8157i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeWallBanner(state_unique_falcon) => {
                Some(8161i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaWallBanner(state_unique_falcon) => {
                Some(8165i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueWallBanner(state_unique_falcon) => {
                Some(8169i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowWallBanner(state_unique_falcon) => {
                Some(8173i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeWallBanner(state_unique_falcon) => {
                Some(8177i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkWallBanner(state_unique_falcon) => {
                Some(8181i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayWallBanner(state_unique_falcon) => {
                Some(8185i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayWallBanner(state_unique_falcon) => {
                Some(8189i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanWallBanner(state_unique_falcon) => {
                Some(8193i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleWallBanner(state_unique_falcon) => {
                Some(8197i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueWallBanner(state_unique_falcon) => {
                Some(8201i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownWallBanner(state_unique_falcon) => {
                Some(8205i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenWallBanner(state_unique_falcon) => {
                Some(8209i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedWallBanner(state_unique_falcon) => {
                Some(8213i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackWallBanner(state_unique_falcon) => {
                Some(8217i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedSandstone => Some(8221i32),
            Blocks::ChiseledRedSandstone => Some(8222i32),
            Blocks::CutRedSandstone => Some(8223i32),
            Blocks::RedSandstoneStairs(state_unique_falcon) => Some(
                8224i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSlab(state_unique_falcon) => Some(
                8304i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SpruceSlab(state_unique_falcon) => Some(
                8310i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BirchSlab(state_unique_falcon) => Some(
                8316i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::JungleSlab(state_unique_falcon) => Some(
                8322i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AcaciaSlab(state_unique_falcon) => Some(
                8328i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkOakSlab(state_unique_falcon) => Some(
                8334i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneSlab(state_unique_falcon) => Some(
                8340i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStoneSlab(state_unique_falcon) => Some(
                8346i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SandstoneSlab(state_unique_falcon) => Some(
                8352i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutSandstoneSlab(state_unique_falcon) => Some(
                8358i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PetrifiedOakSlab(state_unique_falcon) => Some(
                8364i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CobblestoneSlab(state_unique_falcon) => Some(
                8370i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickSlab(state_unique_falcon) => Some(
                8376i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneBrickSlab(state_unique_falcon) => Some(
                8382i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::NetherBrickSlab(state_unique_falcon) => Some(
                8388i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::QuartzSlab(state_unique_falcon) => Some(
                8394i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedSandstoneSlab(state_unique_falcon) => Some(
                8400i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutRedSandstoneSlab(state_unique_falcon) => Some(
                8406i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PurpurSlab(state_unique_falcon) => Some(
                8412i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStone => Some(8418i32),
            Blocks::SmoothSandstone => Some(8419i32),
            Blocks::SmoothQuartz => Some(8420i32),
            Blocks::SmoothRedSandstone => Some(8421i32),
            Blocks::SpruceFenceGate(state_unique_falcon) => Some(
                8422i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchFenceGate(state_unique_falcon) => Some(
                8454i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleFenceGate(state_unique_falcon) => Some(
                8486i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaFenceGate(state_unique_falcon) => Some(
                8518i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakFenceGate(state_unique_falcon) => Some(
                8550i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceFence(state_unique_falcon) => Some(
                8582i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BirchFence(state_unique_falcon) => Some(
                8614i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::JungleFence(state_unique_falcon) => Some(
                8646i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaFence(state_unique_falcon) => Some(
                8678i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::DarkOakFence(state_unique_falcon) => Some(
                8710i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::SpruceDoor(state_unique_falcon) => Some(
                8742i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchDoor(state_unique_falcon) => Some(
                8806i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleDoor(state_unique_falcon) => Some(
                8870i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaDoor(state_unique_falcon) => Some(
                8934i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakDoor(state_unique_falcon) => Some(
                8998i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndRod(state_unique_falcon) => {
                Some(9062i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChorusPlant(state_unique_falcon) => Some(
                9068i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::ChorusFlower(state_unique_falcon) => Some(9132i32 + state_unique_falcon.age),
            Blocks::PurpurBlock => Some(9138i32),
            Blocks::PurpurPillar(state_unique_falcon) => {
                Some(9139i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::PurpurStairs(state_unique_falcon) => Some(
                9142i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBricks => Some(9222i32),
            Blocks::Beetroots(state_unique_falcon) => Some(9223i32 + state_unique_falcon.age),
            Blocks::DirtPath => Some(9227i32),
            Blocks::EndGateway => Some(9228i32),
            Blocks::RepeatingCommandBlock(state_unique_falcon) => Some(
                9229i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::ChainCommandBlock(state_unique_falcon) => Some(
                9241i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::FrostedIce(state_unique_falcon) => Some(9253i32 + state_unique_falcon.age),
            Blocks::MagmaBlock => Some(9257i32),
            Blocks::NetherWartBlock => Some(9258i32),
            Blocks::RedNetherBricks => Some(9259i32),
            Blocks::BoneBlock(state_unique_falcon) => {
                Some(9260i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StructureVoid => Some(9263i32),
            Blocks::Observer(state_unique_falcon) => Some(
                9264i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ShulkerBox(state_unique_falcon) => {
                Some(9276i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteShulkerBox(state_unique_falcon) => {
                Some(9282i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeShulkerBox(state_unique_falcon) => {
                Some(9288i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaShulkerBox(state_unique_falcon) => {
                Some(9294i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueShulkerBox(state_unique_falcon) => {
                Some(9300i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowShulkerBox(state_unique_falcon) => {
                Some(9306i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeShulkerBox(state_unique_falcon) => {
                Some(9312i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkShulkerBox(state_unique_falcon) => {
                Some(9318i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayShulkerBox(state_unique_falcon) => {
                Some(9324i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayShulkerBox(state_unique_falcon) => {
                Some(9330i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanShulkerBox(state_unique_falcon) => {
                Some(9336i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleShulkerBox(state_unique_falcon) => {
                Some(9342i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueShulkerBox(state_unique_falcon) => {
                Some(9348i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownShulkerBox(state_unique_falcon) => {
                Some(9354i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenShulkerBox(state_unique_falcon) => {
                Some(9360i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedShulkerBox(state_unique_falcon) => {
                Some(9366i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackShulkerBox(state_unique_falcon) => {
                Some(9372i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteGlazedTerracotta(state_unique_falcon) => {
                Some(9378i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeGlazedTerracotta(state_unique_falcon) => {
                Some(9382i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaGlazedTerracotta(state_unique_falcon) => {
                Some(9386i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueGlazedTerracotta(state_unique_falcon) => {
                Some(9390i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowGlazedTerracotta(state_unique_falcon) => {
                Some(9394i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeGlazedTerracotta(state_unique_falcon) => {
                Some(9398i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkGlazedTerracotta(state_unique_falcon) => {
                Some(9402i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayGlazedTerracotta(state_unique_falcon) => {
                Some(9406i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayGlazedTerracotta(state_unique_falcon) => {
                Some(9410i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanGlazedTerracotta(state_unique_falcon) => {
                Some(9414i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleGlazedTerracotta(state_unique_falcon) => {
                Some(9418i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueGlazedTerracotta(state_unique_falcon) => {
                Some(9422i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownGlazedTerracotta(state_unique_falcon) => {
                Some(9426i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenGlazedTerracotta(state_unique_falcon) => {
                Some(9430i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedGlazedTerracotta(state_unique_falcon) => {
                Some(9434i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackGlazedTerracotta(state_unique_falcon) => {
                Some(9438i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteConcrete => Some(9442i32),
            Blocks::OrangeConcrete => Some(9443i32),
            Blocks::MagentaConcrete => Some(9444i32),
            Blocks::LightBlueConcrete => Some(9445i32),
            Blocks::YellowConcrete => Some(9446i32),
            Blocks::LimeConcrete => Some(9447i32),
            Blocks::PinkConcrete => Some(9448i32),
            Blocks::GrayConcrete => Some(9449i32),
            Blocks::LightGrayConcrete => Some(9450i32),
            Blocks::CyanConcrete => Some(9451i32),
            Blocks::PurpleConcrete => Some(9452i32),
            Blocks::BlueConcrete => Some(9453i32),
            Blocks::BrownConcrete => Some(9454i32),
            Blocks::GreenConcrete => Some(9455i32),
            Blocks::RedConcrete => Some(9456i32),
            Blocks::BlackConcrete => Some(9457i32),
            Blocks::WhiteConcretePowder => Some(9458i32),
            Blocks::OrangeConcretePowder => Some(9459i32),
            Blocks::MagentaConcretePowder => Some(9460i32),
            Blocks::LightBlueConcretePowder => Some(9461i32),
            Blocks::YellowConcretePowder => Some(9462i32),
            Blocks::LimeConcretePowder => Some(9463i32),
            Blocks::PinkConcretePowder => Some(9464i32),
            Blocks::GrayConcretePowder => Some(9465i32),
            Blocks::LightGrayConcretePowder => Some(9466i32),
            Blocks::CyanConcretePowder => Some(9467i32),
            Blocks::PurpleConcretePowder => Some(9468i32),
            Blocks::BlueConcretePowder => Some(9469i32),
            Blocks::BrownConcretePowder => Some(9470i32),
            Blocks::GreenConcretePowder => Some(9471i32),
            Blocks::RedConcretePowder => Some(9472i32),
            Blocks::BlackConcretePowder => Some(9473i32),
            Blocks::Kelp(state_unique_falcon) => Some(9474i32 + state_unique_falcon.age),
            Blocks::KelpPlant => Some(9500i32),
            Blocks::DriedKelpBlock => Some(9501i32),
            Blocks::TurtleEgg(state_unique_falcon) => {
                Some(9502i32 + state_unique_falcon.hatch + 3 * state_unique_falcon.eggs)
            }
            Blocks::DeadTubeCoralBlock => Some(9514i32),
            Blocks::DeadBrainCoralBlock => Some(9515i32),
            Blocks::DeadBubbleCoralBlock => Some(9516i32),
            Blocks::DeadFireCoralBlock => Some(9517i32),
            Blocks::DeadHornCoralBlock => Some(9518i32),
            Blocks::TubeCoralBlock => Some(9519i32),
            Blocks::BrainCoralBlock => Some(9520i32),
            Blocks::BubbleCoralBlock => Some(9521i32),
            Blocks::FireCoralBlock => Some(9522i32),
            Blocks::HornCoralBlock => Some(9523i32),
            Blocks::DeadTubeCoral(state_unique_falcon) => {
                Some(9524i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoral(state_unique_falcon) => {
                Some(9526i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoral(state_unique_falcon) => {
                Some(9528i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoral(state_unique_falcon) => {
                Some(9530i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoral(state_unique_falcon) => {
                Some(9532i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoral(state_unique_falcon) => {
                Some(9534i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoral(state_unique_falcon) => {
                Some(9536i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoral(state_unique_falcon) => {
                Some(9538i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoral(state_unique_falcon) => {
                Some(9540i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoral(state_unique_falcon) => {
                Some(9542i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralFan(state_unique_falcon) => {
                Some(9544i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoralFan(state_unique_falcon) => {
                Some(9546i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoralFan(state_unique_falcon) => {
                Some(9548i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoralFan(state_unique_falcon) => {
                Some(9550i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoralFan(state_unique_falcon) => {
                Some(9552i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoralFan(state_unique_falcon) => {
                Some(9554i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoralFan(state_unique_falcon) => {
                Some(9556i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoralFan(state_unique_falcon) => {
                Some(9558i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoralFan(state_unique_falcon) => {
                Some(9560i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoralFan(state_unique_falcon) => {
                Some(9562i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralWallFan(state_unique_falcon) => Some(
                9564i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBrainCoralWallFan(state_unique_falcon) => Some(
                9572i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBubbleCoralWallFan(state_unique_falcon) => Some(
                9580i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadFireCoralWallFan(state_unique_falcon) => Some(
                9588i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadHornCoralWallFan(state_unique_falcon) => Some(
                9596i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TubeCoralWallFan(state_unique_falcon) => Some(
                9604i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrainCoralWallFan(state_unique_falcon) => Some(
                9612i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BubbleCoralWallFan(state_unique_falcon) => Some(
                9620i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::FireCoralWallFan(state_unique_falcon) => Some(
                9628i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HornCoralWallFan(state_unique_falcon) => Some(
                9636i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SeaPickle(state_unique_falcon) => Some(
                9644i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.pickles,
            ),
            Blocks::BlueIce => Some(9652i32),
            Blocks::Conduit(state_unique_falcon) => {
                Some(9653i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BambooSapling => Some(9655i32),
            Blocks::Bamboo(state_unique_falcon) => Some(
                9656i32
                    + state_unique_falcon.stage
                    + 2 * (state_unique_falcon.leaves as i32)
                    + 6 * state_unique_falcon.age,
            ),
            Blocks::PottedBamboo => Some(9668i32),
            Blocks::VoidAir => Some(9669i32),
            Blocks::CaveAir => Some(9670i32),
            Blocks::BubbleColumn(state_unique_falcon) => {
                Some(9671i32 + (!state_unique_falcon.drag() as i32))
            }
            Blocks::PolishedGraniteStairs(state_unique_falcon) => Some(
                9673i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothRedSandstoneStairs(state_unique_falcon) => Some(
                9753i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MossyStoneBrickStairs(state_unique_falcon) => Some(
                9833i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedDioriteStairs(state_unique_falcon) => Some(
                9913i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MossyCobblestoneStairs(state_unique_falcon) => Some(
                9993i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBrickStairs(state_unique_falcon) => Some(
                10073i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneStairs(state_unique_falcon) => Some(
                10153i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothSandstoneStairs(state_unique_falcon) => Some(
                10233i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothQuartzStairs(state_unique_falcon) => Some(
                10313i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GraniteStairs(state_unique_falcon) => Some(
                10393i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AndesiteStairs(state_unique_falcon) => Some(
                10473i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedNetherBrickStairs(state_unique_falcon) => Some(
                10553i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedAndesiteStairs(state_unique_falcon) => Some(
                10633i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DioriteStairs(state_unique_falcon) => Some(
                10713i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedGraniteSlab(state_unique_falcon) => Some(
                10793i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothRedSandstoneSlab(state_unique_falcon) => Some(
                10799i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::MossyStoneBrickSlab(state_unique_falcon) => Some(
                10805i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedDioriteSlab(state_unique_falcon) => Some(
                10811i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::MossyCobblestoneSlab(state_unique_falcon) => Some(
                10817i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::EndStoneBrickSlab(state_unique_falcon) => Some(
                10823i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothSandstoneSlab(state_unique_falcon) => Some(
                10829i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothQuartzSlab(state_unique_falcon) => Some(
                10835i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::GraniteSlab(state_unique_falcon) => Some(
                10841i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AndesiteSlab(state_unique_falcon) => Some(
                10847i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedNetherBrickSlab(state_unique_falcon) => Some(
                10853i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedAndesiteSlab(state_unique_falcon) => Some(
                10859i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DioriteSlab(state_unique_falcon) => Some(
                10865i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickWall(state_unique_falcon) => Some(
                10871i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::PrismarineWall(state_unique_falcon) => Some(
                11195i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::RedSandstoneWall(state_unique_falcon) => Some(
                11519i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::MossyStoneBrickWall(state_unique_falcon) => Some(
                11843i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::GraniteWall(state_unique_falcon) => Some(
                12167i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::StoneBrickWall(state_unique_falcon) => Some(
                12491i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::NetherBrickWall(state_unique_falcon) => Some(
                12815i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::AndesiteWall(state_unique_falcon) => Some(
                13139i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::RedNetherBrickWall(state_unique_falcon) => Some(
                13463i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::SandstoneWall(state_unique_falcon) => Some(
                13787i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::EndStoneBrickWall(state_unique_falcon) => Some(
                14111i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::DioriteWall(state_unique_falcon) => Some(
                14435i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::Scaffolding(state_unique_falcon) => Some(
                14759i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.distance
                    + 16 * (!state_unique_falcon.bottom() as i32),
            ),
            Blocks::Loom(state_unique_falcon) => {
                Some(14791i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Barrel(state_unique_falcon) => Some(
                14795i32
                    + (!state_unique_falcon.open() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Smoker(state_unique_falcon) => Some(
                14807i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlastFurnace(state_unique_falcon) => Some(
                14815i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CartographyTable => Some(14823i32),
            Blocks::FletchingTable => Some(14824i32),
            Blocks::Grindstone(state_unique_falcon) => Some(
                14825i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (state_unique_falcon.face as i32),
            ),
            Blocks::Lectern(state_unique_falcon) => Some(
                14837i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.has_book() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmithingTable => Some(14853i32),
            Blocks::Stonecutter(state_unique_falcon) => {
                Some(14854i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Bell(state_unique_falcon) => Some(
                14858i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.attachment as i32),
            ),
            Blocks::Lantern(state_unique_falcon) => Some(
                14890i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.hanging() as i32),
            ),
            Blocks::SoulLantern(state_unique_falcon) => Some(
                14894i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.hanging() as i32),
            ),
            Blocks::Campfire(state_unique_falcon) => Some(
                14898i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.signal_fire() as i32)
                    + 4 * (!state_unique_falcon.lit() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SoulCampfire(state_unique_falcon) => Some(
                14930i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.signal_fire() as i32)
                    + 4 * (!state_unique_falcon.lit() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SweetBerryBush(state_unique_falcon) => Some(14962i32 + state_unique_falcon.age),
            Blocks::WarpedStem(state_unique_falcon) => {
                Some(14966i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedWarpedStem(state_unique_falcon) => {
                Some(14969i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WarpedHyphae(state_unique_falcon) => {
                Some(14972i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedWarpedHyphae(state_unique_falcon) => {
                Some(14975i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WarpedNylium => Some(14978i32),
            Blocks::WarpedFungus => Some(14979i32),
            Blocks::WarpedWartBlock => Some(14980i32),
            Blocks::WarpedRoots => Some(14981i32),
            Blocks::NetherSprouts => Some(14982i32),
            Blocks::CrimsonStem(state_unique_falcon) => {
                Some(14983i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedCrimsonStem(state_unique_falcon) => {
                Some(14986i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CrimsonHyphae(state_unique_falcon) => {
                Some(14989i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedCrimsonHyphae(state_unique_falcon) => {
                Some(14992i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CrimsonNylium => Some(14995i32),
            Blocks::CrimsonFungus => Some(14996i32),
            Blocks::Shroomlight => Some(14997i32),
            Blocks::WeepingVines(state_unique_falcon) => Some(14998i32 + state_unique_falcon.age),
            Blocks::WeepingVinesPlant => Some(15024i32),
            Blocks::TwistingVines(state_unique_falcon) => Some(15025i32 + state_unique_falcon.age),
            Blocks::TwistingVinesPlant => Some(15051i32),
            Blocks::CrimsonRoots => Some(15052i32),
            Blocks::CrimsonPlanks => Some(15053i32),
            Blocks::WarpedPlanks => Some(15054i32),
            Blocks::CrimsonSlab(state_unique_falcon) => Some(
                15055i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::WarpedSlab(state_unique_falcon) => Some(
                15061i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CrimsonPressurePlate(state_unique_falcon) => {
                Some(15067i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::WarpedPressurePlate(state_unique_falcon) => {
                Some(15069i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::CrimsonFence(state_unique_falcon) => Some(
                15071i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::WarpedFence(state_unique_falcon) => Some(
                15103i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::CrimsonTrapdoor(state_unique_falcon) => Some(
                15135i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedTrapdoor(state_unique_falcon) => Some(
                15199i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonFenceGate(state_unique_falcon) => Some(
                15263i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedFenceGate(state_unique_falcon) => Some(
                15295i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonStairs(state_unique_falcon) => Some(
                15327i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedStairs(state_unique_falcon) => Some(
                15407i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonButton(state_unique_falcon) => Some(
                15487i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::WarpedButton(state_unique_falcon) => Some(
                15511i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::CrimsonDoor(state_unique_falcon) => Some(
                15535i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedDoor(state_unique_falcon) => Some(
                15599i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonSign(state_unique_falcon) => Some(
                15663i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::WarpedSign(state_unique_falcon) => Some(
                15695i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::CrimsonWallSign(state_unique_falcon) => Some(
                15727i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedWallSign(state_unique_falcon) => Some(
                15735i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StructureBlock(state_unique_falcon) => {
                Some(15743i32 + (state_unique_falcon.mode as i32))
            }
            Blocks::Jigsaw(state_unique_falcon) => {
                Some(15747i32 + (state_unique_falcon.orientation as i32))
            }
            Blocks::Composter(state_unique_falcon) => Some(15759i32 + state_unique_falcon.level),
            Blocks::Target(state_unique_falcon) => Some(15768i32 + state_unique_falcon.power),
            Blocks::BeeNest(state_unique_falcon) => Some(
                15784i32
                    + state_unique_falcon.honey_level
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Beehive(state_unique_falcon) => Some(
                15808i32
                    + state_unique_falcon.honey_level
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HoneyBlock => Some(15832i32),
            Blocks::HoneycombBlock => Some(15833i32),
            Blocks::NetheriteBlock => Some(15834i32),
            Blocks::AncientDebris => Some(15835i32),
            Blocks::CryingObsidian => Some(15836i32),
            Blocks::RespawnAnchor(state_unique_falcon) => {
                Some(15837i32 + state_unique_falcon.charges)
            }
            Blocks::PottedCrimsonFungus => Some(15842i32),
            Blocks::PottedWarpedFungus => Some(15843i32),
            Blocks::PottedCrimsonRoots => Some(15844i32),
            Blocks::PottedWarpedRoots => Some(15845i32),
            Blocks::Lodestone => Some(15846i32),
            Blocks::Blackstone => Some(15847i32),
            Blocks::BlackstoneStairs(state_unique_falcon) => Some(
                15848i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlackstoneWall(state_unique_falcon) => Some(
                15928i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::BlackstoneSlab(state_unique_falcon) => Some(
                16252i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedBlackstone => Some(16258i32),
            Blocks::PolishedBlackstoneBricks => Some(16259i32),
            Blocks::CrackedPolishedBlackstoneBricks => Some(16260i32),
            Blocks::ChiseledPolishedBlackstone => Some(16261i32),
            Blocks::PolishedBlackstoneBrickSlab(state_unique_falcon) => Some(
                16262i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedBlackstoneBrickStairs(state_unique_falcon) => Some(
                16268i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedBlackstoneBrickWall(state_unique_falcon) => Some(
                16348i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::GildedBlackstone => Some(16672i32),
            Blocks::PolishedBlackstoneStairs(state_unique_falcon) => Some(
                16673i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedBlackstoneSlab(state_unique_falcon) => Some(
                16753i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedBlackstonePressurePlate(state_unique_falcon) => {
                Some(16759i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::PolishedBlackstoneButton(state_unique_falcon) => Some(
                16761i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::PolishedBlackstoneWall(state_unique_falcon) => Some(
                16785i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::ChiseledNetherBricks => Some(17109i32),
            Blocks::CrackedNetherBricks => Some(17110i32),
            Blocks::QuartzBricks => Some(17111i32),
            _ => None,
        }
    }
    pub fn get_global_id_2567(&self) -> Option<i32> {
        match self {
            Blocks::Air => Some(0i32),
            Blocks::Stone => Some(1i32),
            Blocks::Granite => Some(2i32),
            Blocks::PolishedGranite => Some(3i32),
            Blocks::Diorite => Some(4i32),
            Blocks::PolishedDiorite => Some(5i32),
            Blocks::Andesite => Some(6i32),
            Blocks::PolishedAndesite => Some(7i32),
            Blocks::GrassBlock(state_unique_falcon) => {
                Some(8i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Dirt => Some(10i32),
            Blocks::CoarseDirt => Some(11i32),
            Blocks::Podzol(state_unique_falcon) => {
                Some(12i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Cobblestone => Some(14i32),
            Blocks::OakPlanks => Some(15i32),
            Blocks::SprucePlanks => Some(16i32),
            Blocks::BirchPlanks => Some(17i32),
            Blocks::JunglePlanks => Some(18i32),
            Blocks::AcaciaPlanks => Some(19i32),
            Blocks::DarkOakPlanks => Some(20i32),
            Blocks::OakSapling(state_unique_falcon) => Some(21i32 + state_unique_falcon.stage),
            Blocks::SpruceSapling(state_unique_falcon) => Some(23i32 + state_unique_falcon.stage),
            Blocks::BirchSapling(state_unique_falcon) => Some(25i32 + state_unique_falcon.stage),
            Blocks::JungleSapling(state_unique_falcon) => Some(27i32 + state_unique_falcon.stage),
            Blocks::AcaciaSapling(state_unique_falcon) => Some(29i32 + state_unique_falcon.stage),
            Blocks::DarkOakSapling(state_unique_falcon) => Some(31i32 + state_unique_falcon.stage),
            Blocks::Bedrock => Some(33i32),
            Blocks::Water(state_unique_falcon) => Some(34i32 + state_unique_falcon.level),
            Blocks::Lava(state_unique_falcon) => Some(50i32 + state_unique_falcon.level),
            Blocks::Sand => Some(66i32),
            Blocks::RedSand => Some(67i32),
            Blocks::Gravel => Some(68i32),
            Blocks::GoldOre => Some(69i32),
            Blocks::IronOre => Some(70i32),
            Blocks::CoalOre => Some(71i32),
            Blocks::NetherGoldOre => Some(72i32),
            Blocks::OakLog(state_unique_falcon) => Some(73i32 + (state_unique_falcon.axis as i32)),
            Blocks::SpruceLog(state_unique_falcon) => {
                Some(76i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchLog(state_unique_falcon) => {
                Some(79i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleLog(state_unique_falcon) => {
                Some(82i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaLog(state_unique_falcon) => {
                Some(85i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakLog(state_unique_falcon) => {
                Some(88i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceLog(state_unique_falcon) => {
                Some(91i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchLog(state_unique_falcon) => {
                Some(94i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleLog(state_unique_falcon) => {
                Some(97i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaLog(state_unique_falcon) => {
                Some(100i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakLog(state_unique_falcon) => {
                Some(103i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakLog(state_unique_falcon) => {
                Some(106i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakWood(state_unique_falcon) => {
                Some(109i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SpruceWood(state_unique_falcon) => {
                Some(112i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchWood(state_unique_falcon) => {
                Some(115i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleWood(state_unique_falcon) => {
                Some(118i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaWood(state_unique_falcon) => {
                Some(121i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakWood(state_unique_falcon) => {
                Some(124i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakWood(state_unique_falcon) => {
                Some(127i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceWood(state_unique_falcon) => {
                Some(130i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchWood(state_unique_falcon) => {
                Some(133i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleWood(state_unique_falcon) => {
                Some(136i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaWood(state_unique_falcon) => {
                Some(139i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakWood(state_unique_falcon) => {
                Some(142i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakLeaves(state_unique_falcon) => Some(
                145i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::SpruceLeaves(state_unique_falcon) => Some(
                159i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::BirchLeaves(state_unique_falcon) => Some(
                173i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::JungleLeaves(state_unique_falcon) => Some(
                187i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::AcaciaLeaves(state_unique_falcon) => Some(
                201i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::DarkOakLeaves(state_unique_falcon) => Some(
                215i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::Sponge => Some(229i32),
            Blocks::WetSponge => Some(230i32),
            Blocks::Glass => Some(231i32),
            Blocks::LapisOre => Some(232i32),
            Blocks::LapisBlock => Some(233i32),
            Blocks::Dispenser(state_unique_falcon) => Some(
                234i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Sandstone => Some(246i32),
            Blocks::ChiseledSandstone => Some(247i32),
            Blocks::CutSandstone => Some(248i32),
            Blocks::NoteBlock(state_unique_falcon) => Some(
                249i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * state_unique_falcon.note
                    + 50 * (state_unique_falcon.instrument as i32),
            ),
            Blocks::WhiteBed(state_unique_falcon) => Some(
                1049i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OrangeBed(state_unique_falcon) => Some(
                1065i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MagentaBed(state_unique_falcon) => Some(
                1081i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightBlueBed(state_unique_falcon) => Some(
                1097i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::YellowBed(state_unique_falcon) => Some(
                1113i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LimeBed(state_unique_falcon) => Some(
                1129i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PinkBed(state_unique_falcon) => Some(
                1145i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GrayBed(state_unique_falcon) => Some(
                1161i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightGrayBed(state_unique_falcon) => Some(
                1177i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CyanBed(state_unique_falcon) => Some(
                1193i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PurpleBed(state_unique_falcon) => Some(
                1209i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlueBed(state_unique_falcon) => Some(
                1225i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrownBed(state_unique_falcon) => Some(
                1241i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GreenBed(state_unique_falcon) => Some(
                1257i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedBed(state_unique_falcon) => Some(
                1273i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlackBed(state_unique_falcon) => Some(
                1289i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PoweredRail(state_unique_falcon) => Some(
                1305i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::DetectorRail(state_unique_falcon) => Some(
                1317i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::StickyPiston(state_unique_falcon) => Some(
                1329i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::Cobweb => Some(1341i32),
            Blocks::Grass => Some(1342i32),
            Blocks::Fern => Some(1343i32),
            Blocks::DeadBush => Some(1344i32),
            Blocks::Seagrass => Some(1345i32),
            Blocks::TallSeagrass(state_unique_falcon) => {
                Some(1346i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Piston(state_unique_falcon) => Some(
                1348i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::PistonHead(state_unique_falcon) => Some(
                1360i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (!state_unique_falcon.short() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteWool => Some(1384i32),
            Blocks::OrangeWool => Some(1385i32),
            Blocks::MagentaWool => Some(1386i32),
            Blocks::LightBlueWool => Some(1387i32),
            Blocks::YellowWool => Some(1388i32),
            Blocks::LimeWool => Some(1389i32),
            Blocks::PinkWool => Some(1390i32),
            Blocks::GrayWool => Some(1391i32),
            Blocks::LightGrayWool => Some(1392i32),
            Blocks::CyanWool => Some(1393i32),
            Blocks::PurpleWool => Some(1394i32),
            Blocks::BlueWool => Some(1395i32),
            Blocks::BrownWool => Some(1396i32),
            Blocks::GreenWool => Some(1397i32),
            Blocks::RedWool => Some(1398i32),
            Blocks::BlackWool => Some(1399i32),
            Blocks::MovingPiston(state_unique_falcon) => Some(
                1400i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Dandelion => Some(1412i32),
            Blocks::Poppy => Some(1413i32),
            Blocks::BlueOrchid => Some(1414i32),
            Blocks::Allium => Some(1415i32),
            Blocks::AzureBluet => Some(1416i32),
            Blocks::RedTulip => Some(1417i32),
            Blocks::OrangeTulip => Some(1418i32),
            Blocks::WhiteTulip => Some(1419i32),
            Blocks::PinkTulip => Some(1420i32),
            Blocks::OxeyeDaisy => Some(1421i32),
            Blocks::Cornflower => Some(1422i32),
            Blocks::WitherRose => Some(1423i32),
            Blocks::LilyOfTheValley => Some(1424i32),
            Blocks::BrownMushroom => Some(1425i32),
            Blocks::RedMushroom => Some(1426i32),
            Blocks::GoldBlock => Some(1427i32),
            Blocks::IronBlock => Some(1428i32),
            Blocks::Bricks => Some(1429i32),
            Blocks::Tnt(state_unique_falcon) => {
                Some(1430i32 + (!state_unique_falcon.unstable() as i32))
            }
            Blocks::Bookshelf => Some(1432i32),
            Blocks::MossyCobblestone => Some(1433i32),
            Blocks::Obsidian => Some(1434i32),
            Blocks::Torch => Some(1435i32),
            Blocks::WallTorch(state_unique_falcon) => {
                Some(1436i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Fire(state_unique_falcon) => Some(
                1440i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * state_unique_falcon.age,
            ),
            Blocks::SoulFire => Some(1952i32),
            Blocks::Spawner => Some(1953i32),
            Blocks::OakStairs(state_unique_falcon) => Some(
                1954i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Chest(state_unique_falcon) => Some(
                2034i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedstoneWire(state_unique_falcon) => Some(
                2058i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (state_unique_falcon.south as i32)
                    + 9 * state_unique_falcon.power
                    + 144 * (state_unique_falcon.north as i32)
                    + 432 * (state_unique_falcon.east as i32),
            ),
            Blocks::DiamondOre => Some(3354i32),
            Blocks::DiamondBlock => Some(3355i32),
            Blocks::CraftingTable => Some(3356i32),
            Blocks::Wheat(state_unique_falcon) => Some(3357i32 + state_unique_falcon.age),
            Blocks::Farmland(state_unique_falcon) => Some(3365i32 + state_unique_falcon.moisture),
            Blocks::Furnace(state_unique_falcon) => Some(
                3373i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSign(state_unique_falcon) => Some(
                3381i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::SpruceSign(state_unique_falcon) => Some(
                3413i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::BirchSign(state_unique_falcon) => Some(
                3445i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::AcaciaSign(state_unique_falcon) => Some(
                3477i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::JungleSign(state_unique_falcon) => Some(
                3509i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::DarkOakSign(state_unique_falcon) => Some(
                3541i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::OakDoor(state_unique_falcon) => Some(
                3573i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Ladder(state_unique_falcon) => Some(
                3637i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Rail(state_unique_falcon) => Some(3645i32 + (state_unique_falcon.shape as i32)),
            Blocks::CobblestoneStairs(state_unique_falcon) => Some(
                3655i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakWallSign(state_unique_falcon) => Some(
                3735i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceWallSign(state_unique_falcon) => Some(
                3743i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchWallSign(state_unique_falcon) => Some(
                3751i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaWallSign(state_unique_falcon) => Some(
                3759i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleWallSign(state_unique_falcon) => Some(
                3767i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakWallSign(state_unique_falcon) => Some(
                3775i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Lever(state_unique_falcon) => Some(
                3783i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::StonePressurePlate(state_unique_falcon) => {
                Some(3807i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::IronDoor(state_unique_falcon) => Some(
                3809i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakPressurePlate(state_unique_falcon) => {
                Some(3873i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::SprucePressurePlate(state_unique_falcon) => {
                Some(3875i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::BirchPressurePlate(state_unique_falcon) => {
                Some(3877i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::JunglePressurePlate(state_unique_falcon) => {
                Some(3879i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::AcaciaPressurePlate(state_unique_falcon) => {
                Some(3881i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::DarkOakPressurePlate(state_unique_falcon) => {
                Some(3883i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::RedstoneOre(state_unique_falcon) => {
                Some(3885i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneTorch(state_unique_falcon) => {
                Some(3887i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneWallTorch(state_unique_falcon) => Some(
                3889i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneButton(state_unique_falcon) => Some(
                3897i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::Snow(state_unique_falcon) => Some(3921i32 + state_unique_falcon.layers),
            Blocks::Ice => Some(3929i32),
            Blocks::SnowBlock => Some(3930i32),
            Blocks::Cactus(state_unique_falcon) => Some(3931i32 + state_unique_falcon.age),
            Blocks::Clay => Some(3947i32),
            Blocks::SugarCane(state_unique_falcon) => Some(3948i32 + state_unique_falcon.age),
            Blocks::Jukebox(state_unique_falcon) => {
                Some(3964i32 + (!state_unique_falcon.has_record() as i32))
            }
            Blocks::OakFence(state_unique_falcon) => Some(
                3966i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Pumpkin => Some(3998i32),
            Blocks::Netherrack => Some(3999i32),
            Blocks::SoulSand => Some(4000i32),
            Blocks::SoulSoil => Some(4001i32),
            Blocks::Basalt(state_unique_falcon) => {
                Some(4002i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::PolishedBasalt(state_unique_falcon) => {
                Some(4005i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SoulTorch => Some(4008i32),
            Blocks::SoulWallTorch(state_unique_falcon) => {
                Some(4009i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Glowstone => Some(4013i32),
            Blocks::NetherPortal(state_unique_falcon) => {
                Some(4014i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CarvedPumpkin(state_unique_falcon) => {
                Some(4016i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::JackOLantern(state_unique_falcon) => {
                Some(4020i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Cake(state_unique_falcon) => Some(4024i32 + state_unique_falcon.bites),
            Blocks::Repeater(state_unique_falcon) => Some(
                4031i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.locked() as i32)
                    + 4 * (state_unique_falcon.facing as i32)
                    + 16 * state_unique_falcon.delay,
            ),
            Blocks::WhiteStainedGlass => Some(4095i32),
            Blocks::OrangeStainedGlass => Some(4096i32),
            Blocks::MagentaStainedGlass => Some(4097i32),
            Blocks::LightBlueStainedGlass => Some(4098i32),
            Blocks::YellowStainedGlass => Some(4099i32),
            Blocks::LimeStainedGlass => Some(4100i32),
            Blocks::PinkStainedGlass => Some(4101i32),
            Blocks::GrayStainedGlass => Some(4102i32),
            Blocks::LightGrayStainedGlass => Some(4103i32),
            Blocks::CyanStainedGlass => Some(4104i32),
            Blocks::PurpleStainedGlass => Some(4105i32),
            Blocks::BlueStainedGlass => Some(4106i32),
            Blocks::BrownStainedGlass => Some(4107i32),
            Blocks::GreenStainedGlass => Some(4108i32),
            Blocks::RedStainedGlass => Some(4109i32),
            Blocks::BlackStainedGlass => Some(4110i32),
            Blocks::OakTrapdoor(state_unique_falcon) => Some(
                4111i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceTrapdoor(state_unique_falcon) => Some(
                4175i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchTrapdoor(state_unique_falcon) => Some(
                4239i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleTrapdoor(state_unique_falcon) => Some(
                4303i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaTrapdoor(state_unique_falcon) => Some(
                4367i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakTrapdoor(state_unique_falcon) => Some(
                4431i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBricks => Some(4495i32),
            Blocks::MossyStoneBricks => Some(4496i32),
            Blocks::CrackedStoneBricks => Some(4497i32),
            Blocks::ChiseledStoneBricks => Some(4498i32),
            Blocks::InfestedStone => Some(4499i32),
            Blocks::InfestedCobblestone => Some(4500i32),
            Blocks::InfestedStoneBricks => Some(4501i32),
            Blocks::InfestedMossyStoneBricks => Some(4502i32),
            Blocks::InfestedCrackedStoneBricks => Some(4503i32),
            Blocks::InfestedChiseledStoneBricks => Some(4504i32),
            Blocks::BrownMushroomBlock(state_unique_falcon) => Some(
                4505i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::RedMushroomBlock(state_unique_falcon) => Some(
                4569i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::MushroomStem(state_unique_falcon) => Some(
                4633i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::IronBars(state_unique_falcon) => Some(
                4697i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Chain(state_unique_falcon) => {
                Some(4729i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::GlassPane(state_unique_falcon) => Some(
                4731i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Melon => Some(4763i32),
            Blocks::AttachedPumpkinStem(state_unique_falcon) => {
                Some(4764i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::AttachedMelonStem(state_unique_falcon) => {
                Some(4768i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PumpkinStem(state_unique_falcon) => Some(4772i32 + state_unique_falcon.age),
            Blocks::MelonStem(state_unique_falcon) => Some(4780i32 + state_unique_falcon.age),
            Blocks::Vine(state_unique_falcon) => Some(
                4788i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OakFenceGate(state_unique_falcon) => Some(
                4820i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrickStairs(state_unique_falcon) => Some(
                4852i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBrickStairs(state_unique_falcon) => Some(
                4932i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Mycelium(state_unique_falcon) => {
                Some(5012i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::LilyPad => Some(5014i32),
            Blocks::NetherBricks => Some(5015i32),
            Blocks::NetherBrickFence(state_unique_falcon) => Some(
                5016i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::NetherBrickStairs(state_unique_falcon) => Some(
                5048i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::NetherWart(state_unique_falcon) => Some(5128i32 + state_unique_falcon.age),
            Blocks::EnchantingTable => Some(5132i32),
            Blocks::BrewingStand(state_unique_falcon) => Some(
                5133i32
                    + (!state_unique_falcon.has_bottle_2() as i32)
                    + 2 * (!state_unique_falcon.has_bottle_1() as i32)
                    + 4 * (!state_unique_falcon.has_bottle_0() as i32),
            ),
            Blocks::Cauldron => Some(5141i32),
            Blocks::WaterCauldron(state_unique_falcon) => Some(5142i32 + state_unique_falcon.level),
            Blocks::EndPortal => Some(5145i32),
            Blocks::EndPortalFrame(state_unique_falcon) => Some(
                5146i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (!state_unique_falcon.eye() as i32),
            ),
            Blocks::EndStone => Some(5154i32),
            Blocks::DragonEgg => Some(5155i32),
            Blocks::RedstoneLamp(state_unique_falcon) => {
                Some(5156i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::Cocoa(state_unique_falcon) => {
                Some(5158i32 + (state_unique_falcon.facing as i32) + 4 * state_unique_falcon.age)
            }
            Blocks::SandstoneStairs(state_unique_falcon) => Some(
                5170i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EmeraldOre => Some(5250i32),
            Blocks::EnderChest(state_unique_falcon) => Some(
                5251i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TripwireHook(state_unique_falcon) => Some(
                5259i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::Tripwire(state_unique_falcon) => Some(
                5275i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.south() as i32)
                    + 4 * (!state_unique_falcon.powered() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.disarmed() as i32)
                    + 64 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::EmeraldBlock => Some(5403i32),
            Blocks::SpruceStairs(state_unique_falcon) => Some(
                5404i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchStairs(state_unique_falcon) => Some(
                5484i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleStairs(state_unique_falcon) => Some(
                5564i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CommandBlock(state_unique_falcon) => Some(
                5644i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::Beacon => Some(5656i32),
            Blocks::CobblestoneWall(state_unique_falcon) => Some(
                5657i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::MossyCobblestoneWall(state_unique_falcon) => Some(
                5981i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::FlowerPot => Some(6305i32),
            Blocks::PottedOakSapling => Some(6306i32),
            Blocks::PottedSpruceSapling => Some(6307i32),
            Blocks::PottedBirchSapling => Some(6308i32),
            Blocks::PottedJungleSapling => Some(6309i32),
            Blocks::PottedAcaciaSapling => Some(6310i32),
            Blocks::PottedDarkOakSapling => Some(6311i32),
            Blocks::PottedFern => Some(6312i32),
            Blocks::PottedDandelion => Some(6313i32),
            Blocks::PottedPoppy => Some(6314i32),
            Blocks::PottedBlueOrchid => Some(6315i32),
            Blocks::PottedAllium => Some(6316i32),
            Blocks::PottedAzureBluet => Some(6317i32),
            Blocks::PottedRedTulip => Some(6318i32),
            Blocks::PottedOrangeTulip => Some(6319i32),
            Blocks::PottedWhiteTulip => Some(6320i32),
            Blocks::PottedPinkTulip => Some(6321i32),
            Blocks::PottedOxeyeDaisy => Some(6322i32),
            Blocks::PottedCornflower => Some(6323i32),
            Blocks::PottedLilyOfTheValley => Some(6324i32),
            Blocks::PottedWitherRose => Some(6325i32),
            Blocks::PottedRedMushroom => Some(6326i32),
            Blocks::PottedBrownMushroom => Some(6327i32),
            Blocks::PottedDeadBush => Some(6328i32),
            Blocks::PottedCactus => Some(6329i32),
            Blocks::Carrots(state_unique_falcon) => Some(6330i32 + state_unique_falcon.age),
            Blocks::Potatoes(state_unique_falcon) => Some(6338i32 + state_unique_falcon.age),
            Blocks::OakButton(state_unique_falcon) => Some(
                6346i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SpruceButton(state_unique_falcon) => Some(
                6370i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::BirchButton(state_unique_falcon) => Some(
                6394i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::JungleButton(state_unique_falcon) => Some(
                6418i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::AcaciaButton(state_unique_falcon) => Some(
                6442i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::DarkOakButton(state_unique_falcon) => Some(
                6466i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SkeletonSkull(state_unique_falcon) => {
                Some(6490i32 + state_unique_falcon.rotation)
            }
            Blocks::SkeletonWallSkull(state_unique_falcon) => {
                Some(6506i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WitherSkeletonSkull(state_unique_falcon) => {
                Some(6510i32 + state_unique_falcon.rotation)
            }
            Blocks::WitherSkeletonWallSkull(state_unique_falcon) => {
                Some(6526i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ZombieHead(state_unique_falcon) => Some(6530i32 + state_unique_falcon.rotation),
            Blocks::ZombieWallHead(state_unique_falcon) => {
                Some(6546i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PlayerHead(state_unique_falcon) => Some(6550i32 + state_unique_falcon.rotation),
            Blocks::PlayerWallHead(state_unique_falcon) => {
                Some(6566i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CreeperHead(state_unique_falcon) => {
                Some(6570i32 + state_unique_falcon.rotation)
            }
            Blocks::CreeperWallHead(state_unique_falcon) => {
                Some(6586i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DragonHead(state_unique_falcon) => Some(6590i32 + state_unique_falcon.rotation),
            Blocks::DragonWallHead(state_unique_falcon) => {
                Some(6606i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Anvil(state_unique_falcon) => {
                Some(6610i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChippedAnvil(state_unique_falcon) => {
                Some(6614i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DamagedAnvil(state_unique_falcon) => {
                Some(6618i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::TrappedChest(state_unique_falcon) => Some(
                6622i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightWeightedPressurePlate(state_unique_falcon) => {
                Some(6646i32 + state_unique_falcon.power)
            }
            Blocks::HeavyWeightedPressurePlate(state_unique_falcon) => {
                Some(6662i32 + state_unique_falcon.power)
            }
            Blocks::Comparator(state_unique_falcon) => Some(
                6678i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.mode as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DaylightDetector(state_unique_falcon) => Some(
                6694i32 + state_unique_falcon.power + 16 * (!state_unique_falcon.inverted() as i32),
            ),
            Blocks::RedstoneBlock => Some(6726i32),
            Blocks::NetherQuartzOre => Some(6727i32),
            Blocks::Hopper(state_unique_falcon) => Some(
                6728i32
                    + (state_unique_falcon.facing as i32)
                    + 5 * (!state_unique_falcon.enabled() as i32),
            ),
            Blocks::QuartzBlock => Some(6738i32),
            Blocks::ChiseledQuartzBlock => Some(6739i32),
            Blocks::QuartzPillar(state_unique_falcon) => {
                Some(6740i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::QuartzStairs(state_unique_falcon) => Some(
                6743i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ActivatorRail(state_unique_falcon) => Some(
                6823i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::Dropper(state_unique_falcon) => Some(
                6835i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteTerracotta => Some(6847i32),
            Blocks::OrangeTerracotta => Some(6848i32),
            Blocks::MagentaTerracotta => Some(6849i32),
            Blocks::LightBlueTerracotta => Some(6850i32),
            Blocks::YellowTerracotta => Some(6851i32),
            Blocks::LimeTerracotta => Some(6852i32),
            Blocks::PinkTerracotta => Some(6853i32),
            Blocks::GrayTerracotta => Some(6854i32),
            Blocks::LightGrayTerracotta => Some(6855i32),
            Blocks::CyanTerracotta => Some(6856i32),
            Blocks::PurpleTerracotta => Some(6857i32),
            Blocks::BlueTerracotta => Some(6858i32),
            Blocks::BrownTerracotta => Some(6859i32),
            Blocks::GreenTerracotta => Some(6860i32),
            Blocks::RedTerracotta => Some(6861i32),
            Blocks::BlackTerracotta => Some(6862i32),
            Blocks::WhiteStainedGlassPane(state_unique_falcon) => Some(
                6863i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OrangeStainedGlassPane(state_unique_falcon) => Some(
                6895i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::MagentaStainedGlassPane(state_unique_falcon) => Some(
                6927i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightBlueStainedGlassPane(state_unique_falcon) => Some(
                6959i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::YellowStainedGlassPane(state_unique_falcon) => Some(
                6991i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LimeStainedGlassPane(state_unique_falcon) => Some(
                7023i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PinkStainedGlassPane(state_unique_falcon) => Some(
                7055i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GrayStainedGlassPane(state_unique_falcon) => Some(
                7087i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightGrayStainedGlassPane(state_unique_falcon) => Some(
                7119i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::CyanStainedGlassPane(state_unique_falcon) => Some(
                7151i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PurpleStainedGlassPane(state_unique_falcon) => Some(
                7183i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlueStainedGlassPane(state_unique_falcon) => Some(
                7215i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BrownStainedGlassPane(state_unique_falcon) => Some(
                7247i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GreenStainedGlassPane(state_unique_falcon) => Some(
                7279i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::RedStainedGlassPane(state_unique_falcon) => Some(
                7311i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlackStainedGlassPane(state_unique_falcon) => Some(
                7343i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaStairs(state_unique_falcon) => Some(
                7375i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakStairs(state_unique_falcon) => Some(
                7455i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SlimeBlock => Some(7535i32),
            Blocks::Barrier => Some(7536i32),
            Blocks::IronTrapdoor(state_unique_falcon) => Some(
                7537i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Prismarine => Some(7601i32),
            Blocks::PrismarineBricks => Some(7602i32),
            Blocks::DarkPrismarine => Some(7603i32),
            Blocks::PrismarineStairs(state_unique_falcon) => Some(
                7604i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineBrickStairs(state_unique_falcon) => Some(
                7684i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkPrismarineStairs(state_unique_falcon) => Some(
                7764i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineSlab(state_unique_falcon) => Some(
                7844i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PrismarineBrickSlab(state_unique_falcon) => Some(
                7850i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkPrismarineSlab(state_unique_falcon) => Some(
                7856i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SeaLantern => Some(7862i32),
            Blocks::HayBlock(state_unique_falcon) => {
                Some(7863i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WhiteCarpet => Some(7866i32),
            Blocks::OrangeCarpet => Some(7867i32),
            Blocks::MagentaCarpet => Some(7868i32),
            Blocks::LightBlueCarpet => Some(7869i32),
            Blocks::YellowCarpet => Some(7870i32),
            Blocks::LimeCarpet => Some(7871i32),
            Blocks::PinkCarpet => Some(7872i32),
            Blocks::GrayCarpet => Some(7873i32),
            Blocks::LightGrayCarpet => Some(7874i32),
            Blocks::CyanCarpet => Some(7875i32),
            Blocks::PurpleCarpet => Some(7876i32),
            Blocks::BlueCarpet => Some(7877i32),
            Blocks::BrownCarpet => Some(7878i32),
            Blocks::GreenCarpet => Some(7879i32),
            Blocks::RedCarpet => Some(7880i32),
            Blocks::BlackCarpet => Some(7881i32),
            Blocks::Terracotta => Some(7882i32),
            Blocks::CoalBlock => Some(7883i32),
            Blocks::PackedIce => Some(7884i32),
            Blocks::Sunflower(state_unique_falcon) => {
                Some(7885i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Lilac(state_unique_falcon) => Some(7887i32 + (state_unique_falcon.half as i32)),
            Blocks::RoseBush(state_unique_falcon) => {
                Some(7889i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Peony(state_unique_falcon) => Some(7891i32 + (state_unique_falcon.half as i32)),
            Blocks::TallGrass(state_unique_falcon) => {
                Some(7893i32 + (state_unique_falcon.half as i32))
            }
            Blocks::LargeFern(state_unique_falcon) => {
                Some(7895i32 + (state_unique_falcon.half as i32))
            }
            Blocks::WhiteBanner(state_unique_falcon) => {
                Some(7897i32 + state_unique_falcon.rotation)
            }
            Blocks::OrangeBanner(state_unique_falcon) => {
                Some(7913i32 + state_unique_falcon.rotation)
            }
            Blocks::MagentaBanner(state_unique_falcon) => {
                Some(7929i32 + state_unique_falcon.rotation)
            }
            Blocks::LightBlueBanner(state_unique_falcon) => {
                Some(7945i32 + state_unique_falcon.rotation)
            }
            Blocks::YellowBanner(state_unique_falcon) => {
                Some(7961i32 + state_unique_falcon.rotation)
            }
            Blocks::LimeBanner(state_unique_falcon) => Some(7977i32 + state_unique_falcon.rotation),
            Blocks::PinkBanner(state_unique_falcon) => Some(7993i32 + state_unique_falcon.rotation),
            Blocks::GrayBanner(state_unique_falcon) => Some(8009i32 + state_unique_falcon.rotation),
            Blocks::LightGrayBanner(state_unique_falcon) => {
                Some(8025i32 + state_unique_falcon.rotation)
            }
            Blocks::CyanBanner(state_unique_falcon) => Some(8041i32 + state_unique_falcon.rotation),
            Blocks::PurpleBanner(state_unique_falcon) => {
                Some(8057i32 + state_unique_falcon.rotation)
            }
            Blocks::BlueBanner(state_unique_falcon) => Some(8073i32 + state_unique_falcon.rotation),
            Blocks::BrownBanner(state_unique_falcon) => {
                Some(8089i32 + state_unique_falcon.rotation)
            }
            Blocks::GreenBanner(state_unique_falcon) => {
                Some(8105i32 + state_unique_falcon.rotation)
            }
            Blocks::RedBanner(state_unique_falcon) => Some(8121i32 + state_unique_falcon.rotation),
            Blocks::BlackBanner(state_unique_falcon) => {
                Some(8137i32 + state_unique_falcon.rotation)
            }
            Blocks::WhiteWallBanner(state_unique_falcon) => {
                Some(8153i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeWallBanner(state_unique_falcon) => {
                Some(8157i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaWallBanner(state_unique_falcon) => {
                Some(8161i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueWallBanner(state_unique_falcon) => {
                Some(8165i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowWallBanner(state_unique_falcon) => {
                Some(8169i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeWallBanner(state_unique_falcon) => {
                Some(8173i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkWallBanner(state_unique_falcon) => {
                Some(8177i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayWallBanner(state_unique_falcon) => {
                Some(8181i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayWallBanner(state_unique_falcon) => {
                Some(8185i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanWallBanner(state_unique_falcon) => {
                Some(8189i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleWallBanner(state_unique_falcon) => {
                Some(8193i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueWallBanner(state_unique_falcon) => {
                Some(8197i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownWallBanner(state_unique_falcon) => {
                Some(8201i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenWallBanner(state_unique_falcon) => {
                Some(8205i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedWallBanner(state_unique_falcon) => {
                Some(8209i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackWallBanner(state_unique_falcon) => {
                Some(8213i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedSandstone => Some(8217i32),
            Blocks::ChiseledRedSandstone => Some(8218i32),
            Blocks::CutRedSandstone => Some(8219i32),
            Blocks::RedSandstoneStairs(state_unique_falcon) => Some(
                8220i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSlab(state_unique_falcon) => Some(
                8300i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SpruceSlab(state_unique_falcon) => Some(
                8306i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BirchSlab(state_unique_falcon) => Some(
                8312i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::JungleSlab(state_unique_falcon) => Some(
                8318i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AcaciaSlab(state_unique_falcon) => Some(
                8324i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkOakSlab(state_unique_falcon) => Some(
                8330i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneSlab(state_unique_falcon) => Some(
                8336i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStoneSlab(state_unique_falcon) => Some(
                8342i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SandstoneSlab(state_unique_falcon) => Some(
                8348i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutSandstoneSlab(state_unique_falcon) => Some(
                8354i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PetrifiedOakSlab(state_unique_falcon) => Some(
                8360i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CobblestoneSlab(state_unique_falcon) => Some(
                8366i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickSlab(state_unique_falcon) => Some(
                8372i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneBrickSlab(state_unique_falcon) => Some(
                8378i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::NetherBrickSlab(state_unique_falcon) => Some(
                8384i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::QuartzSlab(state_unique_falcon) => Some(
                8390i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedSandstoneSlab(state_unique_falcon) => Some(
                8396i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutRedSandstoneSlab(state_unique_falcon) => Some(
                8402i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PurpurSlab(state_unique_falcon) => Some(
                8408i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStone => Some(8414i32),
            Blocks::SmoothSandstone => Some(8415i32),
            Blocks::SmoothQuartz => Some(8416i32),
            Blocks::SmoothRedSandstone => Some(8417i32),
            Blocks::SpruceFenceGate(state_unique_falcon) => Some(
                8418i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchFenceGate(state_unique_falcon) => Some(
                8450i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleFenceGate(state_unique_falcon) => Some(
                8482i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaFenceGate(state_unique_falcon) => Some(
                8514i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakFenceGate(state_unique_falcon) => Some(
                8546i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceFence(state_unique_falcon) => Some(
                8578i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BirchFence(state_unique_falcon) => Some(
                8610i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::JungleFence(state_unique_falcon) => Some(
                8642i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaFence(state_unique_falcon) => Some(
                8674i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::DarkOakFence(state_unique_falcon) => Some(
                8706i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::SpruceDoor(state_unique_falcon) => Some(
                8738i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchDoor(state_unique_falcon) => Some(
                8802i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleDoor(state_unique_falcon) => Some(
                8866i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaDoor(state_unique_falcon) => Some(
                8930i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakDoor(state_unique_falcon) => Some(
                8994i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndRod(state_unique_falcon) => {
                Some(9058i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChorusPlant(state_unique_falcon) => Some(
                9064i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::ChorusFlower(state_unique_falcon) => Some(9128i32 + state_unique_falcon.age),
            Blocks::PurpurBlock => Some(9134i32),
            Blocks::PurpurPillar(state_unique_falcon) => {
                Some(9135i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::PurpurStairs(state_unique_falcon) => Some(
                9138i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBricks => Some(9218i32),
            Blocks::Beetroots(state_unique_falcon) => Some(9219i32 + state_unique_falcon.age),
            Blocks::DirtPath => Some(9223i32),
            Blocks::EndGateway => Some(9224i32),
            Blocks::RepeatingCommandBlock(state_unique_falcon) => Some(
                9225i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::ChainCommandBlock(state_unique_falcon) => Some(
                9237i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::FrostedIce(state_unique_falcon) => Some(9249i32 + state_unique_falcon.age),
            Blocks::MagmaBlock => Some(9253i32),
            Blocks::NetherWartBlock => Some(9254i32),
            Blocks::RedNetherBricks => Some(9255i32),
            Blocks::BoneBlock(state_unique_falcon) => {
                Some(9256i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StructureVoid => Some(9259i32),
            Blocks::Observer(state_unique_falcon) => Some(
                9260i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ShulkerBox(state_unique_falcon) => {
                Some(9272i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteShulkerBox(state_unique_falcon) => {
                Some(9278i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeShulkerBox(state_unique_falcon) => {
                Some(9284i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaShulkerBox(state_unique_falcon) => {
                Some(9290i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueShulkerBox(state_unique_falcon) => {
                Some(9296i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowShulkerBox(state_unique_falcon) => {
                Some(9302i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeShulkerBox(state_unique_falcon) => {
                Some(9308i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkShulkerBox(state_unique_falcon) => {
                Some(9314i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayShulkerBox(state_unique_falcon) => {
                Some(9320i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayShulkerBox(state_unique_falcon) => {
                Some(9326i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanShulkerBox(state_unique_falcon) => {
                Some(9332i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleShulkerBox(state_unique_falcon) => {
                Some(9338i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueShulkerBox(state_unique_falcon) => {
                Some(9344i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownShulkerBox(state_unique_falcon) => {
                Some(9350i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenShulkerBox(state_unique_falcon) => {
                Some(9356i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedShulkerBox(state_unique_falcon) => {
                Some(9362i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackShulkerBox(state_unique_falcon) => {
                Some(9368i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteGlazedTerracotta(state_unique_falcon) => {
                Some(9374i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeGlazedTerracotta(state_unique_falcon) => {
                Some(9378i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaGlazedTerracotta(state_unique_falcon) => {
                Some(9382i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueGlazedTerracotta(state_unique_falcon) => {
                Some(9386i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowGlazedTerracotta(state_unique_falcon) => {
                Some(9390i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeGlazedTerracotta(state_unique_falcon) => {
                Some(9394i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkGlazedTerracotta(state_unique_falcon) => {
                Some(9398i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayGlazedTerracotta(state_unique_falcon) => {
                Some(9402i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayGlazedTerracotta(state_unique_falcon) => {
                Some(9406i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanGlazedTerracotta(state_unique_falcon) => {
                Some(9410i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleGlazedTerracotta(state_unique_falcon) => {
                Some(9414i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueGlazedTerracotta(state_unique_falcon) => {
                Some(9418i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownGlazedTerracotta(state_unique_falcon) => {
                Some(9422i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenGlazedTerracotta(state_unique_falcon) => {
                Some(9426i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedGlazedTerracotta(state_unique_falcon) => {
                Some(9430i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackGlazedTerracotta(state_unique_falcon) => {
                Some(9434i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteConcrete => Some(9438i32),
            Blocks::OrangeConcrete => Some(9439i32),
            Blocks::MagentaConcrete => Some(9440i32),
            Blocks::LightBlueConcrete => Some(9441i32),
            Blocks::YellowConcrete => Some(9442i32),
            Blocks::LimeConcrete => Some(9443i32),
            Blocks::PinkConcrete => Some(9444i32),
            Blocks::GrayConcrete => Some(9445i32),
            Blocks::LightGrayConcrete => Some(9446i32),
            Blocks::CyanConcrete => Some(9447i32),
            Blocks::PurpleConcrete => Some(9448i32),
            Blocks::BlueConcrete => Some(9449i32),
            Blocks::BrownConcrete => Some(9450i32),
            Blocks::GreenConcrete => Some(9451i32),
            Blocks::RedConcrete => Some(9452i32),
            Blocks::BlackConcrete => Some(9453i32),
            Blocks::WhiteConcretePowder => Some(9454i32),
            Blocks::OrangeConcretePowder => Some(9455i32),
            Blocks::MagentaConcretePowder => Some(9456i32),
            Blocks::LightBlueConcretePowder => Some(9457i32),
            Blocks::YellowConcretePowder => Some(9458i32),
            Blocks::LimeConcretePowder => Some(9459i32),
            Blocks::PinkConcretePowder => Some(9460i32),
            Blocks::GrayConcretePowder => Some(9461i32),
            Blocks::LightGrayConcretePowder => Some(9462i32),
            Blocks::CyanConcretePowder => Some(9463i32),
            Blocks::PurpleConcretePowder => Some(9464i32),
            Blocks::BlueConcretePowder => Some(9465i32),
            Blocks::BrownConcretePowder => Some(9466i32),
            Blocks::GreenConcretePowder => Some(9467i32),
            Blocks::RedConcretePowder => Some(9468i32),
            Blocks::BlackConcretePowder => Some(9469i32),
            Blocks::Kelp(state_unique_falcon) => Some(9470i32 + state_unique_falcon.age),
            Blocks::KelpPlant => Some(9496i32),
            Blocks::DriedKelpBlock => Some(9497i32),
            Blocks::TurtleEgg(state_unique_falcon) => {
                Some(9498i32 + state_unique_falcon.hatch + 3 * state_unique_falcon.eggs)
            }
            Blocks::DeadTubeCoralBlock => Some(9510i32),
            Blocks::DeadBrainCoralBlock => Some(9511i32),
            Blocks::DeadBubbleCoralBlock => Some(9512i32),
            Blocks::DeadFireCoralBlock => Some(9513i32),
            Blocks::DeadHornCoralBlock => Some(9514i32),
            Blocks::TubeCoralBlock => Some(9515i32),
            Blocks::BrainCoralBlock => Some(9516i32),
            Blocks::BubbleCoralBlock => Some(9517i32),
            Blocks::FireCoralBlock => Some(9518i32),
            Blocks::HornCoralBlock => Some(9519i32),
            Blocks::DeadTubeCoral(state_unique_falcon) => {
                Some(9520i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoral(state_unique_falcon) => {
                Some(9522i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoral(state_unique_falcon) => {
                Some(9524i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoral(state_unique_falcon) => {
                Some(9526i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoral(state_unique_falcon) => {
                Some(9528i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoral(state_unique_falcon) => {
                Some(9530i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoral(state_unique_falcon) => {
                Some(9532i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoral(state_unique_falcon) => {
                Some(9534i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoral(state_unique_falcon) => {
                Some(9536i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoral(state_unique_falcon) => {
                Some(9538i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralFan(state_unique_falcon) => {
                Some(9540i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoralFan(state_unique_falcon) => {
                Some(9542i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoralFan(state_unique_falcon) => {
                Some(9544i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoralFan(state_unique_falcon) => {
                Some(9546i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoralFan(state_unique_falcon) => {
                Some(9548i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoralFan(state_unique_falcon) => {
                Some(9550i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoralFan(state_unique_falcon) => {
                Some(9552i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoralFan(state_unique_falcon) => {
                Some(9554i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoralFan(state_unique_falcon) => {
                Some(9556i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoralFan(state_unique_falcon) => {
                Some(9558i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralWallFan(state_unique_falcon) => Some(
                9560i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBrainCoralWallFan(state_unique_falcon) => Some(
                9568i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBubbleCoralWallFan(state_unique_falcon) => Some(
                9576i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadFireCoralWallFan(state_unique_falcon) => Some(
                9584i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadHornCoralWallFan(state_unique_falcon) => Some(
                9592i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TubeCoralWallFan(state_unique_falcon) => Some(
                9600i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrainCoralWallFan(state_unique_falcon) => Some(
                9608i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BubbleCoralWallFan(state_unique_falcon) => Some(
                9616i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::FireCoralWallFan(state_unique_falcon) => Some(
                9624i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HornCoralWallFan(state_unique_falcon) => Some(
                9632i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SeaPickle(state_unique_falcon) => Some(
                9640i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.pickles,
            ),
            Blocks::BlueIce => Some(9648i32),
            Blocks::Conduit(state_unique_falcon) => {
                Some(9649i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BambooSapling => Some(9651i32),
            Blocks::Bamboo(state_unique_falcon) => Some(
                9652i32
                    + state_unique_falcon.stage
                    + 2 * (state_unique_falcon.leaves as i32)
                    + 6 * state_unique_falcon.age,
            ),
            Blocks::PottedBamboo => Some(9664i32),
            Blocks::VoidAir => Some(9665i32),
            Blocks::CaveAir => Some(9666i32),
            Blocks::BubbleColumn(state_unique_falcon) => {
                Some(9667i32 + (!state_unique_falcon.drag() as i32))
            }
            Blocks::PolishedGraniteStairs(state_unique_falcon) => Some(
                9669i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothRedSandstoneStairs(state_unique_falcon) => Some(
                9749i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MossyStoneBrickStairs(state_unique_falcon) => Some(
                9829i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedDioriteStairs(state_unique_falcon) => Some(
                9909i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MossyCobblestoneStairs(state_unique_falcon) => Some(
                9989i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBrickStairs(state_unique_falcon) => Some(
                10069i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneStairs(state_unique_falcon) => Some(
                10149i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothSandstoneStairs(state_unique_falcon) => Some(
                10229i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothQuartzStairs(state_unique_falcon) => Some(
                10309i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GraniteStairs(state_unique_falcon) => Some(
                10389i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AndesiteStairs(state_unique_falcon) => Some(
                10469i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedNetherBrickStairs(state_unique_falcon) => Some(
                10549i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedAndesiteStairs(state_unique_falcon) => Some(
                10629i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DioriteStairs(state_unique_falcon) => Some(
                10709i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedGraniteSlab(state_unique_falcon) => Some(
                10789i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothRedSandstoneSlab(state_unique_falcon) => Some(
                10795i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::MossyStoneBrickSlab(state_unique_falcon) => Some(
                10801i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedDioriteSlab(state_unique_falcon) => Some(
                10807i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::MossyCobblestoneSlab(state_unique_falcon) => Some(
                10813i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::EndStoneBrickSlab(state_unique_falcon) => Some(
                10819i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothSandstoneSlab(state_unique_falcon) => Some(
                10825i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothQuartzSlab(state_unique_falcon) => Some(
                10831i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::GraniteSlab(state_unique_falcon) => Some(
                10837i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AndesiteSlab(state_unique_falcon) => Some(
                10843i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedNetherBrickSlab(state_unique_falcon) => Some(
                10849i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedAndesiteSlab(state_unique_falcon) => Some(
                10855i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DioriteSlab(state_unique_falcon) => Some(
                10861i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickWall(state_unique_falcon) => Some(
                10867i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::PrismarineWall(state_unique_falcon) => Some(
                11191i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::RedSandstoneWall(state_unique_falcon) => Some(
                11515i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::MossyStoneBrickWall(state_unique_falcon) => Some(
                11839i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::GraniteWall(state_unique_falcon) => Some(
                12163i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::StoneBrickWall(state_unique_falcon) => Some(
                12487i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::NetherBrickWall(state_unique_falcon) => Some(
                12811i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::AndesiteWall(state_unique_falcon) => Some(
                13135i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::RedNetherBrickWall(state_unique_falcon) => Some(
                13459i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::SandstoneWall(state_unique_falcon) => Some(
                13783i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::EndStoneBrickWall(state_unique_falcon) => Some(
                14107i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::DioriteWall(state_unique_falcon) => Some(
                14431i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::Scaffolding(state_unique_falcon) => Some(
                14755i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.distance
                    + 16 * (!state_unique_falcon.bottom() as i32),
            ),
            Blocks::Loom(state_unique_falcon) => {
                Some(14787i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Barrel(state_unique_falcon) => Some(
                14791i32
                    + (!state_unique_falcon.open() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Smoker(state_unique_falcon) => Some(
                14803i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlastFurnace(state_unique_falcon) => Some(
                14811i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CartographyTable => Some(14819i32),
            Blocks::FletchingTable => Some(14820i32),
            Blocks::Grindstone(state_unique_falcon) => Some(
                14821i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (state_unique_falcon.face as i32),
            ),
            Blocks::Lectern(state_unique_falcon) => Some(
                14833i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.has_book() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmithingTable => Some(14849i32),
            Blocks::Stonecutter(state_unique_falcon) => {
                Some(14850i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Bell(state_unique_falcon) => Some(
                14854i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.attachment as i32),
            ),
            Blocks::Lantern(state_unique_falcon) => {
                Some(14886i32 + (!state_unique_falcon.hanging() as i32))
            }
            Blocks::SoulLantern(state_unique_falcon) => {
                Some(14888i32 + (!state_unique_falcon.hanging() as i32))
            }
            Blocks::Campfire(state_unique_falcon) => Some(
                14890i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.signal_fire() as i32)
                    + 4 * (!state_unique_falcon.lit() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SoulCampfire(state_unique_falcon) => Some(
                14922i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.signal_fire() as i32)
                    + 4 * (!state_unique_falcon.lit() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SweetBerryBush(state_unique_falcon) => Some(14954i32 + state_unique_falcon.age),
            Blocks::WarpedStem(state_unique_falcon) => {
                Some(14958i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedWarpedStem(state_unique_falcon) => {
                Some(14961i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WarpedHyphae(state_unique_falcon) => {
                Some(14964i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedWarpedHyphae(state_unique_falcon) => {
                Some(14967i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WarpedNylium => Some(14970i32),
            Blocks::WarpedFungus => Some(14971i32),
            Blocks::WarpedWartBlock => Some(14972i32),
            Blocks::WarpedRoots => Some(14973i32),
            Blocks::NetherSprouts => Some(14974i32),
            Blocks::CrimsonStem(state_unique_falcon) => {
                Some(14975i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedCrimsonStem(state_unique_falcon) => {
                Some(14978i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CrimsonHyphae(state_unique_falcon) => {
                Some(14981i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedCrimsonHyphae(state_unique_falcon) => {
                Some(14984i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CrimsonNylium => Some(14987i32),
            Blocks::CrimsonFungus => Some(14988i32),
            Blocks::Shroomlight => Some(14989i32),
            Blocks::WeepingVines(state_unique_falcon) => Some(14990i32 + state_unique_falcon.age),
            Blocks::WeepingVinesPlant => Some(15016i32),
            Blocks::TwistingVines(state_unique_falcon) => Some(15017i32 + state_unique_falcon.age),
            Blocks::TwistingVinesPlant => Some(15043i32),
            Blocks::CrimsonRoots => Some(15044i32),
            Blocks::CrimsonPlanks => Some(15045i32),
            Blocks::WarpedPlanks => Some(15046i32),
            Blocks::CrimsonSlab(state_unique_falcon) => Some(
                15047i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::WarpedSlab(state_unique_falcon) => Some(
                15053i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CrimsonPressurePlate(state_unique_falcon) => {
                Some(15059i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::WarpedPressurePlate(state_unique_falcon) => {
                Some(15061i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::CrimsonFence(state_unique_falcon) => Some(
                15063i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::WarpedFence(state_unique_falcon) => Some(
                15095i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::CrimsonTrapdoor(state_unique_falcon) => Some(
                15127i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedTrapdoor(state_unique_falcon) => Some(
                15191i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonFenceGate(state_unique_falcon) => Some(
                15255i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedFenceGate(state_unique_falcon) => Some(
                15287i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonStairs(state_unique_falcon) => Some(
                15319i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedStairs(state_unique_falcon) => Some(
                15399i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonButton(state_unique_falcon) => Some(
                15479i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::WarpedButton(state_unique_falcon) => Some(
                15503i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::CrimsonDoor(state_unique_falcon) => Some(
                15527i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedDoor(state_unique_falcon) => Some(
                15591i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CrimsonSign(state_unique_falcon) => Some(
                15655i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::WarpedSign(state_unique_falcon) => Some(
                15687i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::CrimsonWallSign(state_unique_falcon) => Some(
                15719i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WarpedWallSign(state_unique_falcon) => Some(
                15727i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StructureBlock(state_unique_falcon) => {
                Some(15735i32 + (state_unique_falcon.mode as i32))
            }
            Blocks::Jigsaw(state_unique_falcon) => {
                Some(15739i32 + (state_unique_falcon.orientation as i32))
            }
            Blocks::Composter(state_unique_falcon) => Some(15751i32 + state_unique_falcon.level),
            Blocks::Target(state_unique_falcon) => Some(15760i32 + state_unique_falcon.power),
            Blocks::BeeNest(state_unique_falcon) => Some(
                15776i32
                    + state_unique_falcon.honey_level
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Beehive(state_unique_falcon) => Some(
                15800i32
                    + state_unique_falcon.honey_level
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HoneyBlock => Some(15824i32),
            Blocks::HoneycombBlock => Some(15825i32),
            Blocks::NetheriteBlock => Some(15826i32),
            Blocks::AncientDebris => Some(15827i32),
            Blocks::CryingObsidian => Some(15828i32),
            Blocks::RespawnAnchor(state_unique_falcon) => {
                Some(15829i32 + state_unique_falcon.charges)
            }
            Blocks::PottedCrimsonFungus => Some(15834i32),
            Blocks::PottedWarpedFungus => Some(15835i32),
            Blocks::PottedCrimsonRoots => Some(15836i32),
            Blocks::PottedWarpedRoots => Some(15837i32),
            Blocks::Lodestone => Some(15838i32),
            Blocks::Blackstone => Some(15839i32),
            Blocks::BlackstoneStairs(state_unique_falcon) => Some(
                15840i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlackstoneWall(state_unique_falcon) => Some(
                15920i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::BlackstoneSlab(state_unique_falcon) => Some(
                16244i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedBlackstone => Some(16250i32),
            Blocks::PolishedBlackstoneBricks => Some(16251i32),
            Blocks::CrackedPolishedBlackstoneBricks => Some(16252i32),
            Blocks::ChiseledPolishedBlackstone => Some(16253i32),
            Blocks::PolishedBlackstoneBrickSlab(state_unique_falcon) => Some(
                16254i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedBlackstoneBrickStairs(state_unique_falcon) => Some(
                16260i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedBlackstoneBrickWall(state_unique_falcon) => Some(
                16340i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::GildedBlackstone => Some(16664i32),
            Blocks::PolishedBlackstoneStairs(state_unique_falcon) => Some(
                16665i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedBlackstoneSlab(state_unique_falcon) => Some(
                16745i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedBlackstonePressurePlate(state_unique_falcon) => {
                Some(16751i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::PolishedBlackstoneButton(state_unique_falcon) => Some(
                16753i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::PolishedBlackstoneWall(state_unique_falcon) => Some(
                16777i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (!state_unique_falcon.waterlogged() as i32)
                    + 6 * (!state_unique_falcon.up() as i32)
                    + 12 * (state_unique_falcon.south as i32)
                    + 36 * (state_unique_falcon.north as i32)
                    + 108 * (state_unique_falcon.east as i32),
            ),
            Blocks::ChiseledNetherBricks => Some(17101i32),
            Blocks::CrackedNetherBricks => Some(17102i32),
            Blocks::QuartzBricks => Some(17103i32),
            _ => None,
        }
    }
    pub fn get_global_id_2230(&self) -> Option<i32> {
        match self {
            Blocks::Air => Some(0i32),
            Blocks::Stone => Some(1i32),
            Blocks::Granite => Some(2i32),
            Blocks::PolishedGranite => Some(3i32),
            Blocks::Diorite => Some(4i32),
            Blocks::PolishedDiorite => Some(5i32),
            Blocks::Andesite => Some(6i32),
            Blocks::PolishedAndesite => Some(7i32),
            Blocks::GrassBlock(state_unique_falcon) => {
                Some(8i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Dirt => Some(10i32),
            Blocks::CoarseDirt => Some(11i32),
            Blocks::Podzol(state_unique_falcon) => {
                Some(12i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Cobblestone => Some(14i32),
            Blocks::OakPlanks => Some(15i32),
            Blocks::SprucePlanks => Some(16i32),
            Blocks::BirchPlanks => Some(17i32),
            Blocks::JunglePlanks => Some(18i32),
            Blocks::AcaciaPlanks => Some(19i32),
            Blocks::DarkOakPlanks => Some(20i32),
            Blocks::OakSapling(state_unique_falcon) => Some(21i32 + state_unique_falcon.stage),
            Blocks::SpruceSapling(state_unique_falcon) => Some(23i32 + state_unique_falcon.stage),
            Blocks::BirchSapling(state_unique_falcon) => Some(25i32 + state_unique_falcon.stage),
            Blocks::JungleSapling(state_unique_falcon) => Some(27i32 + state_unique_falcon.stage),
            Blocks::AcaciaSapling(state_unique_falcon) => Some(29i32 + state_unique_falcon.stage),
            Blocks::DarkOakSapling(state_unique_falcon) => Some(31i32 + state_unique_falcon.stage),
            Blocks::Bedrock => Some(33i32),
            Blocks::Water(state_unique_falcon) => Some(34i32 + state_unique_falcon.level),
            Blocks::Lava(state_unique_falcon) => Some(50i32 + state_unique_falcon.level),
            Blocks::Sand => Some(66i32),
            Blocks::RedSand => Some(67i32),
            Blocks::Gravel => Some(68i32),
            Blocks::GoldOre => Some(69i32),
            Blocks::IronOre => Some(70i32),
            Blocks::CoalOre => Some(71i32),
            Blocks::OakLog(state_unique_falcon) => Some(72i32 + (state_unique_falcon.axis as i32)),
            Blocks::SpruceLog(state_unique_falcon) => {
                Some(75i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchLog(state_unique_falcon) => {
                Some(78i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleLog(state_unique_falcon) => {
                Some(81i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaLog(state_unique_falcon) => {
                Some(84i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakLog(state_unique_falcon) => {
                Some(87i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceLog(state_unique_falcon) => {
                Some(90i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchLog(state_unique_falcon) => {
                Some(93i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleLog(state_unique_falcon) => {
                Some(96i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaLog(state_unique_falcon) => {
                Some(99i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakLog(state_unique_falcon) => {
                Some(102i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakLog(state_unique_falcon) => {
                Some(105i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakWood(state_unique_falcon) => {
                Some(108i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SpruceWood(state_unique_falcon) => {
                Some(111i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchWood(state_unique_falcon) => {
                Some(114i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleWood(state_unique_falcon) => {
                Some(117i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaWood(state_unique_falcon) => {
                Some(120i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakWood(state_unique_falcon) => {
                Some(123i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakWood(state_unique_falcon) => {
                Some(126i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceWood(state_unique_falcon) => {
                Some(129i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchWood(state_unique_falcon) => {
                Some(132i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleWood(state_unique_falcon) => {
                Some(135i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaWood(state_unique_falcon) => {
                Some(138i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakWood(state_unique_falcon) => {
                Some(141i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakLeaves(state_unique_falcon) => Some(
                144i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::SpruceLeaves(state_unique_falcon) => Some(
                158i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::BirchLeaves(state_unique_falcon) => Some(
                172i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::JungleLeaves(state_unique_falcon) => Some(
                186i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::AcaciaLeaves(state_unique_falcon) => Some(
                200i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::DarkOakLeaves(state_unique_falcon) => Some(
                214i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::Sponge => Some(228i32),
            Blocks::WetSponge => Some(229i32),
            Blocks::Glass => Some(230i32),
            Blocks::LapisOre => Some(231i32),
            Blocks::LapisBlock => Some(232i32),
            Blocks::Dispenser(state_unique_falcon) => Some(
                233i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Sandstone => Some(245i32),
            Blocks::ChiseledSandstone => Some(246i32),
            Blocks::CutSandstone => Some(247i32),
            Blocks::NoteBlock(state_unique_falcon) => Some(
                248i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * state_unique_falcon.note
                    + 50 * (state_unique_falcon.instrument as i32),
            ),
            Blocks::WhiteBed(state_unique_falcon) => Some(
                1048i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OrangeBed(state_unique_falcon) => Some(
                1064i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MagentaBed(state_unique_falcon) => Some(
                1080i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightBlueBed(state_unique_falcon) => Some(
                1096i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::YellowBed(state_unique_falcon) => Some(
                1112i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LimeBed(state_unique_falcon) => Some(
                1128i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PinkBed(state_unique_falcon) => Some(
                1144i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GrayBed(state_unique_falcon) => Some(
                1160i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightGrayBed(state_unique_falcon) => Some(
                1176i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CyanBed(state_unique_falcon) => Some(
                1192i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PurpleBed(state_unique_falcon) => Some(
                1208i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlueBed(state_unique_falcon) => Some(
                1224i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrownBed(state_unique_falcon) => Some(
                1240i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GreenBed(state_unique_falcon) => Some(
                1256i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedBed(state_unique_falcon) => Some(
                1272i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlackBed(state_unique_falcon) => Some(
                1288i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PoweredRail(state_unique_falcon) => Some(
                1304i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::DetectorRail(state_unique_falcon) => Some(
                1316i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::StickyPiston(state_unique_falcon) => Some(
                1328i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::Cobweb => Some(1340i32),
            Blocks::Grass => Some(1341i32),
            Blocks::Fern => Some(1342i32),
            Blocks::DeadBush => Some(1343i32),
            Blocks::Seagrass => Some(1344i32),
            Blocks::TallSeagrass(state_unique_falcon) => {
                Some(1345i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Piston(state_unique_falcon) => Some(
                1347i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::PistonHead(state_unique_falcon) => Some(
                1359i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (!state_unique_falcon.short() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteWool => Some(1383i32),
            Blocks::OrangeWool => Some(1384i32),
            Blocks::MagentaWool => Some(1385i32),
            Blocks::LightBlueWool => Some(1386i32),
            Blocks::YellowWool => Some(1387i32),
            Blocks::LimeWool => Some(1388i32),
            Blocks::PinkWool => Some(1389i32),
            Blocks::GrayWool => Some(1390i32),
            Blocks::LightGrayWool => Some(1391i32),
            Blocks::CyanWool => Some(1392i32),
            Blocks::PurpleWool => Some(1393i32),
            Blocks::BlueWool => Some(1394i32),
            Blocks::BrownWool => Some(1395i32),
            Blocks::GreenWool => Some(1396i32),
            Blocks::RedWool => Some(1397i32),
            Blocks::BlackWool => Some(1398i32),
            Blocks::MovingPiston(state_unique_falcon) => Some(
                1399i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Dandelion => Some(1411i32),
            Blocks::Poppy => Some(1412i32),
            Blocks::BlueOrchid => Some(1413i32),
            Blocks::Allium => Some(1414i32),
            Blocks::AzureBluet => Some(1415i32),
            Blocks::RedTulip => Some(1416i32),
            Blocks::OrangeTulip => Some(1417i32),
            Blocks::WhiteTulip => Some(1418i32),
            Blocks::PinkTulip => Some(1419i32),
            Blocks::OxeyeDaisy => Some(1420i32),
            Blocks::Cornflower => Some(1421i32),
            Blocks::WitherRose => Some(1422i32),
            Blocks::LilyOfTheValley => Some(1423i32),
            Blocks::BrownMushroom => Some(1424i32),
            Blocks::RedMushroom => Some(1425i32),
            Blocks::GoldBlock => Some(1426i32),
            Blocks::IronBlock => Some(1427i32),
            Blocks::Bricks => Some(1428i32),
            Blocks::Tnt(state_unique_falcon) => {
                Some(1429i32 + (!state_unique_falcon.unstable() as i32))
            }
            Blocks::Bookshelf => Some(1431i32),
            Blocks::MossyCobblestone => Some(1432i32),
            Blocks::Obsidian => Some(1433i32),
            Blocks::Torch => Some(1434i32),
            Blocks::WallTorch(state_unique_falcon) => {
                Some(1435i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Fire(state_unique_falcon) => Some(
                1439i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * state_unique_falcon.age,
            ),
            Blocks::Spawner => Some(1951i32),
            Blocks::OakStairs(state_unique_falcon) => Some(
                1952i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Chest(state_unique_falcon) => Some(
                2032i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedstoneWire(state_unique_falcon) => Some(
                2056i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (state_unique_falcon.south as i32)
                    + 9 * state_unique_falcon.power
                    + 144 * (state_unique_falcon.north as i32)
                    + 432 * (state_unique_falcon.east as i32),
            ),
            Blocks::DiamondOre => Some(3352i32),
            Blocks::DiamondBlock => Some(3353i32),
            Blocks::CraftingTable => Some(3354i32),
            Blocks::Wheat(state_unique_falcon) => Some(3355i32 + state_unique_falcon.age),
            Blocks::Farmland(state_unique_falcon) => Some(3363i32 + state_unique_falcon.moisture),
            Blocks::Furnace(state_unique_falcon) => Some(
                3371i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSign(state_unique_falcon) => Some(
                3379i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::SpruceSign(state_unique_falcon) => Some(
                3411i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::BirchSign(state_unique_falcon) => Some(
                3443i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::AcaciaSign(state_unique_falcon) => Some(
                3475i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::JungleSign(state_unique_falcon) => Some(
                3507i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::DarkOakSign(state_unique_falcon) => Some(
                3539i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::OakDoor(state_unique_falcon) => Some(
                3571i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Ladder(state_unique_falcon) => Some(
                3635i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Rail(state_unique_falcon) => Some(3643i32 + (state_unique_falcon.shape as i32)),
            Blocks::CobblestoneStairs(state_unique_falcon) => Some(
                3653i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakWallSign(state_unique_falcon) => Some(
                3733i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceWallSign(state_unique_falcon) => Some(
                3741i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchWallSign(state_unique_falcon) => Some(
                3749i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaWallSign(state_unique_falcon) => Some(
                3757i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleWallSign(state_unique_falcon) => Some(
                3765i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakWallSign(state_unique_falcon) => Some(
                3773i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Lever(state_unique_falcon) => Some(
                3781i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::StonePressurePlate(state_unique_falcon) => {
                Some(3805i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::IronDoor(state_unique_falcon) => Some(
                3807i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakPressurePlate(state_unique_falcon) => {
                Some(3871i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::SprucePressurePlate(state_unique_falcon) => {
                Some(3873i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::BirchPressurePlate(state_unique_falcon) => {
                Some(3875i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::JunglePressurePlate(state_unique_falcon) => {
                Some(3877i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::AcaciaPressurePlate(state_unique_falcon) => {
                Some(3879i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::DarkOakPressurePlate(state_unique_falcon) => {
                Some(3881i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::RedstoneOre(state_unique_falcon) => {
                Some(3883i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneTorch(state_unique_falcon) => {
                Some(3885i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneWallTorch(state_unique_falcon) => Some(
                3887i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneButton(state_unique_falcon) => Some(
                3895i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::Snow(state_unique_falcon) => Some(3919i32 + state_unique_falcon.layers),
            Blocks::Ice => Some(3927i32),
            Blocks::SnowBlock => Some(3928i32),
            Blocks::Cactus(state_unique_falcon) => Some(3929i32 + state_unique_falcon.age),
            Blocks::Clay => Some(3945i32),
            Blocks::SugarCane(state_unique_falcon) => Some(3946i32 + state_unique_falcon.age),
            Blocks::Jukebox(state_unique_falcon) => {
                Some(3962i32 + (!state_unique_falcon.has_record() as i32))
            }
            Blocks::OakFence(state_unique_falcon) => Some(
                3964i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Pumpkin => Some(3996i32),
            Blocks::Netherrack => Some(3997i32),
            Blocks::SoulSand => Some(3998i32),
            Blocks::Glowstone => Some(3999i32),
            Blocks::NetherPortal(state_unique_falcon) => {
                Some(4000i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CarvedPumpkin(state_unique_falcon) => {
                Some(4002i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::JackOLantern(state_unique_falcon) => {
                Some(4006i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Cake(state_unique_falcon) => Some(4010i32 + state_unique_falcon.bites),
            Blocks::Repeater(state_unique_falcon) => Some(
                4017i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.locked() as i32)
                    + 4 * (state_unique_falcon.facing as i32)
                    + 16 * state_unique_falcon.delay,
            ),
            Blocks::WhiteStainedGlass => Some(4081i32),
            Blocks::OrangeStainedGlass => Some(4082i32),
            Blocks::MagentaStainedGlass => Some(4083i32),
            Blocks::LightBlueStainedGlass => Some(4084i32),
            Blocks::YellowStainedGlass => Some(4085i32),
            Blocks::LimeStainedGlass => Some(4086i32),
            Blocks::PinkStainedGlass => Some(4087i32),
            Blocks::GrayStainedGlass => Some(4088i32),
            Blocks::LightGrayStainedGlass => Some(4089i32),
            Blocks::CyanStainedGlass => Some(4090i32),
            Blocks::PurpleStainedGlass => Some(4091i32),
            Blocks::BlueStainedGlass => Some(4092i32),
            Blocks::BrownStainedGlass => Some(4093i32),
            Blocks::GreenStainedGlass => Some(4094i32),
            Blocks::RedStainedGlass => Some(4095i32),
            Blocks::BlackStainedGlass => Some(4096i32),
            Blocks::OakTrapdoor(state_unique_falcon) => Some(
                4097i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceTrapdoor(state_unique_falcon) => Some(
                4161i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchTrapdoor(state_unique_falcon) => Some(
                4225i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleTrapdoor(state_unique_falcon) => Some(
                4289i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaTrapdoor(state_unique_falcon) => Some(
                4353i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakTrapdoor(state_unique_falcon) => Some(
                4417i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBricks => Some(4481i32),
            Blocks::MossyStoneBricks => Some(4482i32),
            Blocks::CrackedStoneBricks => Some(4483i32),
            Blocks::ChiseledStoneBricks => Some(4484i32),
            Blocks::InfestedStone => Some(4485i32),
            Blocks::InfestedCobblestone => Some(4486i32),
            Blocks::InfestedStoneBricks => Some(4487i32),
            Blocks::InfestedMossyStoneBricks => Some(4488i32),
            Blocks::InfestedCrackedStoneBricks => Some(4489i32),
            Blocks::InfestedChiseledStoneBricks => Some(4490i32),
            Blocks::BrownMushroomBlock(state_unique_falcon) => Some(
                4491i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::RedMushroomBlock(state_unique_falcon) => Some(
                4555i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::MushroomStem(state_unique_falcon) => Some(
                4619i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::IronBars(state_unique_falcon) => Some(
                4683i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GlassPane(state_unique_falcon) => Some(
                4715i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Melon => Some(4747i32),
            Blocks::AttachedPumpkinStem(state_unique_falcon) => {
                Some(4748i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::AttachedMelonStem(state_unique_falcon) => {
                Some(4752i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PumpkinStem(state_unique_falcon) => Some(4756i32 + state_unique_falcon.age),
            Blocks::MelonStem(state_unique_falcon) => Some(4764i32 + state_unique_falcon.age),
            Blocks::Vine(state_unique_falcon) => Some(
                4772i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OakFenceGate(state_unique_falcon) => Some(
                4804i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrickStairs(state_unique_falcon) => Some(
                4836i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBrickStairs(state_unique_falcon) => Some(
                4916i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Mycelium(state_unique_falcon) => {
                Some(4996i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::LilyPad => Some(4998i32),
            Blocks::NetherBricks => Some(4999i32),
            Blocks::NetherBrickFence(state_unique_falcon) => Some(
                5000i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::NetherBrickStairs(state_unique_falcon) => Some(
                5032i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::NetherWart(state_unique_falcon) => Some(5112i32 + state_unique_falcon.age),
            Blocks::EnchantingTable => Some(5116i32),
            Blocks::BrewingStand(state_unique_falcon) => Some(
                5117i32
                    + (!state_unique_falcon.has_bottle_2() as i32)
                    + 2 * (!state_unique_falcon.has_bottle_1() as i32)
                    + 4 * (!state_unique_falcon.has_bottle_0() as i32),
            ),
            Blocks::Cauldron => Some(5125i32),
            Blocks::WaterCauldron(state_unique_falcon) => Some(5126i32 + state_unique_falcon.level),
            Blocks::EndPortal => Some(5129i32),
            Blocks::EndPortalFrame(state_unique_falcon) => Some(
                5130i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (!state_unique_falcon.eye() as i32),
            ),
            Blocks::EndStone => Some(5138i32),
            Blocks::DragonEgg => Some(5139i32),
            Blocks::RedstoneLamp(state_unique_falcon) => {
                Some(5140i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::Cocoa(state_unique_falcon) => {
                Some(5142i32 + (state_unique_falcon.facing as i32) + 4 * state_unique_falcon.age)
            }
            Blocks::SandstoneStairs(state_unique_falcon) => Some(
                5154i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EmeraldOre => Some(5234i32),
            Blocks::EnderChest(state_unique_falcon) => Some(
                5235i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TripwireHook(state_unique_falcon) => Some(
                5243i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::Tripwire(state_unique_falcon) => Some(
                5259i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.south() as i32)
                    + 4 * (!state_unique_falcon.powered() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.disarmed() as i32)
                    + 64 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::EmeraldBlock => Some(5387i32),
            Blocks::SpruceStairs(state_unique_falcon) => Some(
                5388i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchStairs(state_unique_falcon) => Some(
                5468i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleStairs(state_unique_falcon) => Some(
                5548i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CommandBlock(state_unique_falcon) => Some(
                5628i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::Beacon => Some(5640i32),
            Blocks::CobblestoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    5641i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::MossyCobblestoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    5705i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::FlowerPot => Some(5769i32),
            Blocks::PottedOakSapling => Some(5770i32),
            Blocks::PottedSpruceSapling => Some(5771i32),
            Blocks::PottedBirchSapling => Some(5772i32),
            Blocks::PottedJungleSapling => Some(5773i32),
            Blocks::PottedAcaciaSapling => Some(5774i32),
            Blocks::PottedDarkOakSapling => Some(5775i32),
            Blocks::PottedFern => Some(5776i32),
            Blocks::PottedDandelion => Some(5777i32),
            Blocks::PottedPoppy => Some(5778i32),
            Blocks::PottedBlueOrchid => Some(5779i32),
            Blocks::PottedAllium => Some(5780i32),
            Blocks::PottedAzureBluet => Some(5781i32),
            Blocks::PottedRedTulip => Some(5782i32),
            Blocks::PottedOrangeTulip => Some(5783i32),
            Blocks::PottedWhiteTulip => Some(5784i32),
            Blocks::PottedPinkTulip => Some(5785i32),
            Blocks::PottedOxeyeDaisy => Some(5786i32),
            Blocks::PottedCornflower => Some(5787i32),
            Blocks::PottedLilyOfTheValley => Some(5788i32),
            Blocks::PottedWitherRose => Some(5789i32),
            Blocks::PottedRedMushroom => Some(5790i32),
            Blocks::PottedBrownMushroom => Some(5791i32),
            Blocks::PottedDeadBush => Some(5792i32),
            Blocks::PottedCactus => Some(5793i32),
            Blocks::Carrots(state_unique_falcon) => Some(5794i32 + state_unique_falcon.age),
            Blocks::Potatoes(state_unique_falcon) => Some(5802i32 + state_unique_falcon.age),
            Blocks::OakButton(state_unique_falcon) => Some(
                5810i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SpruceButton(state_unique_falcon) => Some(
                5834i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::BirchButton(state_unique_falcon) => Some(
                5858i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::JungleButton(state_unique_falcon) => Some(
                5882i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::AcaciaButton(state_unique_falcon) => Some(
                5906i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::DarkOakButton(state_unique_falcon) => Some(
                5930i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SkeletonSkull(state_unique_falcon) => {
                Some(5954i32 + state_unique_falcon.rotation)
            }
            Blocks::SkeletonWallSkull(state_unique_falcon) => {
                Some(5970i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WitherSkeletonSkull(state_unique_falcon) => {
                Some(5974i32 + state_unique_falcon.rotation)
            }
            Blocks::WitherSkeletonWallSkull(state_unique_falcon) => {
                Some(5990i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ZombieHead(state_unique_falcon) => Some(5994i32 + state_unique_falcon.rotation),
            Blocks::ZombieWallHead(state_unique_falcon) => {
                Some(6010i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PlayerHead(state_unique_falcon) => Some(6014i32 + state_unique_falcon.rotation),
            Blocks::PlayerWallHead(state_unique_falcon) => {
                Some(6030i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CreeperHead(state_unique_falcon) => {
                Some(6034i32 + state_unique_falcon.rotation)
            }
            Blocks::CreeperWallHead(state_unique_falcon) => {
                Some(6050i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DragonHead(state_unique_falcon) => Some(6054i32 + state_unique_falcon.rotation),
            Blocks::DragonWallHead(state_unique_falcon) => {
                Some(6070i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Anvil(state_unique_falcon) => {
                Some(6074i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChippedAnvil(state_unique_falcon) => {
                Some(6078i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DamagedAnvil(state_unique_falcon) => {
                Some(6082i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::TrappedChest(state_unique_falcon) => Some(
                6086i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightWeightedPressurePlate(state_unique_falcon) => {
                Some(6110i32 + state_unique_falcon.power)
            }
            Blocks::HeavyWeightedPressurePlate(state_unique_falcon) => {
                Some(6126i32 + state_unique_falcon.power)
            }
            Blocks::Comparator(state_unique_falcon) => Some(
                6142i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.mode as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DaylightDetector(state_unique_falcon) => Some(
                6158i32 + state_unique_falcon.power + 16 * (!state_unique_falcon.inverted() as i32),
            ),
            Blocks::RedstoneBlock => Some(6190i32),
            Blocks::NetherQuartzOre => Some(6191i32),
            Blocks::Hopper(state_unique_falcon) => Some(
                6192i32
                    + (state_unique_falcon.facing as i32)
                    + 5 * (!state_unique_falcon.enabled() as i32),
            ),
            Blocks::QuartzBlock => Some(6202i32),
            Blocks::ChiseledQuartzBlock => Some(6203i32),
            Blocks::QuartzPillar(state_unique_falcon) => {
                Some(6204i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::QuartzStairs(state_unique_falcon) => Some(
                6207i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ActivatorRail(state_unique_falcon) => Some(
                6287i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::Dropper(state_unique_falcon) => Some(
                6299i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteTerracotta => Some(6311i32),
            Blocks::OrangeTerracotta => Some(6312i32),
            Blocks::MagentaTerracotta => Some(6313i32),
            Blocks::LightBlueTerracotta => Some(6314i32),
            Blocks::YellowTerracotta => Some(6315i32),
            Blocks::LimeTerracotta => Some(6316i32),
            Blocks::PinkTerracotta => Some(6317i32),
            Blocks::GrayTerracotta => Some(6318i32),
            Blocks::LightGrayTerracotta => Some(6319i32),
            Blocks::CyanTerracotta => Some(6320i32),
            Blocks::PurpleTerracotta => Some(6321i32),
            Blocks::BlueTerracotta => Some(6322i32),
            Blocks::BrownTerracotta => Some(6323i32),
            Blocks::GreenTerracotta => Some(6324i32),
            Blocks::RedTerracotta => Some(6325i32),
            Blocks::BlackTerracotta => Some(6326i32),
            Blocks::WhiteStainedGlassPane(state_unique_falcon) => Some(
                6327i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OrangeStainedGlassPane(state_unique_falcon) => Some(
                6359i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::MagentaStainedGlassPane(state_unique_falcon) => Some(
                6391i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightBlueStainedGlassPane(state_unique_falcon) => Some(
                6423i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::YellowStainedGlassPane(state_unique_falcon) => Some(
                6455i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LimeStainedGlassPane(state_unique_falcon) => Some(
                6487i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PinkStainedGlassPane(state_unique_falcon) => Some(
                6519i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GrayStainedGlassPane(state_unique_falcon) => Some(
                6551i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightGrayStainedGlassPane(state_unique_falcon) => Some(
                6583i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::CyanStainedGlassPane(state_unique_falcon) => Some(
                6615i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PurpleStainedGlassPane(state_unique_falcon) => Some(
                6647i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlueStainedGlassPane(state_unique_falcon) => Some(
                6679i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BrownStainedGlassPane(state_unique_falcon) => Some(
                6711i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GreenStainedGlassPane(state_unique_falcon) => Some(
                6743i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::RedStainedGlassPane(state_unique_falcon) => Some(
                6775i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlackStainedGlassPane(state_unique_falcon) => Some(
                6807i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaStairs(state_unique_falcon) => Some(
                6839i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakStairs(state_unique_falcon) => Some(
                6919i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SlimeBlock => Some(6999i32),
            Blocks::Barrier => Some(7000i32),
            Blocks::IronTrapdoor(state_unique_falcon) => Some(
                7001i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Prismarine => Some(7065i32),
            Blocks::PrismarineBricks => Some(7066i32),
            Blocks::DarkPrismarine => Some(7067i32),
            Blocks::PrismarineStairs(state_unique_falcon) => Some(
                7068i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineBrickStairs(state_unique_falcon) => Some(
                7148i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkPrismarineStairs(state_unique_falcon) => Some(
                7228i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineSlab(state_unique_falcon) => Some(
                7308i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PrismarineBrickSlab(state_unique_falcon) => Some(
                7314i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkPrismarineSlab(state_unique_falcon) => Some(
                7320i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SeaLantern => Some(7326i32),
            Blocks::HayBlock(state_unique_falcon) => {
                Some(7327i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WhiteCarpet => Some(7330i32),
            Blocks::OrangeCarpet => Some(7331i32),
            Blocks::MagentaCarpet => Some(7332i32),
            Blocks::LightBlueCarpet => Some(7333i32),
            Blocks::YellowCarpet => Some(7334i32),
            Blocks::LimeCarpet => Some(7335i32),
            Blocks::PinkCarpet => Some(7336i32),
            Blocks::GrayCarpet => Some(7337i32),
            Blocks::LightGrayCarpet => Some(7338i32),
            Blocks::CyanCarpet => Some(7339i32),
            Blocks::PurpleCarpet => Some(7340i32),
            Blocks::BlueCarpet => Some(7341i32),
            Blocks::BrownCarpet => Some(7342i32),
            Blocks::GreenCarpet => Some(7343i32),
            Blocks::RedCarpet => Some(7344i32),
            Blocks::BlackCarpet => Some(7345i32),
            Blocks::Terracotta => Some(7346i32),
            Blocks::CoalBlock => Some(7347i32),
            Blocks::PackedIce => Some(7348i32),
            Blocks::Sunflower(state_unique_falcon) => {
                Some(7349i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Lilac(state_unique_falcon) => Some(7351i32 + (state_unique_falcon.half as i32)),
            Blocks::RoseBush(state_unique_falcon) => {
                Some(7353i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Peony(state_unique_falcon) => Some(7355i32 + (state_unique_falcon.half as i32)),
            Blocks::TallGrass(state_unique_falcon) => {
                Some(7357i32 + (state_unique_falcon.half as i32))
            }
            Blocks::LargeFern(state_unique_falcon) => {
                Some(7359i32 + (state_unique_falcon.half as i32))
            }
            Blocks::WhiteBanner(state_unique_falcon) => {
                Some(7361i32 + state_unique_falcon.rotation)
            }
            Blocks::OrangeBanner(state_unique_falcon) => {
                Some(7377i32 + state_unique_falcon.rotation)
            }
            Blocks::MagentaBanner(state_unique_falcon) => {
                Some(7393i32 + state_unique_falcon.rotation)
            }
            Blocks::LightBlueBanner(state_unique_falcon) => {
                Some(7409i32 + state_unique_falcon.rotation)
            }
            Blocks::YellowBanner(state_unique_falcon) => {
                Some(7425i32 + state_unique_falcon.rotation)
            }
            Blocks::LimeBanner(state_unique_falcon) => Some(7441i32 + state_unique_falcon.rotation),
            Blocks::PinkBanner(state_unique_falcon) => Some(7457i32 + state_unique_falcon.rotation),
            Blocks::GrayBanner(state_unique_falcon) => Some(7473i32 + state_unique_falcon.rotation),
            Blocks::LightGrayBanner(state_unique_falcon) => {
                Some(7489i32 + state_unique_falcon.rotation)
            }
            Blocks::CyanBanner(state_unique_falcon) => Some(7505i32 + state_unique_falcon.rotation),
            Blocks::PurpleBanner(state_unique_falcon) => {
                Some(7521i32 + state_unique_falcon.rotation)
            }
            Blocks::BlueBanner(state_unique_falcon) => Some(7537i32 + state_unique_falcon.rotation),
            Blocks::BrownBanner(state_unique_falcon) => {
                Some(7553i32 + state_unique_falcon.rotation)
            }
            Blocks::GreenBanner(state_unique_falcon) => {
                Some(7569i32 + state_unique_falcon.rotation)
            }
            Blocks::RedBanner(state_unique_falcon) => Some(7585i32 + state_unique_falcon.rotation),
            Blocks::BlackBanner(state_unique_falcon) => {
                Some(7601i32 + state_unique_falcon.rotation)
            }
            Blocks::WhiteWallBanner(state_unique_falcon) => {
                Some(7617i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeWallBanner(state_unique_falcon) => {
                Some(7621i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaWallBanner(state_unique_falcon) => {
                Some(7625i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueWallBanner(state_unique_falcon) => {
                Some(7629i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowWallBanner(state_unique_falcon) => {
                Some(7633i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeWallBanner(state_unique_falcon) => {
                Some(7637i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkWallBanner(state_unique_falcon) => {
                Some(7641i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayWallBanner(state_unique_falcon) => {
                Some(7645i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayWallBanner(state_unique_falcon) => {
                Some(7649i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanWallBanner(state_unique_falcon) => {
                Some(7653i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleWallBanner(state_unique_falcon) => {
                Some(7657i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueWallBanner(state_unique_falcon) => {
                Some(7661i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownWallBanner(state_unique_falcon) => {
                Some(7665i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenWallBanner(state_unique_falcon) => {
                Some(7669i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedWallBanner(state_unique_falcon) => {
                Some(7673i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackWallBanner(state_unique_falcon) => {
                Some(7677i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedSandstone => Some(7681i32),
            Blocks::ChiseledRedSandstone => Some(7682i32),
            Blocks::CutRedSandstone => Some(7683i32),
            Blocks::RedSandstoneStairs(state_unique_falcon) => Some(
                7684i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSlab(state_unique_falcon) => Some(
                7764i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SpruceSlab(state_unique_falcon) => Some(
                7770i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BirchSlab(state_unique_falcon) => Some(
                7776i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::JungleSlab(state_unique_falcon) => Some(
                7782i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AcaciaSlab(state_unique_falcon) => Some(
                7788i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkOakSlab(state_unique_falcon) => Some(
                7794i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneSlab(state_unique_falcon) => Some(
                7800i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStoneSlab(state_unique_falcon) => Some(
                7806i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SandstoneSlab(state_unique_falcon) => Some(
                7812i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutSandstoneSlab(state_unique_falcon) => Some(
                7818i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PetrifiedOakSlab(state_unique_falcon) => Some(
                7824i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CobblestoneSlab(state_unique_falcon) => Some(
                7830i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickSlab(state_unique_falcon) => Some(
                7836i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneBrickSlab(state_unique_falcon) => Some(
                7842i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::NetherBrickSlab(state_unique_falcon) => Some(
                7848i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::QuartzSlab(state_unique_falcon) => Some(
                7854i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedSandstoneSlab(state_unique_falcon) => Some(
                7860i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutRedSandstoneSlab(state_unique_falcon) => Some(
                7866i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PurpurSlab(state_unique_falcon) => Some(
                7872i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStone => Some(7878i32),
            Blocks::SmoothSandstone => Some(7879i32),
            Blocks::SmoothQuartz => Some(7880i32),
            Blocks::SmoothRedSandstone => Some(7881i32),
            Blocks::SpruceFenceGate(state_unique_falcon) => Some(
                7882i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchFenceGate(state_unique_falcon) => Some(
                7914i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleFenceGate(state_unique_falcon) => Some(
                7946i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaFenceGate(state_unique_falcon) => Some(
                7978i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakFenceGate(state_unique_falcon) => Some(
                8010i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceFence(state_unique_falcon) => Some(
                8042i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BirchFence(state_unique_falcon) => Some(
                8074i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::JungleFence(state_unique_falcon) => Some(
                8106i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaFence(state_unique_falcon) => Some(
                8138i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::DarkOakFence(state_unique_falcon) => Some(
                8170i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::SpruceDoor(state_unique_falcon) => Some(
                8202i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchDoor(state_unique_falcon) => Some(
                8266i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleDoor(state_unique_falcon) => Some(
                8330i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaDoor(state_unique_falcon) => Some(
                8394i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakDoor(state_unique_falcon) => Some(
                8458i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndRod(state_unique_falcon) => {
                Some(8522i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChorusPlant(state_unique_falcon) => Some(
                8528i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::ChorusFlower(state_unique_falcon) => Some(8592i32 + state_unique_falcon.age),
            Blocks::PurpurBlock => Some(8598i32),
            Blocks::PurpurPillar(state_unique_falcon) => {
                Some(8599i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::PurpurStairs(state_unique_falcon) => Some(
                8602i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBricks => Some(8682i32),
            Blocks::Beetroots(state_unique_falcon) => Some(8683i32 + state_unique_falcon.age),
            Blocks::DirtPath => Some(8687i32),
            Blocks::EndGateway => Some(8688i32),
            Blocks::RepeatingCommandBlock(state_unique_falcon) => Some(
                8689i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::ChainCommandBlock(state_unique_falcon) => Some(
                8701i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::FrostedIce(state_unique_falcon) => Some(8713i32 + state_unique_falcon.age),
            Blocks::MagmaBlock => Some(8717i32),
            Blocks::NetherWartBlock => Some(8718i32),
            Blocks::RedNetherBricks => Some(8719i32),
            Blocks::BoneBlock(state_unique_falcon) => {
                Some(8720i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StructureVoid => Some(8723i32),
            Blocks::Observer(state_unique_falcon) => Some(
                8724i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ShulkerBox(state_unique_falcon) => {
                Some(8736i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteShulkerBox(state_unique_falcon) => {
                Some(8742i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeShulkerBox(state_unique_falcon) => {
                Some(8748i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaShulkerBox(state_unique_falcon) => {
                Some(8754i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueShulkerBox(state_unique_falcon) => {
                Some(8760i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowShulkerBox(state_unique_falcon) => {
                Some(8766i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeShulkerBox(state_unique_falcon) => {
                Some(8772i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkShulkerBox(state_unique_falcon) => {
                Some(8778i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayShulkerBox(state_unique_falcon) => {
                Some(8784i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayShulkerBox(state_unique_falcon) => {
                Some(8790i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanShulkerBox(state_unique_falcon) => {
                Some(8796i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleShulkerBox(state_unique_falcon) => {
                Some(8802i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueShulkerBox(state_unique_falcon) => {
                Some(8808i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownShulkerBox(state_unique_falcon) => {
                Some(8814i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenShulkerBox(state_unique_falcon) => {
                Some(8820i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedShulkerBox(state_unique_falcon) => {
                Some(8826i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackShulkerBox(state_unique_falcon) => {
                Some(8832i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteGlazedTerracotta(state_unique_falcon) => {
                Some(8838i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeGlazedTerracotta(state_unique_falcon) => {
                Some(8842i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaGlazedTerracotta(state_unique_falcon) => {
                Some(8846i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueGlazedTerracotta(state_unique_falcon) => {
                Some(8850i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowGlazedTerracotta(state_unique_falcon) => {
                Some(8854i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeGlazedTerracotta(state_unique_falcon) => {
                Some(8858i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkGlazedTerracotta(state_unique_falcon) => {
                Some(8862i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayGlazedTerracotta(state_unique_falcon) => {
                Some(8866i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayGlazedTerracotta(state_unique_falcon) => {
                Some(8870i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanGlazedTerracotta(state_unique_falcon) => {
                Some(8874i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleGlazedTerracotta(state_unique_falcon) => {
                Some(8878i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueGlazedTerracotta(state_unique_falcon) => {
                Some(8882i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownGlazedTerracotta(state_unique_falcon) => {
                Some(8886i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenGlazedTerracotta(state_unique_falcon) => {
                Some(8890i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedGlazedTerracotta(state_unique_falcon) => {
                Some(8894i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackGlazedTerracotta(state_unique_falcon) => {
                Some(8898i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteConcrete => Some(8902i32),
            Blocks::OrangeConcrete => Some(8903i32),
            Blocks::MagentaConcrete => Some(8904i32),
            Blocks::LightBlueConcrete => Some(8905i32),
            Blocks::YellowConcrete => Some(8906i32),
            Blocks::LimeConcrete => Some(8907i32),
            Blocks::PinkConcrete => Some(8908i32),
            Blocks::GrayConcrete => Some(8909i32),
            Blocks::LightGrayConcrete => Some(8910i32),
            Blocks::CyanConcrete => Some(8911i32),
            Blocks::PurpleConcrete => Some(8912i32),
            Blocks::BlueConcrete => Some(8913i32),
            Blocks::BrownConcrete => Some(8914i32),
            Blocks::GreenConcrete => Some(8915i32),
            Blocks::RedConcrete => Some(8916i32),
            Blocks::BlackConcrete => Some(8917i32),
            Blocks::WhiteConcretePowder => Some(8918i32),
            Blocks::OrangeConcretePowder => Some(8919i32),
            Blocks::MagentaConcretePowder => Some(8920i32),
            Blocks::LightBlueConcretePowder => Some(8921i32),
            Blocks::YellowConcretePowder => Some(8922i32),
            Blocks::LimeConcretePowder => Some(8923i32),
            Blocks::PinkConcretePowder => Some(8924i32),
            Blocks::GrayConcretePowder => Some(8925i32),
            Blocks::LightGrayConcretePowder => Some(8926i32),
            Blocks::CyanConcretePowder => Some(8927i32),
            Blocks::PurpleConcretePowder => Some(8928i32),
            Blocks::BlueConcretePowder => Some(8929i32),
            Blocks::BrownConcretePowder => Some(8930i32),
            Blocks::GreenConcretePowder => Some(8931i32),
            Blocks::RedConcretePowder => Some(8932i32),
            Blocks::BlackConcretePowder => Some(8933i32),
            Blocks::Kelp(state_unique_falcon) => Some(8934i32 + state_unique_falcon.age),
            Blocks::KelpPlant => Some(8960i32),
            Blocks::DriedKelpBlock => Some(8961i32),
            Blocks::TurtleEgg(state_unique_falcon) => {
                Some(8962i32 + state_unique_falcon.hatch + 3 * state_unique_falcon.eggs)
            }
            Blocks::DeadTubeCoralBlock => Some(8974i32),
            Blocks::DeadBrainCoralBlock => Some(8975i32),
            Blocks::DeadBubbleCoralBlock => Some(8976i32),
            Blocks::DeadFireCoralBlock => Some(8977i32),
            Blocks::DeadHornCoralBlock => Some(8978i32),
            Blocks::TubeCoralBlock => Some(8979i32),
            Blocks::BrainCoralBlock => Some(8980i32),
            Blocks::BubbleCoralBlock => Some(8981i32),
            Blocks::FireCoralBlock => Some(8982i32),
            Blocks::HornCoralBlock => Some(8983i32),
            Blocks::DeadTubeCoral(state_unique_falcon) => {
                Some(8984i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoral(state_unique_falcon) => {
                Some(8986i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoral(state_unique_falcon) => {
                Some(8988i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoral(state_unique_falcon) => {
                Some(8990i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoral(state_unique_falcon) => {
                Some(8992i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoral(state_unique_falcon) => {
                Some(8994i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoral(state_unique_falcon) => {
                Some(8996i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoral(state_unique_falcon) => {
                Some(8998i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoral(state_unique_falcon) => {
                Some(9000i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoral(state_unique_falcon) => {
                Some(9002i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralFan(state_unique_falcon) => {
                Some(9004i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoralFan(state_unique_falcon) => {
                Some(9006i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoralFan(state_unique_falcon) => {
                Some(9008i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoralFan(state_unique_falcon) => {
                Some(9010i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoralFan(state_unique_falcon) => {
                Some(9012i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoralFan(state_unique_falcon) => {
                Some(9014i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoralFan(state_unique_falcon) => {
                Some(9016i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoralFan(state_unique_falcon) => {
                Some(9018i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoralFan(state_unique_falcon) => {
                Some(9020i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoralFan(state_unique_falcon) => {
                Some(9022i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralWallFan(state_unique_falcon) => Some(
                9024i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBrainCoralWallFan(state_unique_falcon) => Some(
                9032i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBubbleCoralWallFan(state_unique_falcon) => Some(
                9040i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadFireCoralWallFan(state_unique_falcon) => Some(
                9048i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadHornCoralWallFan(state_unique_falcon) => Some(
                9056i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TubeCoralWallFan(state_unique_falcon) => Some(
                9064i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrainCoralWallFan(state_unique_falcon) => Some(
                9072i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BubbleCoralWallFan(state_unique_falcon) => Some(
                9080i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::FireCoralWallFan(state_unique_falcon) => Some(
                9088i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HornCoralWallFan(state_unique_falcon) => Some(
                9096i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SeaPickle(state_unique_falcon) => Some(
                9104i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.pickles,
            ),
            Blocks::BlueIce => Some(9112i32),
            Blocks::Conduit(state_unique_falcon) => {
                Some(9113i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BambooSapling => Some(9115i32),
            Blocks::Bamboo(state_unique_falcon) => Some(
                9116i32
                    + state_unique_falcon.stage
                    + 2 * (state_unique_falcon.leaves as i32)
                    + 6 * state_unique_falcon.age,
            ),
            Blocks::PottedBamboo => Some(9128i32),
            Blocks::VoidAir => Some(9129i32),
            Blocks::CaveAir => Some(9130i32),
            Blocks::BubbleColumn(state_unique_falcon) => {
                Some(9131i32 + (!state_unique_falcon.drag() as i32))
            }
            Blocks::PolishedGraniteStairs(state_unique_falcon) => Some(
                9133i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothRedSandstoneStairs(state_unique_falcon) => Some(
                9213i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MossyStoneBrickStairs(state_unique_falcon) => Some(
                9293i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedDioriteStairs(state_unique_falcon) => Some(
                9373i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MossyCobblestoneStairs(state_unique_falcon) => Some(
                9453i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBrickStairs(state_unique_falcon) => Some(
                9533i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneStairs(state_unique_falcon) => Some(
                9613i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothSandstoneStairs(state_unique_falcon) => Some(
                9693i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothQuartzStairs(state_unique_falcon) => Some(
                9773i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GraniteStairs(state_unique_falcon) => Some(
                9853i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AndesiteStairs(state_unique_falcon) => Some(
                9933i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedNetherBrickStairs(state_unique_falcon) => Some(
                10013i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedAndesiteStairs(state_unique_falcon) => Some(
                10093i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DioriteStairs(state_unique_falcon) => Some(
                10173i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedGraniteSlab(state_unique_falcon) => Some(
                10253i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothRedSandstoneSlab(state_unique_falcon) => Some(
                10259i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::MossyStoneBrickSlab(state_unique_falcon) => Some(
                10265i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedDioriteSlab(state_unique_falcon) => Some(
                10271i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::MossyCobblestoneSlab(state_unique_falcon) => Some(
                10277i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::EndStoneBrickSlab(state_unique_falcon) => Some(
                10283i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothSandstoneSlab(state_unique_falcon) => Some(
                10289i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothQuartzSlab(state_unique_falcon) => Some(
                10295i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::GraniteSlab(state_unique_falcon) => Some(
                10301i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AndesiteSlab(state_unique_falcon) => Some(
                10307i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedNetherBrickSlab(state_unique_falcon) => Some(
                10313i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedAndesiteSlab(state_unique_falcon) => Some(
                10319i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DioriteSlab(state_unique_falcon) => Some(
                10325i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10331i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::PrismarineWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10395i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::RedSandstoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10459i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::MossyStoneBrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10523i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::GraniteWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10587i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::StoneBrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10651i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::NetherBrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10715i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::AndesiteWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10779i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::RedNetherBrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10843i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::SandstoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10907i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::EndStoneBrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10971i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::DioriteWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    11035i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::Scaffolding(state_unique_falcon) => Some(
                11099i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.distance
                    + 16 * (!state_unique_falcon.bottom() as i32),
            ),
            Blocks::Loom(state_unique_falcon) => {
                Some(11131i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Barrel(state_unique_falcon) => Some(
                11135i32
                    + (!state_unique_falcon.open() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Smoker(state_unique_falcon) => Some(
                11147i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlastFurnace(state_unique_falcon) => Some(
                11155i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CartographyTable => Some(11163i32),
            Blocks::FletchingTable => Some(11164i32),
            Blocks::Grindstone(state_unique_falcon) => Some(
                11165i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (state_unique_falcon.face as i32),
            ),
            Blocks::Lectern(state_unique_falcon) => Some(
                11177i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.has_book() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmithingTable => Some(11193i32),
            Blocks::Stonecutter(state_unique_falcon) => {
                Some(11194i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Bell(state_unique_falcon) => Some(
                11198i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.attachment as i32),
            ),
            Blocks::Lantern(state_unique_falcon) => {
                Some(11230i32 + (!state_unique_falcon.hanging() as i32))
            }
            Blocks::Campfire(state_unique_falcon) => Some(
                11232i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.signal_fire() as i32)
                    + 4 * (!state_unique_falcon.lit() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SweetBerryBush(state_unique_falcon) => Some(11264i32 + state_unique_falcon.age),
            Blocks::StructureBlock(state_unique_falcon) => {
                Some(11268i32 + (state_unique_falcon.mode as i32))
            }
            Blocks::Composter(state_unique_falcon) => Some(11278i32 + state_unique_falcon.level),
            Blocks::BeeNest(state_unique_falcon) => Some(
                11287i32
                    + state_unique_falcon.honey_level
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Beehive(state_unique_falcon) => Some(
                11311i32
                    + state_unique_falcon.honey_level
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HoneyBlock => Some(11335i32),
            Blocks::HoneycombBlock => Some(11336i32),
            _ => None,
        }
    }
    pub fn get_global_id_1976(&self) -> Option<i32> {
        match self {
            Blocks::Air => Some(0i32),
            Blocks::Stone => Some(1i32),
            Blocks::Granite => Some(2i32),
            Blocks::PolishedGranite => Some(3i32),
            Blocks::Diorite => Some(4i32),
            Blocks::PolishedDiorite => Some(5i32),
            Blocks::Andesite => Some(6i32),
            Blocks::PolishedAndesite => Some(7i32),
            Blocks::GrassBlock(state_unique_falcon) => {
                Some(8i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Dirt => Some(10i32),
            Blocks::CoarseDirt => Some(11i32),
            Blocks::Podzol(state_unique_falcon) => {
                Some(12i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Cobblestone => Some(14i32),
            Blocks::OakPlanks => Some(15i32),
            Blocks::SprucePlanks => Some(16i32),
            Blocks::BirchPlanks => Some(17i32),
            Blocks::JunglePlanks => Some(18i32),
            Blocks::AcaciaPlanks => Some(19i32),
            Blocks::DarkOakPlanks => Some(20i32),
            Blocks::OakSapling(state_unique_falcon) => Some(21i32 + state_unique_falcon.stage),
            Blocks::SpruceSapling(state_unique_falcon) => Some(23i32 + state_unique_falcon.stage),
            Blocks::BirchSapling(state_unique_falcon) => Some(25i32 + state_unique_falcon.stage),
            Blocks::JungleSapling(state_unique_falcon) => Some(27i32 + state_unique_falcon.stage),
            Blocks::AcaciaSapling(state_unique_falcon) => Some(29i32 + state_unique_falcon.stage),
            Blocks::DarkOakSapling(state_unique_falcon) => Some(31i32 + state_unique_falcon.stage),
            Blocks::Bedrock => Some(33i32),
            Blocks::Water(state_unique_falcon) => Some(34i32 + state_unique_falcon.level),
            Blocks::Lava(state_unique_falcon) => Some(50i32 + state_unique_falcon.level),
            Blocks::Sand => Some(66i32),
            Blocks::RedSand => Some(67i32),
            Blocks::Gravel => Some(68i32),
            Blocks::GoldOre => Some(69i32),
            Blocks::IronOre => Some(70i32),
            Blocks::CoalOre => Some(71i32),
            Blocks::OakLog(state_unique_falcon) => Some(72i32 + (state_unique_falcon.axis as i32)),
            Blocks::SpruceLog(state_unique_falcon) => {
                Some(75i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchLog(state_unique_falcon) => {
                Some(78i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleLog(state_unique_falcon) => {
                Some(81i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaLog(state_unique_falcon) => {
                Some(84i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakLog(state_unique_falcon) => {
                Some(87i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceLog(state_unique_falcon) => {
                Some(90i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchLog(state_unique_falcon) => {
                Some(93i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleLog(state_unique_falcon) => {
                Some(96i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaLog(state_unique_falcon) => {
                Some(99i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakLog(state_unique_falcon) => {
                Some(102i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakLog(state_unique_falcon) => {
                Some(105i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakWood(state_unique_falcon) => {
                Some(108i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SpruceWood(state_unique_falcon) => {
                Some(111i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchWood(state_unique_falcon) => {
                Some(114i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleWood(state_unique_falcon) => {
                Some(117i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaWood(state_unique_falcon) => {
                Some(120i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakWood(state_unique_falcon) => {
                Some(123i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakWood(state_unique_falcon) => {
                Some(126i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceWood(state_unique_falcon) => {
                Some(129i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchWood(state_unique_falcon) => {
                Some(132i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleWood(state_unique_falcon) => {
                Some(135i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaWood(state_unique_falcon) => {
                Some(138i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakWood(state_unique_falcon) => {
                Some(141i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakLeaves(state_unique_falcon) => Some(
                144i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::SpruceLeaves(state_unique_falcon) => Some(
                158i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::BirchLeaves(state_unique_falcon) => Some(
                172i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::JungleLeaves(state_unique_falcon) => Some(
                186i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::AcaciaLeaves(state_unique_falcon) => Some(
                200i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::DarkOakLeaves(state_unique_falcon) => Some(
                214i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::Sponge => Some(228i32),
            Blocks::WetSponge => Some(229i32),
            Blocks::Glass => Some(230i32),
            Blocks::LapisOre => Some(231i32),
            Blocks::LapisBlock => Some(232i32),
            Blocks::Dispenser(state_unique_falcon) => Some(
                233i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Sandstone => Some(245i32),
            Blocks::ChiseledSandstone => Some(246i32),
            Blocks::CutSandstone => Some(247i32),
            Blocks::NoteBlock(state_unique_falcon) => Some(
                248i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * state_unique_falcon.note
                    + 50 * (state_unique_falcon.instrument as i32),
            ),
            Blocks::WhiteBed(state_unique_falcon) => Some(
                1048i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OrangeBed(state_unique_falcon) => Some(
                1064i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MagentaBed(state_unique_falcon) => Some(
                1080i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightBlueBed(state_unique_falcon) => Some(
                1096i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::YellowBed(state_unique_falcon) => Some(
                1112i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LimeBed(state_unique_falcon) => Some(
                1128i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PinkBed(state_unique_falcon) => Some(
                1144i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GrayBed(state_unique_falcon) => Some(
                1160i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightGrayBed(state_unique_falcon) => Some(
                1176i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CyanBed(state_unique_falcon) => Some(
                1192i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PurpleBed(state_unique_falcon) => Some(
                1208i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlueBed(state_unique_falcon) => Some(
                1224i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrownBed(state_unique_falcon) => Some(
                1240i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GreenBed(state_unique_falcon) => Some(
                1256i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedBed(state_unique_falcon) => Some(
                1272i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlackBed(state_unique_falcon) => Some(
                1288i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PoweredRail(state_unique_falcon) => Some(
                1304i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::DetectorRail(state_unique_falcon) => Some(
                1316i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::StickyPiston(state_unique_falcon) => Some(
                1328i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::Cobweb => Some(1340i32),
            Blocks::Grass => Some(1341i32),
            Blocks::Fern => Some(1342i32),
            Blocks::DeadBush => Some(1343i32),
            Blocks::Seagrass => Some(1344i32),
            Blocks::TallSeagrass(state_unique_falcon) => {
                Some(1345i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Piston(state_unique_falcon) => Some(
                1347i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::PistonHead(state_unique_falcon) => Some(
                1359i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (!state_unique_falcon.short() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteWool => Some(1383i32),
            Blocks::OrangeWool => Some(1384i32),
            Blocks::MagentaWool => Some(1385i32),
            Blocks::LightBlueWool => Some(1386i32),
            Blocks::YellowWool => Some(1387i32),
            Blocks::LimeWool => Some(1388i32),
            Blocks::PinkWool => Some(1389i32),
            Blocks::GrayWool => Some(1390i32),
            Blocks::LightGrayWool => Some(1391i32),
            Blocks::CyanWool => Some(1392i32),
            Blocks::PurpleWool => Some(1393i32),
            Blocks::BlueWool => Some(1394i32),
            Blocks::BrownWool => Some(1395i32),
            Blocks::GreenWool => Some(1396i32),
            Blocks::RedWool => Some(1397i32),
            Blocks::BlackWool => Some(1398i32),
            Blocks::MovingPiston(state_unique_falcon) => Some(
                1399i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Dandelion => Some(1411i32),
            Blocks::Poppy => Some(1412i32),
            Blocks::BlueOrchid => Some(1413i32),
            Blocks::Allium => Some(1414i32),
            Blocks::AzureBluet => Some(1415i32),
            Blocks::RedTulip => Some(1416i32),
            Blocks::OrangeTulip => Some(1417i32),
            Blocks::WhiteTulip => Some(1418i32),
            Blocks::PinkTulip => Some(1419i32),
            Blocks::OxeyeDaisy => Some(1420i32),
            Blocks::Cornflower => Some(1421i32),
            Blocks::WitherRose => Some(1422i32),
            Blocks::LilyOfTheValley => Some(1423i32),
            Blocks::BrownMushroom => Some(1424i32),
            Blocks::RedMushroom => Some(1425i32),
            Blocks::GoldBlock => Some(1426i32),
            Blocks::IronBlock => Some(1427i32),
            Blocks::Bricks => Some(1428i32),
            Blocks::Tnt(state_unique_falcon) => {
                Some(1429i32 + (!state_unique_falcon.unstable() as i32))
            }
            Blocks::Bookshelf => Some(1431i32),
            Blocks::MossyCobblestone => Some(1432i32),
            Blocks::Obsidian => Some(1433i32),
            Blocks::Torch => Some(1434i32),
            Blocks::WallTorch(state_unique_falcon) => {
                Some(1435i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Fire(state_unique_falcon) => Some(
                1439i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * state_unique_falcon.age,
            ),
            Blocks::Spawner => Some(1951i32),
            Blocks::OakStairs(state_unique_falcon) => Some(
                1952i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Chest(state_unique_falcon) => Some(
                2032i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedstoneWire(state_unique_falcon) => Some(
                2056i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (state_unique_falcon.south as i32)
                    + 9 * state_unique_falcon.power
                    + 144 * (state_unique_falcon.north as i32)
                    + 432 * (state_unique_falcon.east as i32),
            ),
            Blocks::DiamondOre => Some(3352i32),
            Blocks::DiamondBlock => Some(3353i32),
            Blocks::CraftingTable => Some(3354i32),
            Blocks::Wheat(state_unique_falcon) => Some(3355i32 + state_unique_falcon.age),
            Blocks::Farmland(state_unique_falcon) => Some(3363i32 + state_unique_falcon.moisture),
            Blocks::Furnace(state_unique_falcon) => Some(
                3371i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSign(state_unique_falcon) => Some(
                3379i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::SpruceSign(state_unique_falcon) => Some(
                3411i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::BirchSign(state_unique_falcon) => Some(
                3443i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::AcaciaSign(state_unique_falcon) => Some(
                3475i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::JungleSign(state_unique_falcon) => Some(
                3507i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::DarkOakSign(state_unique_falcon) => Some(
                3539i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::OakDoor(state_unique_falcon) => Some(
                3571i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Ladder(state_unique_falcon) => Some(
                3635i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Rail(state_unique_falcon) => Some(3643i32 + (state_unique_falcon.shape as i32)),
            Blocks::CobblestoneStairs(state_unique_falcon) => Some(
                3653i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakWallSign(state_unique_falcon) => Some(
                3733i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceWallSign(state_unique_falcon) => Some(
                3741i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchWallSign(state_unique_falcon) => Some(
                3749i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaWallSign(state_unique_falcon) => Some(
                3757i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleWallSign(state_unique_falcon) => Some(
                3765i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakWallSign(state_unique_falcon) => Some(
                3773i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Lever(state_unique_falcon) => Some(
                3781i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::StonePressurePlate(state_unique_falcon) => {
                Some(3805i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::IronDoor(state_unique_falcon) => Some(
                3807i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakPressurePlate(state_unique_falcon) => {
                Some(3871i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::SprucePressurePlate(state_unique_falcon) => {
                Some(3873i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::BirchPressurePlate(state_unique_falcon) => {
                Some(3875i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::JunglePressurePlate(state_unique_falcon) => {
                Some(3877i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::AcaciaPressurePlate(state_unique_falcon) => {
                Some(3879i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::DarkOakPressurePlate(state_unique_falcon) => {
                Some(3881i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::RedstoneOre(state_unique_falcon) => {
                Some(3883i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneTorch(state_unique_falcon) => {
                Some(3885i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneWallTorch(state_unique_falcon) => Some(
                3887i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneButton(state_unique_falcon) => Some(
                3895i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::Snow(state_unique_falcon) => Some(3919i32 + state_unique_falcon.layers),
            Blocks::Ice => Some(3927i32),
            Blocks::SnowBlock => Some(3928i32),
            Blocks::Cactus(state_unique_falcon) => Some(3929i32 + state_unique_falcon.age),
            Blocks::Clay => Some(3945i32),
            Blocks::SugarCane(state_unique_falcon) => Some(3946i32 + state_unique_falcon.age),
            Blocks::Jukebox(state_unique_falcon) => {
                Some(3962i32 + (!state_unique_falcon.has_record() as i32))
            }
            Blocks::OakFence(state_unique_falcon) => Some(
                3964i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Pumpkin => Some(3996i32),
            Blocks::Netherrack => Some(3997i32),
            Blocks::SoulSand => Some(3998i32),
            Blocks::Glowstone => Some(3999i32),
            Blocks::NetherPortal(state_unique_falcon) => {
                Some(4000i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CarvedPumpkin(state_unique_falcon) => {
                Some(4002i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::JackOLantern(state_unique_falcon) => {
                Some(4006i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Cake(state_unique_falcon) => Some(4010i32 + state_unique_falcon.bites),
            Blocks::Repeater(state_unique_falcon) => Some(
                4017i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.locked() as i32)
                    + 4 * (state_unique_falcon.facing as i32)
                    + 16 * state_unique_falcon.delay,
            ),
            Blocks::WhiteStainedGlass => Some(4081i32),
            Blocks::OrangeStainedGlass => Some(4082i32),
            Blocks::MagentaStainedGlass => Some(4083i32),
            Blocks::LightBlueStainedGlass => Some(4084i32),
            Blocks::YellowStainedGlass => Some(4085i32),
            Blocks::LimeStainedGlass => Some(4086i32),
            Blocks::PinkStainedGlass => Some(4087i32),
            Blocks::GrayStainedGlass => Some(4088i32),
            Blocks::LightGrayStainedGlass => Some(4089i32),
            Blocks::CyanStainedGlass => Some(4090i32),
            Blocks::PurpleStainedGlass => Some(4091i32),
            Blocks::BlueStainedGlass => Some(4092i32),
            Blocks::BrownStainedGlass => Some(4093i32),
            Blocks::GreenStainedGlass => Some(4094i32),
            Blocks::RedStainedGlass => Some(4095i32),
            Blocks::BlackStainedGlass => Some(4096i32),
            Blocks::OakTrapdoor(state_unique_falcon) => Some(
                4097i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceTrapdoor(state_unique_falcon) => Some(
                4161i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchTrapdoor(state_unique_falcon) => Some(
                4225i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleTrapdoor(state_unique_falcon) => Some(
                4289i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaTrapdoor(state_unique_falcon) => Some(
                4353i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakTrapdoor(state_unique_falcon) => Some(
                4417i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBricks => Some(4481i32),
            Blocks::MossyStoneBricks => Some(4482i32),
            Blocks::CrackedStoneBricks => Some(4483i32),
            Blocks::ChiseledStoneBricks => Some(4484i32),
            Blocks::InfestedStone => Some(4485i32),
            Blocks::InfestedCobblestone => Some(4486i32),
            Blocks::InfestedStoneBricks => Some(4487i32),
            Blocks::InfestedMossyStoneBricks => Some(4488i32),
            Blocks::InfestedCrackedStoneBricks => Some(4489i32),
            Blocks::InfestedChiseledStoneBricks => Some(4490i32),
            Blocks::BrownMushroomBlock(state_unique_falcon) => Some(
                4491i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::RedMushroomBlock(state_unique_falcon) => Some(
                4555i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::MushroomStem(state_unique_falcon) => Some(
                4619i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::IronBars(state_unique_falcon) => Some(
                4683i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GlassPane(state_unique_falcon) => Some(
                4715i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Melon => Some(4747i32),
            Blocks::AttachedPumpkinStem(state_unique_falcon) => {
                Some(4748i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::AttachedMelonStem(state_unique_falcon) => {
                Some(4752i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PumpkinStem(state_unique_falcon) => Some(4756i32 + state_unique_falcon.age),
            Blocks::MelonStem(state_unique_falcon) => Some(4764i32 + state_unique_falcon.age),
            Blocks::Vine(state_unique_falcon) => Some(
                4772i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OakFenceGate(state_unique_falcon) => Some(
                4804i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrickStairs(state_unique_falcon) => Some(
                4836i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBrickStairs(state_unique_falcon) => Some(
                4916i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Mycelium(state_unique_falcon) => {
                Some(4996i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::LilyPad => Some(4998i32),
            Blocks::NetherBricks => Some(4999i32),
            Blocks::NetherBrickFence(state_unique_falcon) => Some(
                5000i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::NetherBrickStairs(state_unique_falcon) => Some(
                5032i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::NetherWart(state_unique_falcon) => Some(5112i32 + state_unique_falcon.age),
            Blocks::EnchantingTable => Some(5116i32),
            Blocks::BrewingStand(state_unique_falcon) => Some(
                5117i32
                    + (!state_unique_falcon.has_bottle_2() as i32)
                    + 2 * (!state_unique_falcon.has_bottle_1() as i32)
                    + 4 * (!state_unique_falcon.has_bottle_0() as i32),
            ),
            Blocks::Cauldron => Some(5125i32),
            Blocks::WaterCauldron(state_unique_falcon) => Some(5126i32 + state_unique_falcon.level),
            Blocks::EndPortal => Some(5129i32),
            Blocks::EndPortalFrame(state_unique_falcon) => Some(
                5130i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (!state_unique_falcon.eye() as i32),
            ),
            Blocks::EndStone => Some(5138i32),
            Blocks::DragonEgg => Some(5139i32),
            Blocks::RedstoneLamp(state_unique_falcon) => {
                Some(5140i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::Cocoa(state_unique_falcon) => {
                Some(5142i32 + (state_unique_falcon.facing as i32) + 4 * state_unique_falcon.age)
            }
            Blocks::SandstoneStairs(state_unique_falcon) => Some(
                5154i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EmeraldOre => Some(5234i32),
            Blocks::EnderChest(state_unique_falcon) => Some(
                5235i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TripwireHook(state_unique_falcon) => Some(
                5243i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::Tripwire(state_unique_falcon) => Some(
                5259i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.south() as i32)
                    + 4 * (!state_unique_falcon.powered() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.disarmed() as i32)
                    + 64 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::EmeraldBlock => Some(5387i32),
            Blocks::SpruceStairs(state_unique_falcon) => Some(
                5388i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchStairs(state_unique_falcon) => Some(
                5468i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleStairs(state_unique_falcon) => Some(
                5548i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CommandBlock(state_unique_falcon) => Some(
                5628i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::Beacon => Some(5640i32),
            Blocks::CobblestoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    5641i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::MossyCobblestoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    5705i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::FlowerPot => Some(5769i32),
            Blocks::PottedOakSapling => Some(5770i32),
            Blocks::PottedSpruceSapling => Some(5771i32),
            Blocks::PottedBirchSapling => Some(5772i32),
            Blocks::PottedJungleSapling => Some(5773i32),
            Blocks::PottedAcaciaSapling => Some(5774i32),
            Blocks::PottedDarkOakSapling => Some(5775i32),
            Blocks::PottedFern => Some(5776i32),
            Blocks::PottedDandelion => Some(5777i32),
            Blocks::PottedPoppy => Some(5778i32),
            Blocks::PottedBlueOrchid => Some(5779i32),
            Blocks::PottedAllium => Some(5780i32),
            Blocks::PottedAzureBluet => Some(5781i32),
            Blocks::PottedRedTulip => Some(5782i32),
            Blocks::PottedOrangeTulip => Some(5783i32),
            Blocks::PottedWhiteTulip => Some(5784i32),
            Blocks::PottedPinkTulip => Some(5785i32),
            Blocks::PottedOxeyeDaisy => Some(5786i32),
            Blocks::PottedCornflower => Some(5787i32),
            Blocks::PottedLilyOfTheValley => Some(5788i32),
            Blocks::PottedWitherRose => Some(5789i32),
            Blocks::PottedRedMushroom => Some(5790i32),
            Blocks::PottedBrownMushroom => Some(5791i32),
            Blocks::PottedDeadBush => Some(5792i32),
            Blocks::PottedCactus => Some(5793i32),
            Blocks::Carrots(state_unique_falcon) => Some(5794i32 + state_unique_falcon.age),
            Blocks::Potatoes(state_unique_falcon) => Some(5802i32 + state_unique_falcon.age),
            Blocks::OakButton(state_unique_falcon) => Some(
                5810i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SpruceButton(state_unique_falcon) => Some(
                5834i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::BirchButton(state_unique_falcon) => Some(
                5858i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::JungleButton(state_unique_falcon) => Some(
                5882i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::AcaciaButton(state_unique_falcon) => Some(
                5906i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::DarkOakButton(state_unique_falcon) => Some(
                5930i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SkeletonSkull(state_unique_falcon) => {
                Some(5954i32 + state_unique_falcon.rotation)
            }
            Blocks::SkeletonWallSkull(state_unique_falcon) => {
                Some(5970i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WitherSkeletonSkull(state_unique_falcon) => {
                Some(5974i32 + state_unique_falcon.rotation)
            }
            Blocks::WitherSkeletonWallSkull(state_unique_falcon) => {
                Some(5990i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ZombieHead(state_unique_falcon) => Some(5994i32 + state_unique_falcon.rotation),
            Blocks::ZombieWallHead(state_unique_falcon) => {
                Some(6010i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PlayerHead(state_unique_falcon) => Some(6014i32 + state_unique_falcon.rotation),
            Blocks::PlayerWallHead(state_unique_falcon) => {
                Some(6030i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CreeperHead(state_unique_falcon) => {
                Some(6034i32 + state_unique_falcon.rotation)
            }
            Blocks::CreeperWallHead(state_unique_falcon) => {
                Some(6050i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DragonHead(state_unique_falcon) => Some(6054i32 + state_unique_falcon.rotation),
            Blocks::DragonWallHead(state_unique_falcon) => {
                Some(6070i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Anvil(state_unique_falcon) => {
                Some(6074i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChippedAnvil(state_unique_falcon) => {
                Some(6078i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DamagedAnvil(state_unique_falcon) => {
                Some(6082i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::TrappedChest(state_unique_falcon) => Some(
                6086i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightWeightedPressurePlate(state_unique_falcon) => {
                Some(6110i32 + state_unique_falcon.power)
            }
            Blocks::HeavyWeightedPressurePlate(state_unique_falcon) => {
                Some(6126i32 + state_unique_falcon.power)
            }
            Blocks::Comparator(state_unique_falcon) => Some(
                6142i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.mode as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DaylightDetector(state_unique_falcon) => Some(
                6158i32 + state_unique_falcon.power + 16 * (!state_unique_falcon.inverted() as i32),
            ),
            Blocks::RedstoneBlock => Some(6190i32),
            Blocks::NetherQuartzOre => Some(6191i32),
            Blocks::Hopper(state_unique_falcon) => Some(
                6192i32
                    + (state_unique_falcon.facing as i32)
                    + 5 * (!state_unique_falcon.enabled() as i32),
            ),
            Blocks::QuartzBlock => Some(6202i32),
            Blocks::ChiseledQuartzBlock => Some(6203i32),
            Blocks::QuartzPillar(state_unique_falcon) => {
                Some(6204i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::QuartzStairs(state_unique_falcon) => Some(
                6207i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ActivatorRail(state_unique_falcon) => Some(
                6287i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::Dropper(state_unique_falcon) => Some(
                6299i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteTerracotta => Some(6311i32),
            Blocks::OrangeTerracotta => Some(6312i32),
            Blocks::MagentaTerracotta => Some(6313i32),
            Blocks::LightBlueTerracotta => Some(6314i32),
            Blocks::YellowTerracotta => Some(6315i32),
            Blocks::LimeTerracotta => Some(6316i32),
            Blocks::PinkTerracotta => Some(6317i32),
            Blocks::GrayTerracotta => Some(6318i32),
            Blocks::LightGrayTerracotta => Some(6319i32),
            Blocks::CyanTerracotta => Some(6320i32),
            Blocks::PurpleTerracotta => Some(6321i32),
            Blocks::BlueTerracotta => Some(6322i32),
            Blocks::BrownTerracotta => Some(6323i32),
            Blocks::GreenTerracotta => Some(6324i32),
            Blocks::RedTerracotta => Some(6325i32),
            Blocks::BlackTerracotta => Some(6326i32),
            Blocks::WhiteStainedGlassPane(state_unique_falcon) => Some(
                6327i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OrangeStainedGlassPane(state_unique_falcon) => Some(
                6359i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::MagentaStainedGlassPane(state_unique_falcon) => Some(
                6391i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightBlueStainedGlassPane(state_unique_falcon) => Some(
                6423i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::YellowStainedGlassPane(state_unique_falcon) => Some(
                6455i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LimeStainedGlassPane(state_unique_falcon) => Some(
                6487i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PinkStainedGlassPane(state_unique_falcon) => Some(
                6519i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GrayStainedGlassPane(state_unique_falcon) => Some(
                6551i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightGrayStainedGlassPane(state_unique_falcon) => Some(
                6583i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::CyanStainedGlassPane(state_unique_falcon) => Some(
                6615i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PurpleStainedGlassPane(state_unique_falcon) => Some(
                6647i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlueStainedGlassPane(state_unique_falcon) => Some(
                6679i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BrownStainedGlassPane(state_unique_falcon) => Some(
                6711i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GreenStainedGlassPane(state_unique_falcon) => Some(
                6743i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::RedStainedGlassPane(state_unique_falcon) => Some(
                6775i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlackStainedGlassPane(state_unique_falcon) => Some(
                6807i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaStairs(state_unique_falcon) => Some(
                6839i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakStairs(state_unique_falcon) => Some(
                6919i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SlimeBlock => Some(6999i32),
            Blocks::Barrier => Some(7000i32),
            Blocks::IronTrapdoor(state_unique_falcon) => Some(
                7001i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Prismarine => Some(7065i32),
            Blocks::PrismarineBricks => Some(7066i32),
            Blocks::DarkPrismarine => Some(7067i32),
            Blocks::PrismarineStairs(state_unique_falcon) => Some(
                7068i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineBrickStairs(state_unique_falcon) => Some(
                7148i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkPrismarineStairs(state_unique_falcon) => Some(
                7228i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineSlab(state_unique_falcon) => Some(
                7308i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PrismarineBrickSlab(state_unique_falcon) => Some(
                7314i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkPrismarineSlab(state_unique_falcon) => Some(
                7320i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SeaLantern => Some(7326i32),
            Blocks::HayBlock(state_unique_falcon) => {
                Some(7327i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WhiteCarpet => Some(7330i32),
            Blocks::OrangeCarpet => Some(7331i32),
            Blocks::MagentaCarpet => Some(7332i32),
            Blocks::LightBlueCarpet => Some(7333i32),
            Blocks::YellowCarpet => Some(7334i32),
            Blocks::LimeCarpet => Some(7335i32),
            Blocks::PinkCarpet => Some(7336i32),
            Blocks::GrayCarpet => Some(7337i32),
            Blocks::LightGrayCarpet => Some(7338i32),
            Blocks::CyanCarpet => Some(7339i32),
            Blocks::PurpleCarpet => Some(7340i32),
            Blocks::BlueCarpet => Some(7341i32),
            Blocks::BrownCarpet => Some(7342i32),
            Blocks::GreenCarpet => Some(7343i32),
            Blocks::RedCarpet => Some(7344i32),
            Blocks::BlackCarpet => Some(7345i32),
            Blocks::Terracotta => Some(7346i32),
            Blocks::CoalBlock => Some(7347i32),
            Blocks::PackedIce => Some(7348i32),
            Blocks::Sunflower(state_unique_falcon) => {
                Some(7349i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Lilac(state_unique_falcon) => Some(7351i32 + (state_unique_falcon.half as i32)),
            Blocks::RoseBush(state_unique_falcon) => {
                Some(7353i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Peony(state_unique_falcon) => Some(7355i32 + (state_unique_falcon.half as i32)),
            Blocks::TallGrass(state_unique_falcon) => {
                Some(7357i32 + (state_unique_falcon.half as i32))
            }
            Blocks::LargeFern(state_unique_falcon) => {
                Some(7359i32 + (state_unique_falcon.half as i32))
            }
            Blocks::WhiteBanner(state_unique_falcon) => {
                Some(7361i32 + state_unique_falcon.rotation)
            }
            Blocks::OrangeBanner(state_unique_falcon) => {
                Some(7377i32 + state_unique_falcon.rotation)
            }
            Blocks::MagentaBanner(state_unique_falcon) => {
                Some(7393i32 + state_unique_falcon.rotation)
            }
            Blocks::LightBlueBanner(state_unique_falcon) => {
                Some(7409i32 + state_unique_falcon.rotation)
            }
            Blocks::YellowBanner(state_unique_falcon) => {
                Some(7425i32 + state_unique_falcon.rotation)
            }
            Blocks::LimeBanner(state_unique_falcon) => Some(7441i32 + state_unique_falcon.rotation),
            Blocks::PinkBanner(state_unique_falcon) => Some(7457i32 + state_unique_falcon.rotation),
            Blocks::GrayBanner(state_unique_falcon) => Some(7473i32 + state_unique_falcon.rotation),
            Blocks::LightGrayBanner(state_unique_falcon) => {
                Some(7489i32 + state_unique_falcon.rotation)
            }
            Blocks::CyanBanner(state_unique_falcon) => Some(7505i32 + state_unique_falcon.rotation),
            Blocks::PurpleBanner(state_unique_falcon) => {
                Some(7521i32 + state_unique_falcon.rotation)
            }
            Blocks::BlueBanner(state_unique_falcon) => Some(7537i32 + state_unique_falcon.rotation),
            Blocks::BrownBanner(state_unique_falcon) => {
                Some(7553i32 + state_unique_falcon.rotation)
            }
            Blocks::GreenBanner(state_unique_falcon) => {
                Some(7569i32 + state_unique_falcon.rotation)
            }
            Blocks::RedBanner(state_unique_falcon) => Some(7585i32 + state_unique_falcon.rotation),
            Blocks::BlackBanner(state_unique_falcon) => {
                Some(7601i32 + state_unique_falcon.rotation)
            }
            Blocks::WhiteWallBanner(state_unique_falcon) => {
                Some(7617i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeWallBanner(state_unique_falcon) => {
                Some(7621i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaWallBanner(state_unique_falcon) => {
                Some(7625i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueWallBanner(state_unique_falcon) => {
                Some(7629i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowWallBanner(state_unique_falcon) => {
                Some(7633i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeWallBanner(state_unique_falcon) => {
                Some(7637i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkWallBanner(state_unique_falcon) => {
                Some(7641i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayWallBanner(state_unique_falcon) => {
                Some(7645i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayWallBanner(state_unique_falcon) => {
                Some(7649i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanWallBanner(state_unique_falcon) => {
                Some(7653i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleWallBanner(state_unique_falcon) => {
                Some(7657i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueWallBanner(state_unique_falcon) => {
                Some(7661i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownWallBanner(state_unique_falcon) => {
                Some(7665i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenWallBanner(state_unique_falcon) => {
                Some(7669i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedWallBanner(state_unique_falcon) => {
                Some(7673i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackWallBanner(state_unique_falcon) => {
                Some(7677i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedSandstone => Some(7681i32),
            Blocks::ChiseledRedSandstone => Some(7682i32),
            Blocks::CutRedSandstone => Some(7683i32),
            Blocks::RedSandstoneStairs(state_unique_falcon) => Some(
                7684i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSlab(state_unique_falcon) => Some(
                7764i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SpruceSlab(state_unique_falcon) => Some(
                7770i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BirchSlab(state_unique_falcon) => Some(
                7776i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::JungleSlab(state_unique_falcon) => Some(
                7782i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AcaciaSlab(state_unique_falcon) => Some(
                7788i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkOakSlab(state_unique_falcon) => Some(
                7794i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneSlab(state_unique_falcon) => Some(
                7800i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStoneSlab(state_unique_falcon) => Some(
                7806i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SandstoneSlab(state_unique_falcon) => Some(
                7812i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutSandstoneSlab(state_unique_falcon) => Some(
                7818i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PetrifiedOakSlab(state_unique_falcon) => Some(
                7824i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CobblestoneSlab(state_unique_falcon) => Some(
                7830i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickSlab(state_unique_falcon) => Some(
                7836i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneBrickSlab(state_unique_falcon) => Some(
                7842i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::NetherBrickSlab(state_unique_falcon) => Some(
                7848i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::QuartzSlab(state_unique_falcon) => Some(
                7854i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedSandstoneSlab(state_unique_falcon) => Some(
                7860i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CutRedSandstoneSlab(state_unique_falcon) => Some(
                7866i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PurpurSlab(state_unique_falcon) => Some(
                7872i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStone => Some(7878i32),
            Blocks::SmoothSandstone => Some(7879i32),
            Blocks::SmoothQuartz => Some(7880i32),
            Blocks::SmoothRedSandstone => Some(7881i32),
            Blocks::SpruceFenceGate(state_unique_falcon) => Some(
                7882i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchFenceGate(state_unique_falcon) => Some(
                7914i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleFenceGate(state_unique_falcon) => Some(
                7946i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaFenceGate(state_unique_falcon) => Some(
                7978i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakFenceGate(state_unique_falcon) => Some(
                8010i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceFence(state_unique_falcon) => Some(
                8042i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BirchFence(state_unique_falcon) => Some(
                8074i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::JungleFence(state_unique_falcon) => Some(
                8106i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaFence(state_unique_falcon) => Some(
                8138i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::DarkOakFence(state_unique_falcon) => Some(
                8170i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::SpruceDoor(state_unique_falcon) => Some(
                8202i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchDoor(state_unique_falcon) => Some(
                8266i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleDoor(state_unique_falcon) => Some(
                8330i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaDoor(state_unique_falcon) => Some(
                8394i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakDoor(state_unique_falcon) => Some(
                8458i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndRod(state_unique_falcon) => {
                Some(8522i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChorusPlant(state_unique_falcon) => Some(
                8528i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::ChorusFlower(state_unique_falcon) => Some(8592i32 + state_unique_falcon.age),
            Blocks::PurpurBlock => Some(8598i32),
            Blocks::PurpurPillar(state_unique_falcon) => {
                Some(8599i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::PurpurStairs(state_unique_falcon) => Some(
                8602i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBricks => Some(8682i32),
            Blocks::Beetroots(state_unique_falcon) => Some(8683i32 + state_unique_falcon.age),
            Blocks::DirtPath => Some(8687i32),
            Blocks::EndGateway => Some(8688i32),
            Blocks::RepeatingCommandBlock(state_unique_falcon) => Some(
                8689i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::ChainCommandBlock(state_unique_falcon) => Some(
                8701i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::FrostedIce(state_unique_falcon) => Some(8713i32 + state_unique_falcon.age),
            Blocks::MagmaBlock => Some(8717i32),
            Blocks::NetherWartBlock => Some(8718i32),
            Blocks::RedNetherBricks => Some(8719i32),
            Blocks::BoneBlock(state_unique_falcon) => {
                Some(8720i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StructureVoid => Some(8723i32),
            Blocks::Observer(state_unique_falcon) => Some(
                8724i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ShulkerBox(state_unique_falcon) => {
                Some(8736i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteShulkerBox(state_unique_falcon) => {
                Some(8742i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeShulkerBox(state_unique_falcon) => {
                Some(8748i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaShulkerBox(state_unique_falcon) => {
                Some(8754i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueShulkerBox(state_unique_falcon) => {
                Some(8760i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowShulkerBox(state_unique_falcon) => {
                Some(8766i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeShulkerBox(state_unique_falcon) => {
                Some(8772i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkShulkerBox(state_unique_falcon) => {
                Some(8778i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayShulkerBox(state_unique_falcon) => {
                Some(8784i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayShulkerBox(state_unique_falcon) => {
                Some(8790i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanShulkerBox(state_unique_falcon) => {
                Some(8796i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleShulkerBox(state_unique_falcon) => {
                Some(8802i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueShulkerBox(state_unique_falcon) => {
                Some(8808i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownShulkerBox(state_unique_falcon) => {
                Some(8814i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenShulkerBox(state_unique_falcon) => {
                Some(8820i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedShulkerBox(state_unique_falcon) => {
                Some(8826i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackShulkerBox(state_unique_falcon) => {
                Some(8832i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteGlazedTerracotta(state_unique_falcon) => {
                Some(8838i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeGlazedTerracotta(state_unique_falcon) => {
                Some(8842i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaGlazedTerracotta(state_unique_falcon) => {
                Some(8846i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueGlazedTerracotta(state_unique_falcon) => {
                Some(8850i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowGlazedTerracotta(state_unique_falcon) => {
                Some(8854i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeGlazedTerracotta(state_unique_falcon) => {
                Some(8858i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkGlazedTerracotta(state_unique_falcon) => {
                Some(8862i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayGlazedTerracotta(state_unique_falcon) => {
                Some(8866i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayGlazedTerracotta(state_unique_falcon) => {
                Some(8870i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanGlazedTerracotta(state_unique_falcon) => {
                Some(8874i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleGlazedTerracotta(state_unique_falcon) => {
                Some(8878i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueGlazedTerracotta(state_unique_falcon) => {
                Some(8882i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownGlazedTerracotta(state_unique_falcon) => {
                Some(8886i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenGlazedTerracotta(state_unique_falcon) => {
                Some(8890i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedGlazedTerracotta(state_unique_falcon) => {
                Some(8894i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackGlazedTerracotta(state_unique_falcon) => {
                Some(8898i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteConcrete => Some(8902i32),
            Blocks::OrangeConcrete => Some(8903i32),
            Blocks::MagentaConcrete => Some(8904i32),
            Blocks::LightBlueConcrete => Some(8905i32),
            Blocks::YellowConcrete => Some(8906i32),
            Blocks::LimeConcrete => Some(8907i32),
            Blocks::PinkConcrete => Some(8908i32),
            Blocks::GrayConcrete => Some(8909i32),
            Blocks::LightGrayConcrete => Some(8910i32),
            Blocks::CyanConcrete => Some(8911i32),
            Blocks::PurpleConcrete => Some(8912i32),
            Blocks::BlueConcrete => Some(8913i32),
            Blocks::BrownConcrete => Some(8914i32),
            Blocks::GreenConcrete => Some(8915i32),
            Blocks::RedConcrete => Some(8916i32),
            Blocks::BlackConcrete => Some(8917i32),
            Blocks::WhiteConcretePowder => Some(8918i32),
            Blocks::OrangeConcretePowder => Some(8919i32),
            Blocks::MagentaConcretePowder => Some(8920i32),
            Blocks::LightBlueConcretePowder => Some(8921i32),
            Blocks::YellowConcretePowder => Some(8922i32),
            Blocks::LimeConcretePowder => Some(8923i32),
            Blocks::PinkConcretePowder => Some(8924i32),
            Blocks::GrayConcretePowder => Some(8925i32),
            Blocks::LightGrayConcretePowder => Some(8926i32),
            Blocks::CyanConcretePowder => Some(8927i32),
            Blocks::PurpleConcretePowder => Some(8928i32),
            Blocks::BlueConcretePowder => Some(8929i32),
            Blocks::BrownConcretePowder => Some(8930i32),
            Blocks::GreenConcretePowder => Some(8931i32),
            Blocks::RedConcretePowder => Some(8932i32),
            Blocks::BlackConcretePowder => Some(8933i32),
            Blocks::Kelp(state_unique_falcon) => Some(8934i32 + state_unique_falcon.age),
            Blocks::KelpPlant => Some(8960i32),
            Blocks::DriedKelpBlock => Some(8961i32),
            Blocks::TurtleEgg(state_unique_falcon) => {
                Some(8962i32 + state_unique_falcon.hatch + 3 * state_unique_falcon.eggs)
            }
            Blocks::DeadTubeCoralBlock => Some(8974i32),
            Blocks::DeadBrainCoralBlock => Some(8975i32),
            Blocks::DeadBubbleCoralBlock => Some(8976i32),
            Blocks::DeadFireCoralBlock => Some(8977i32),
            Blocks::DeadHornCoralBlock => Some(8978i32),
            Blocks::TubeCoralBlock => Some(8979i32),
            Blocks::BrainCoralBlock => Some(8980i32),
            Blocks::BubbleCoralBlock => Some(8981i32),
            Blocks::FireCoralBlock => Some(8982i32),
            Blocks::HornCoralBlock => Some(8983i32),
            Blocks::DeadTubeCoral(state_unique_falcon) => {
                Some(8984i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoral(state_unique_falcon) => {
                Some(8986i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoral(state_unique_falcon) => {
                Some(8988i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoral(state_unique_falcon) => {
                Some(8990i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoral(state_unique_falcon) => {
                Some(8992i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoral(state_unique_falcon) => {
                Some(8994i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoral(state_unique_falcon) => {
                Some(8996i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoral(state_unique_falcon) => {
                Some(8998i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoral(state_unique_falcon) => {
                Some(9000i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoral(state_unique_falcon) => {
                Some(9002i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralFan(state_unique_falcon) => {
                Some(9004i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoralFan(state_unique_falcon) => {
                Some(9006i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoralFan(state_unique_falcon) => {
                Some(9008i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoralFan(state_unique_falcon) => {
                Some(9010i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoralFan(state_unique_falcon) => {
                Some(9012i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoralFan(state_unique_falcon) => {
                Some(9014i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoralFan(state_unique_falcon) => {
                Some(9016i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoralFan(state_unique_falcon) => {
                Some(9018i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoralFan(state_unique_falcon) => {
                Some(9020i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoralFan(state_unique_falcon) => {
                Some(9022i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralWallFan(state_unique_falcon) => Some(
                9024i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBrainCoralWallFan(state_unique_falcon) => Some(
                9032i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBubbleCoralWallFan(state_unique_falcon) => Some(
                9040i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadFireCoralWallFan(state_unique_falcon) => Some(
                9048i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadHornCoralWallFan(state_unique_falcon) => Some(
                9056i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TubeCoralWallFan(state_unique_falcon) => Some(
                9064i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrainCoralWallFan(state_unique_falcon) => Some(
                9072i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BubbleCoralWallFan(state_unique_falcon) => Some(
                9080i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::FireCoralWallFan(state_unique_falcon) => Some(
                9088i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HornCoralWallFan(state_unique_falcon) => Some(
                9096i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SeaPickle(state_unique_falcon) => Some(
                9104i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.pickles,
            ),
            Blocks::BlueIce => Some(9112i32),
            Blocks::Conduit(state_unique_falcon) => {
                Some(9113i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BambooSapling => Some(9115i32),
            Blocks::Bamboo(state_unique_falcon) => Some(
                9116i32
                    + state_unique_falcon.stage
                    + 2 * (state_unique_falcon.leaves as i32)
                    + 6 * state_unique_falcon.age,
            ),
            Blocks::PottedBamboo => Some(9128i32),
            Blocks::VoidAir => Some(9129i32),
            Blocks::CaveAir => Some(9130i32),
            Blocks::BubbleColumn(state_unique_falcon) => {
                Some(9131i32 + (!state_unique_falcon.drag() as i32))
            }
            Blocks::PolishedGraniteStairs(state_unique_falcon) => Some(
                9133i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothRedSandstoneStairs(state_unique_falcon) => Some(
                9213i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MossyStoneBrickStairs(state_unique_falcon) => Some(
                9293i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedDioriteStairs(state_unique_falcon) => Some(
                9373i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MossyCobblestoneStairs(state_unique_falcon) => Some(
                9453i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBrickStairs(state_unique_falcon) => Some(
                9533i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneStairs(state_unique_falcon) => Some(
                9613i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothSandstoneStairs(state_unique_falcon) => Some(
                9693i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmoothQuartzStairs(state_unique_falcon) => Some(
                9773i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GraniteStairs(state_unique_falcon) => Some(
                9853i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AndesiteStairs(state_unique_falcon) => Some(
                9933i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedNetherBrickStairs(state_unique_falcon) => Some(
                10013i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedAndesiteStairs(state_unique_falcon) => Some(
                10093i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DioriteStairs(state_unique_falcon) => Some(
                10173i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PolishedGraniteSlab(state_unique_falcon) => Some(
                10253i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothRedSandstoneSlab(state_unique_falcon) => Some(
                10259i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::MossyStoneBrickSlab(state_unique_falcon) => Some(
                10265i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedDioriteSlab(state_unique_falcon) => Some(
                10271i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::MossyCobblestoneSlab(state_unique_falcon) => Some(
                10277i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::EndStoneBrickSlab(state_unique_falcon) => Some(
                10283i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothSandstoneSlab(state_unique_falcon) => Some(
                10289i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothQuartzSlab(state_unique_falcon) => Some(
                10295i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::GraniteSlab(state_unique_falcon) => Some(
                10301i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AndesiteSlab(state_unique_falcon) => Some(
                10307i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedNetherBrickSlab(state_unique_falcon) => Some(
                10313i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PolishedAndesiteSlab(state_unique_falcon) => Some(
                10319i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DioriteSlab(state_unique_falcon) => Some(
                10325i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10331i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::PrismarineWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10395i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::RedSandstoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10459i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::MossyStoneBrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10523i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::GraniteWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10587i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::StoneBrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10651i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::NetherBrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10715i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::AndesiteWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10779i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::RedNetherBrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10843i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::SandstoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10907i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::EndStoneBrickWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    10971i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::DioriteWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    11035i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::Scaffolding(state_unique_falcon) => Some(
                11099i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.distance
                    + 16 * (!state_unique_falcon.bottom() as i32),
            ),
            Blocks::Loom(state_unique_falcon) => {
                Some(11131i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Barrel(state_unique_falcon) => Some(
                11135i32
                    + (!state_unique_falcon.open() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Smoker(state_unique_falcon) => Some(
                11147i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlastFurnace(state_unique_falcon) => Some(
                11155i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CartographyTable => Some(11163i32),
            Blocks::FletchingTable => Some(11164i32),
            Blocks::Grindstone(state_unique_falcon) => Some(
                11165i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (state_unique_falcon.face as i32),
            ),
            Blocks::Lectern(state_unique_falcon) => Some(
                11177i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.has_book() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SmithingTable => Some(11193i32),
            Blocks::Stonecutter(state_unique_falcon) => {
                Some(11194i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Bell(state_unique_falcon) => Some(
                11198i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (state_unique_falcon.attachment as i32),
            ),
            Blocks::Lantern(state_unique_falcon) => {
                Some(11214i32 + (!state_unique_falcon.hanging() as i32))
            }
            Blocks::Campfire(state_unique_falcon) => Some(
                11216i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.signal_fire() as i32)
                    + 4 * (!state_unique_falcon.lit() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SweetBerryBush(state_unique_falcon) => Some(11248i32 + state_unique_falcon.age),
            Blocks::StructureBlock(state_unique_falcon) => {
                Some(11252i32 + (state_unique_falcon.mode as i32))
            }
            Blocks::Composter(state_unique_falcon) => Some(11262i32 + state_unique_falcon.level),
            _ => None,
        }
    }
    pub fn get_global_id_1631(&self) -> Option<i32> {
        match self {
            Blocks::Air => Some(0i32),
            Blocks::Stone => Some(1i32),
            Blocks::Granite => Some(2i32),
            Blocks::PolishedGranite => Some(3i32),
            Blocks::Diorite => Some(4i32),
            Blocks::PolishedDiorite => Some(5i32),
            Blocks::Andesite => Some(6i32),
            Blocks::PolishedAndesite => Some(7i32),
            Blocks::GrassBlock(state_unique_falcon) => {
                Some(8i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Dirt => Some(10i32),
            Blocks::CoarseDirt => Some(11i32),
            Blocks::Podzol(state_unique_falcon) => {
                Some(12i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Cobblestone => Some(14i32),
            Blocks::OakPlanks => Some(15i32),
            Blocks::SprucePlanks => Some(16i32),
            Blocks::BirchPlanks => Some(17i32),
            Blocks::JunglePlanks => Some(18i32),
            Blocks::AcaciaPlanks => Some(19i32),
            Blocks::DarkOakPlanks => Some(20i32),
            Blocks::OakSapling(state_unique_falcon) => Some(21i32 + state_unique_falcon.stage),
            Blocks::SpruceSapling(state_unique_falcon) => Some(23i32 + state_unique_falcon.stage),
            Blocks::BirchSapling(state_unique_falcon) => Some(25i32 + state_unique_falcon.stage),
            Blocks::JungleSapling(state_unique_falcon) => Some(27i32 + state_unique_falcon.stage),
            Blocks::AcaciaSapling(state_unique_falcon) => Some(29i32 + state_unique_falcon.stage),
            Blocks::DarkOakSapling(state_unique_falcon) => Some(31i32 + state_unique_falcon.stage),
            Blocks::Bedrock => Some(33i32),
            Blocks::Water(state_unique_falcon) => Some(34i32 + state_unique_falcon.level),
            Blocks::Lava(state_unique_falcon) => Some(50i32 + state_unique_falcon.level),
            Blocks::Sand => Some(66i32),
            Blocks::RedSand => Some(67i32),
            Blocks::Gravel => Some(68i32),
            Blocks::GoldOre => Some(69i32),
            Blocks::IronOre => Some(70i32),
            Blocks::CoalOre => Some(71i32),
            Blocks::OakLog(state_unique_falcon) => Some(72i32 + (state_unique_falcon.axis as i32)),
            Blocks::SpruceLog(state_unique_falcon) => {
                Some(75i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchLog(state_unique_falcon) => {
                Some(78i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleLog(state_unique_falcon) => {
                Some(81i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaLog(state_unique_falcon) => {
                Some(84i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakLog(state_unique_falcon) => {
                Some(87i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceLog(state_unique_falcon) => {
                Some(90i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchLog(state_unique_falcon) => {
                Some(93i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleLog(state_unique_falcon) => {
                Some(96i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaLog(state_unique_falcon) => {
                Some(99i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakLog(state_unique_falcon) => {
                Some(102i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakLog(state_unique_falcon) => {
                Some(105i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakWood(state_unique_falcon) => {
                Some(108i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SpruceWood(state_unique_falcon) => {
                Some(111i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchWood(state_unique_falcon) => {
                Some(114i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleWood(state_unique_falcon) => {
                Some(117i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaWood(state_unique_falcon) => {
                Some(120i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakWood(state_unique_falcon) => {
                Some(123i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakWood(state_unique_falcon) => {
                Some(126i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceWood(state_unique_falcon) => {
                Some(129i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchWood(state_unique_falcon) => {
                Some(132i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleWood(state_unique_falcon) => {
                Some(135i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaWood(state_unique_falcon) => {
                Some(138i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakWood(state_unique_falcon) => {
                Some(141i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakLeaves(state_unique_falcon) => Some(
                144i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::SpruceLeaves(state_unique_falcon) => Some(
                158i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::BirchLeaves(state_unique_falcon) => Some(
                172i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::JungleLeaves(state_unique_falcon) => Some(
                186i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::AcaciaLeaves(state_unique_falcon) => Some(
                200i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::DarkOakLeaves(state_unique_falcon) => Some(
                214i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::Sponge => Some(228i32),
            Blocks::WetSponge => Some(229i32),
            Blocks::Glass => Some(230i32),
            Blocks::LapisOre => Some(231i32),
            Blocks::LapisBlock => Some(232i32),
            Blocks::Dispenser(state_unique_falcon) => Some(
                233i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Sandstone => Some(245i32),
            Blocks::ChiseledSandstone => Some(246i32),
            Blocks::CutSandstone => Some(247i32),
            Blocks::NoteBlock(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.instrument {
                    Instrument::Harp => 0,
                    Instrument::Basedrum => 1,
                    Instrument::Snare => 2,
                    Instrument::Hat => 3,
                    Instrument::Bass => 4,
                    Instrument::Flute => 5,
                    Instrument::Bell => 6,
                    Instrument::Guitar => 7,
                    Instrument::Chime => 8,
                    Instrument::Xylophone => 9,
                    _ => return None,
                };
                Some(
                    248i32
                        + (!state_unique_falcon.powered() as i32)
                        + 2 * state_unique_falcon.note
                        + 50 * temp_var_local0,
                )
            }
            Blocks::WhiteBed(state_unique_falcon) => Some(
                748i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OrangeBed(state_unique_falcon) => Some(
                764i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MagentaBed(state_unique_falcon) => Some(
                780i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightBlueBed(state_unique_falcon) => Some(
                796i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::YellowBed(state_unique_falcon) => Some(
                812i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LimeBed(state_unique_falcon) => Some(
                828i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PinkBed(state_unique_falcon) => Some(
                844i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GrayBed(state_unique_falcon) => Some(
                860i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightGrayBed(state_unique_falcon) => Some(
                876i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CyanBed(state_unique_falcon) => Some(
                892i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PurpleBed(state_unique_falcon) => Some(
                908i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlueBed(state_unique_falcon) => Some(
                924i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrownBed(state_unique_falcon) => Some(
                940i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GreenBed(state_unique_falcon) => Some(
                956i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedBed(state_unique_falcon) => Some(
                972i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlackBed(state_unique_falcon) => Some(
                988i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PoweredRail(state_unique_falcon) => Some(
                1004i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::DetectorRail(state_unique_falcon) => Some(
                1016i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::StickyPiston(state_unique_falcon) => Some(
                1028i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::Cobweb => Some(1040i32),
            Blocks::Grass => Some(1041i32),
            Blocks::Fern => Some(1042i32),
            Blocks::DeadBush => Some(1043i32),
            Blocks::Seagrass => Some(1044i32),
            Blocks::TallSeagrass(state_unique_falcon) => {
                Some(1045i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Piston(state_unique_falcon) => Some(
                1047i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::PistonHead(state_unique_falcon) => Some(
                1059i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (!state_unique_falcon.short() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteWool => Some(1083i32),
            Blocks::OrangeWool => Some(1084i32),
            Blocks::MagentaWool => Some(1085i32),
            Blocks::LightBlueWool => Some(1086i32),
            Blocks::YellowWool => Some(1087i32),
            Blocks::LimeWool => Some(1088i32),
            Blocks::PinkWool => Some(1089i32),
            Blocks::GrayWool => Some(1090i32),
            Blocks::LightGrayWool => Some(1091i32),
            Blocks::CyanWool => Some(1092i32),
            Blocks::PurpleWool => Some(1093i32),
            Blocks::BlueWool => Some(1094i32),
            Blocks::BrownWool => Some(1095i32),
            Blocks::GreenWool => Some(1096i32),
            Blocks::RedWool => Some(1097i32),
            Blocks::BlackWool => Some(1098i32),
            Blocks::MovingPiston(state_unique_falcon) => Some(
                1099i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Dandelion => Some(1111i32),
            Blocks::Poppy => Some(1112i32),
            Blocks::BlueOrchid => Some(1113i32),
            Blocks::Allium => Some(1114i32),
            Blocks::AzureBluet => Some(1115i32),
            Blocks::RedTulip => Some(1116i32),
            Blocks::OrangeTulip => Some(1117i32),
            Blocks::WhiteTulip => Some(1118i32),
            Blocks::PinkTulip => Some(1119i32),
            Blocks::OxeyeDaisy => Some(1120i32),
            Blocks::BrownMushroom => Some(1121i32),
            Blocks::RedMushroom => Some(1122i32),
            Blocks::GoldBlock => Some(1123i32),
            Blocks::IronBlock => Some(1124i32),
            Blocks::Bricks => Some(1125i32),
            Blocks::Tnt(state_unique_falcon) => {
                Some(1126i32 + (!state_unique_falcon.unstable() as i32))
            }
            Blocks::Bookshelf => Some(1128i32),
            Blocks::MossyCobblestone => Some(1129i32),
            Blocks::Obsidian => Some(1130i32),
            Blocks::Torch => Some(1131i32),
            Blocks::WallTorch(state_unique_falcon) => {
                Some(1132i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Fire(state_unique_falcon) => Some(
                1136i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * state_unique_falcon.age,
            ),
            Blocks::Spawner => Some(1648i32),
            Blocks::OakStairs(state_unique_falcon) => Some(
                1649i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Chest(state_unique_falcon) => Some(
                1729i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedstoneWire(state_unique_falcon) => Some(
                1753i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (state_unique_falcon.south as i32)
                    + 9 * state_unique_falcon.power
                    + 144 * (state_unique_falcon.north as i32)
                    + 432 * (state_unique_falcon.east as i32),
            ),
            Blocks::DiamondOre => Some(3049i32),
            Blocks::DiamondBlock => Some(3050i32),
            Blocks::CraftingTable => Some(3051i32),
            Blocks::Wheat(state_unique_falcon) => Some(3052i32 + state_unique_falcon.age),
            Blocks::Farmland(state_unique_falcon) => Some(3060i32 + state_unique_falcon.moisture),
            Blocks::Furnace(state_unique_falcon) => Some(
                3068i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSign(state_unique_falcon) => Some(
                3076i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::OakDoor(state_unique_falcon) => Some(
                3108i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Ladder(state_unique_falcon) => Some(
                3172i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Rail(state_unique_falcon) => Some(3180i32 + (state_unique_falcon.shape as i32)),
            Blocks::CobblestoneStairs(state_unique_falcon) => Some(
                3190i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakWallSign(state_unique_falcon) => Some(
                3270i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Lever(state_unique_falcon) => Some(
                3278i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::StonePressurePlate(state_unique_falcon) => {
                Some(3302i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::IronDoor(state_unique_falcon) => Some(
                3304i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakPressurePlate(state_unique_falcon) => {
                Some(3368i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::SprucePressurePlate(state_unique_falcon) => {
                Some(3370i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::BirchPressurePlate(state_unique_falcon) => {
                Some(3372i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::JunglePressurePlate(state_unique_falcon) => {
                Some(3374i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::AcaciaPressurePlate(state_unique_falcon) => {
                Some(3376i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::DarkOakPressurePlate(state_unique_falcon) => {
                Some(3378i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::RedstoneOre(state_unique_falcon) => {
                Some(3380i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneTorch(state_unique_falcon) => {
                Some(3382i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneWallTorch(state_unique_falcon) => Some(
                3384i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneButton(state_unique_falcon) => Some(
                3392i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::Snow(state_unique_falcon) => Some(3416i32 + state_unique_falcon.layers),
            Blocks::Ice => Some(3424i32),
            Blocks::SnowBlock => Some(3425i32),
            Blocks::Cactus(state_unique_falcon) => Some(3426i32 + state_unique_falcon.age),
            Blocks::Clay => Some(3442i32),
            Blocks::SugarCane(state_unique_falcon) => Some(3443i32 + state_unique_falcon.age),
            Blocks::Jukebox(state_unique_falcon) => {
                Some(3459i32 + (!state_unique_falcon.has_record() as i32))
            }
            Blocks::OakFence(state_unique_falcon) => Some(
                3461i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Pumpkin => Some(3493i32),
            Blocks::Netherrack => Some(3494i32),
            Blocks::SoulSand => Some(3495i32),
            Blocks::Glowstone => Some(3496i32),
            Blocks::NetherPortal(state_unique_falcon) => {
                Some(3497i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CarvedPumpkin(state_unique_falcon) => {
                Some(3499i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::JackOLantern(state_unique_falcon) => {
                Some(3503i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Cake(state_unique_falcon) => Some(3507i32 + state_unique_falcon.bites),
            Blocks::Repeater(state_unique_falcon) => Some(
                3514i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.locked() as i32)
                    + 4 * (state_unique_falcon.facing as i32)
                    + 16 * state_unique_falcon.delay,
            ),
            Blocks::WhiteStainedGlass => Some(3578i32),
            Blocks::OrangeStainedGlass => Some(3579i32),
            Blocks::MagentaStainedGlass => Some(3580i32),
            Blocks::LightBlueStainedGlass => Some(3581i32),
            Blocks::YellowStainedGlass => Some(3582i32),
            Blocks::LimeStainedGlass => Some(3583i32),
            Blocks::PinkStainedGlass => Some(3584i32),
            Blocks::GrayStainedGlass => Some(3585i32),
            Blocks::LightGrayStainedGlass => Some(3586i32),
            Blocks::CyanStainedGlass => Some(3587i32),
            Blocks::PurpleStainedGlass => Some(3588i32),
            Blocks::BlueStainedGlass => Some(3589i32),
            Blocks::BrownStainedGlass => Some(3590i32),
            Blocks::GreenStainedGlass => Some(3591i32),
            Blocks::RedStainedGlass => Some(3592i32),
            Blocks::BlackStainedGlass => Some(3593i32),
            Blocks::OakTrapdoor(state_unique_falcon) => Some(
                3594i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceTrapdoor(state_unique_falcon) => Some(
                3658i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchTrapdoor(state_unique_falcon) => Some(
                3722i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleTrapdoor(state_unique_falcon) => Some(
                3786i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaTrapdoor(state_unique_falcon) => Some(
                3850i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakTrapdoor(state_unique_falcon) => Some(
                3914i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::InfestedStone => Some(3978i32),
            Blocks::InfestedCobblestone => Some(3979i32),
            Blocks::InfestedStoneBricks => Some(3980i32),
            Blocks::InfestedMossyStoneBricks => Some(3981i32),
            Blocks::InfestedCrackedStoneBricks => Some(3982i32),
            Blocks::InfestedChiseledStoneBricks => Some(3983i32),
            Blocks::StoneBricks => Some(3984i32),
            Blocks::MossyStoneBricks => Some(3985i32),
            Blocks::CrackedStoneBricks => Some(3986i32),
            Blocks::ChiseledStoneBricks => Some(3987i32),
            Blocks::BrownMushroomBlock(state_unique_falcon) => Some(
                3988i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::RedMushroomBlock(state_unique_falcon) => Some(
                4052i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::MushroomStem(state_unique_falcon) => Some(
                4116i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::IronBars(state_unique_falcon) => Some(
                4180i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GlassPane(state_unique_falcon) => Some(
                4212i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Melon => Some(4244i32),
            Blocks::AttachedPumpkinStem(state_unique_falcon) => {
                Some(4245i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::AttachedMelonStem(state_unique_falcon) => {
                Some(4249i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PumpkinStem(state_unique_falcon) => Some(4253i32 + state_unique_falcon.age),
            Blocks::MelonStem(state_unique_falcon) => Some(4261i32 + state_unique_falcon.age),
            Blocks::Vine(state_unique_falcon) => Some(
                4269i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OakFenceGate(state_unique_falcon) => Some(
                4301i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrickStairs(state_unique_falcon) => Some(
                4333i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBrickStairs(state_unique_falcon) => Some(
                4413i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Mycelium(state_unique_falcon) => {
                Some(4493i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::LilyPad => Some(4495i32),
            Blocks::NetherBricks => Some(4496i32),
            Blocks::NetherBrickFence(state_unique_falcon) => Some(
                4497i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::NetherBrickStairs(state_unique_falcon) => Some(
                4529i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::NetherWart(state_unique_falcon) => Some(4609i32 + state_unique_falcon.age),
            Blocks::EnchantingTable => Some(4613i32),
            Blocks::BrewingStand(state_unique_falcon) => Some(
                4614i32
                    + (!state_unique_falcon.has_bottle_2() as i32)
                    + 2 * (!state_unique_falcon.has_bottle_1() as i32)
                    + 4 * (!state_unique_falcon.has_bottle_0() as i32),
            ),
            Blocks::Cauldron => Some(4622i32),
            Blocks::WaterCauldron(state_unique_falcon) => Some(4623i32 + state_unique_falcon.level),
            Blocks::EndPortal => Some(4626i32),
            Blocks::EndPortalFrame(state_unique_falcon) => Some(
                4627i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (!state_unique_falcon.eye() as i32),
            ),
            Blocks::EndStone => Some(4635i32),
            Blocks::DragonEgg => Some(4636i32),
            Blocks::RedstoneLamp(state_unique_falcon) => {
                Some(4637i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::Cocoa(state_unique_falcon) => {
                Some(4639i32 + (state_unique_falcon.facing as i32) + 4 * state_unique_falcon.age)
            }
            Blocks::SandstoneStairs(state_unique_falcon) => Some(
                4651i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EmeraldOre => Some(4731i32),
            Blocks::EnderChest(state_unique_falcon) => Some(
                4732i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TripwireHook(state_unique_falcon) => Some(
                4740i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::Tripwire(state_unique_falcon) => Some(
                4756i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.south() as i32)
                    + 4 * (!state_unique_falcon.powered() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.disarmed() as i32)
                    + 64 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::EmeraldBlock => Some(4884i32),
            Blocks::SpruceStairs(state_unique_falcon) => Some(
                4885i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchStairs(state_unique_falcon) => Some(
                4965i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleStairs(state_unique_falcon) => Some(
                5045i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CommandBlock(state_unique_falcon) => Some(
                5125i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::Beacon => Some(5137i32),
            Blocks::CobblestoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    5138i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::MossyCobblestoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    5202i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::FlowerPot => Some(5266i32),
            Blocks::PottedOakSapling => Some(5267i32),
            Blocks::PottedSpruceSapling => Some(5268i32),
            Blocks::PottedBirchSapling => Some(5269i32),
            Blocks::PottedJungleSapling => Some(5270i32),
            Blocks::PottedAcaciaSapling => Some(5271i32),
            Blocks::PottedDarkOakSapling => Some(5272i32),
            Blocks::PottedFern => Some(5273i32),
            Blocks::PottedDandelion => Some(5274i32),
            Blocks::PottedPoppy => Some(5275i32),
            Blocks::PottedBlueOrchid => Some(5276i32),
            Blocks::PottedAllium => Some(5277i32),
            Blocks::PottedAzureBluet => Some(5278i32),
            Blocks::PottedRedTulip => Some(5279i32),
            Blocks::PottedOrangeTulip => Some(5280i32),
            Blocks::PottedWhiteTulip => Some(5281i32),
            Blocks::PottedPinkTulip => Some(5282i32),
            Blocks::PottedOxeyeDaisy => Some(5283i32),
            Blocks::PottedRedMushroom => Some(5284i32),
            Blocks::PottedBrownMushroom => Some(5285i32),
            Blocks::PottedDeadBush => Some(5286i32),
            Blocks::PottedCactus => Some(5287i32),
            Blocks::Carrots(state_unique_falcon) => Some(5288i32 + state_unique_falcon.age),
            Blocks::Potatoes(state_unique_falcon) => Some(5296i32 + state_unique_falcon.age),
            Blocks::OakButton(state_unique_falcon) => Some(
                5304i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SpruceButton(state_unique_falcon) => Some(
                5328i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::BirchButton(state_unique_falcon) => Some(
                5352i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::JungleButton(state_unique_falcon) => Some(
                5376i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::AcaciaButton(state_unique_falcon) => Some(
                5400i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::DarkOakButton(state_unique_falcon) => Some(
                5424i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SkeletonWallSkull(state_unique_falcon) => {
                Some(5448i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::SkeletonSkull(state_unique_falcon) => {
                Some(5452i32 + state_unique_falcon.rotation)
            }
            Blocks::WitherSkeletonWallSkull(state_unique_falcon) => {
                Some(5468i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WitherSkeletonSkull(state_unique_falcon) => {
                Some(5472i32 + state_unique_falcon.rotation)
            }
            Blocks::ZombieWallHead(state_unique_falcon) => {
                Some(5488i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ZombieHead(state_unique_falcon) => Some(5492i32 + state_unique_falcon.rotation),
            Blocks::PlayerWallHead(state_unique_falcon) => {
                Some(5508i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PlayerHead(state_unique_falcon) => Some(5512i32 + state_unique_falcon.rotation),
            Blocks::CreeperWallHead(state_unique_falcon) => {
                Some(5528i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CreeperHead(state_unique_falcon) => {
                Some(5532i32 + state_unique_falcon.rotation)
            }
            Blocks::DragonWallHead(state_unique_falcon) => {
                Some(5548i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DragonHead(state_unique_falcon) => Some(5552i32 + state_unique_falcon.rotation),
            Blocks::Anvil(state_unique_falcon) => {
                Some(5568i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChippedAnvil(state_unique_falcon) => {
                Some(5572i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DamagedAnvil(state_unique_falcon) => {
                Some(5576i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::TrappedChest(state_unique_falcon) => Some(
                5580i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightWeightedPressurePlate(state_unique_falcon) => {
                Some(5604i32 + state_unique_falcon.power)
            }
            Blocks::HeavyWeightedPressurePlate(state_unique_falcon) => {
                Some(5620i32 + state_unique_falcon.power)
            }
            Blocks::Comparator(state_unique_falcon) => Some(
                5636i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.mode as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DaylightDetector(state_unique_falcon) => Some(
                5652i32 + state_unique_falcon.power + 16 * (!state_unique_falcon.inverted() as i32),
            ),
            Blocks::RedstoneBlock => Some(5684i32),
            Blocks::NetherQuartzOre => Some(5685i32),
            Blocks::Hopper(state_unique_falcon) => Some(
                5686i32
                    + (state_unique_falcon.facing as i32)
                    + 5 * (!state_unique_falcon.enabled() as i32),
            ),
            Blocks::QuartzBlock => Some(5696i32),
            Blocks::ChiseledQuartzBlock => Some(5697i32),
            Blocks::QuartzPillar(state_unique_falcon) => {
                Some(5698i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::QuartzStairs(state_unique_falcon) => Some(
                5701i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ActivatorRail(state_unique_falcon) => Some(
                5781i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::Dropper(state_unique_falcon) => Some(
                5793i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteTerracotta => Some(5805i32),
            Blocks::OrangeTerracotta => Some(5806i32),
            Blocks::MagentaTerracotta => Some(5807i32),
            Blocks::LightBlueTerracotta => Some(5808i32),
            Blocks::YellowTerracotta => Some(5809i32),
            Blocks::LimeTerracotta => Some(5810i32),
            Blocks::PinkTerracotta => Some(5811i32),
            Blocks::GrayTerracotta => Some(5812i32),
            Blocks::LightGrayTerracotta => Some(5813i32),
            Blocks::CyanTerracotta => Some(5814i32),
            Blocks::PurpleTerracotta => Some(5815i32),
            Blocks::BlueTerracotta => Some(5816i32),
            Blocks::BrownTerracotta => Some(5817i32),
            Blocks::GreenTerracotta => Some(5818i32),
            Blocks::RedTerracotta => Some(5819i32),
            Blocks::BlackTerracotta => Some(5820i32),
            Blocks::WhiteStainedGlassPane(state_unique_falcon) => Some(
                5821i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OrangeStainedGlassPane(state_unique_falcon) => Some(
                5853i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::MagentaStainedGlassPane(state_unique_falcon) => Some(
                5885i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightBlueStainedGlassPane(state_unique_falcon) => Some(
                5917i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::YellowStainedGlassPane(state_unique_falcon) => Some(
                5949i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LimeStainedGlassPane(state_unique_falcon) => Some(
                5981i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PinkStainedGlassPane(state_unique_falcon) => Some(
                6013i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GrayStainedGlassPane(state_unique_falcon) => Some(
                6045i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightGrayStainedGlassPane(state_unique_falcon) => Some(
                6077i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::CyanStainedGlassPane(state_unique_falcon) => Some(
                6109i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PurpleStainedGlassPane(state_unique_falcon) => Some(
                6141i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlueStainedGlassPane(state_unique_falcon) => Some(
                6173i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BrownStainedGlassPane(state_unique_falcon) => Some(
                6205i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GreenStainedGlassPane(state_unique_falcon) => Some(
                6237i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::RedStainedGlassPane(state_unique_falcon) => Some(
                6269i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlackStainedGlassPane(state_unique_falcon) => Some(
                6301i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaStairs(state_unique_falcon) => Some(
                6333i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakStairs(state_unique_falcon) => Some(
                6413i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SlimeBlock => Some(6493i32),
            Blocks::Barrier => Some(6494i32),
            Blocks::IronTrapdoor(state_unique_falcon) => Some(
                6495i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Prismarine => Some(6559i32),
            Blocks::PrismarineBricks => Some(6560i32),
            Blocks::DarkPrismarine => Some(6561i32),
            Blocks::PrismarineStairs(state_unique_falcon) => Some(
                6562i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineBrickStairs(state_unique_falcon) => Some(
                6642i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkPrismarineStairs(state_unique_falcon) => Some(
                6722i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineSlab(state_unique_falcon) => Some(
                6802i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PrismarineBrickSlab(state_unique_falcon) => Some(
                6808i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkPrismarineSlab(state_unique_falcon) => Some(
                6814i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SeaLantern => Some(6820i32),
            Blocks::HayBlock(state_unique_falcon) => {
                Some(6821i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WhiteCarpet => Some(6824i32),
            Blocks::OrangeCarpet => Some(6825i32),
            Blocks::MagentaCarpet => Some(6826i32),
            Blocks::LightBlueCarpet => Some(6827i32),
            Blocks::YellowCarpet => Some(6828i32),
            Blocks::LimeCarpet => Some(6829i32),
            Blocks::PinkCarpet => Some(6830i32),
            Blocks::GrayCarpet => Some(6831i32),
            Blocks::LightGrayCarpet => Some(6832i32),
            Blocks::CyanCarpet => Some(6833i32),
            Blocks::PurpleCarpet => Some(6834i32),
            Blocks::BlueCarpet => Some(6835i32),
            Blocks::BrownCarpet => Some(6836i32),
            Blocks::GreenCarpet => Some(6837i32),
            Blocks::RedCarpet => Some(6838i32),
            Blocks::BlackCarpet => Some(6839i32),
            Blocks::Terracotta => Some(6840i32),
            Blocks::CoalBlock => Some(6841i32),
            Blocks::PackedIce => Some(6842i32),
            Blocks::Sunflower(state_unique_falcon) => {
                Some(6843i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Lilac(state_unique_falcon) => Some(6845i32 + (state_unique_falcon.half as i32)),
            Blocks::RoseBush(state_unique_falcon) => {
                Some(6847i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Peony(state_unique_falcon) => Some(6849i32 + (state_unique_falcon.half as i32)),
            Blocks::TallGrass(state_unique_falcon) => {
                Some(6851i32 + (state_unique_falcon.half as i32))
            }
            Blocks::LargeFern(state_unique_falcon) => {
                Some(6853i32 + (state_unique_falcon.half as i32))
            }
            Blocks::WhiteBanner(state_unique_falcon) => {
                Some(6855i32 + state_unique_falcon.rotation)
            }
            Blocks::OrangeBanner(state_unique_falcon) => {
                Some(6871i32 + state_unique_falcon.rotation)
            }
            Blocks::MagentaBanner(state_unique_falcon) => {
                Some(6887i32 + state_unique_falcon.rotation)
            }
            Blocks::LightBlueBanner(state_unique_falcon) => {
                Some(6903i32 + state_unique_falcon.rotation)
            }
            Blocks::YellowBanner(state_unique_falcon) => {
                Some(6919i32 + state_unique_falcon.rotation)
            }
            Blocks::LimeBanner(state_unique_falcon) => Some(6935i32 + state_unique_falcon.rotation),
            Blocks::PinkBanner(state_unique_falcon) => Some(6951i32 + state_unique_falcon.rotation),
            Blocks::GrayBanner(state_unique_falcon) => Some(6967i32 + state_unique_falcon.rotation),
            Blocks::LightGrayBanner(state_unique_falcon) => {
                Some(6983i32 + state_unique_falcon.rotation)
            }
            Blocks::CyanBanner(state_unique_falcon) => Some(6999i32 + state_unique_falcon.rotation),
            Blocks::PurpleBanner(state_unique_falcon) => {
                Some(7015i32 + state_unique_falcon.rotation)
            }
            Blocks::BlueBanner(state_unique_falcon) => Some(7031i32 + state_unique_falcon.rotation),
            Blocks::BrownBanner(state_unique_falcon) => {
                Some(7047i32 + state_unique_falcon.rotation)
            }
            Blocks::GreenBanner(state_unique_falcon) => {
                Some(7063i32 + state_unique_falcon.rotation)
            }
            Blocks::RedBanner(state_unique_falcon) => Some(7079i32 + state_unique_falcon.rotation),
            Blocks::BlackBanner(state_unique_falcon) => {
                Some(7095i32 + state_unique_falcon.rotation)
            }
            Blocks::WhiteWallBanner(state_unique_falcon) => {
                Some(7111i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeWallBanner(state_unique_falcon) => {
                Some(7115i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaWallBanner(state_unique_falcon) => {
                Some(7119i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueWallBanner(state_unique_falcon) => {
                Some(7123i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowWallBanner(state_unique_falcon) => {
                Some(7127i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeWallBanner(state_unique_falcon) => {
                Some(7131i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkWallBanner(state_unique_falcon) => {
                Some(7135i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayWallBanner(state_unique_falcon) => {
                Some(7139i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayWallBanner(state_unique_falcon) => {
                Some(7143i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanWallBanner(state_unique_falcon) => {
                Some(7147i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleWallBanner(state_unique_falcon) => {
                Some(7151i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueWallBanner(state_unique_falcon) => {
                Some(7155i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownWallBanner(state_unique_falcon) => {
                Some(7159i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenWallBanner(state_unique_falcon) => {
                Some(7163i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedWallBanner(state_unique_falcon) => {
                Some(7167i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackWallBanner(state_unique_falcon) => {
                Some(7171i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedSandstone => Some(7175i32),
            Blocks::ChiseledRedSandstone => Some(7176i32),
            Blocks::CutRedSandstone => Some(7177i32),
            Blocks::RedSandstoneStairs(state_unique_falcon) => Some(
                7178i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSlab(state_unique_falcon) => Some(
                7258i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SpruceSlab(state_unique_falcon) => Some(
                7264i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BirchSlab(state_unique_falcon) => Some(
                7270i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::JungleSlab(state_unique_falcon) => Some(
                7276i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AcaciaSlab(state_unique_falcon) => Some(
                7282i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkOakSlab(state_unique_falcon) => Some(
                7288i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneSlab(state_unique_falcon) => Some(
                7294i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SandstoneSlab(state_unique_falcon) => Some(
                7300i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PetrifiedOakSlab(state_unique_falcon) => Some(
                7306i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CobblestoneSlab(state_unique_falcon) => Some(
                7312i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickSlab(state_unique_falcon) => Some(
                7318i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneBrickSlab(state_unique_falcon) => Some(
                7324i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::NetherBrickSlab(state_unique_falcon) => Some(
                7330i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::QuartzSlab(state_unique_falcon) => Some(
                7336i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedSandstoneSlab(state_unique_falcon) => Some(
                7342i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PurpurSlab(state_unique_falcon) => Some(
                7348i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStone => Some(7354i32),
            Blocks::SmoothSandstone => Some(7355i32),
            Blocks::SmoothQuartz => Some(7356i32),
            Blocks::SmoothRedSandstone => Some(7357i32),
            Blocks::SpruceFenceGate(state_unique_falcon) => Some(
                7358i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchFenceGate(state_unique_falcon) => Some(
                7390i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleFenceGate(state_unique_falcon) => Some(
                7422i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaFenceGate(state_unique_falcon) => Some(
                7454i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakFenceGate(state_unique_falcon) => Some(
                7486i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceFence(state_unique_falcon) => Some(
                7518i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BirchFence(state_unique_falcon) => Some(
                7550i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::JungleFence(state_unique_falcon) => Some(
                7582i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaFence(state_unique_falcon) => Some(
                7614i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::DarkOakFence(state_unique_falcon) => Some(
                7646i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::SpruceDoor(state_unique_falcon) => Some(
                7678i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchDoor(state_unique_falcon) => Some(
                7742i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleDoor(state_unique_falcon) => Some(
                7806i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaDoor(state_unique_falcon) => Some(
                7870i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakDoor(state_unique_falcon) => Some(
                7934i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndRod(state_unique_falcon) => {
                Some(7998i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChorusPlant(state_unique_falcon) => Some(
                8004i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::ChorusFlower(state_unique_falcon) => Some(8068i32 + state_unique_falcon.age),
            Blocks::PurpurBlock => Some(8074i32),
            Blocks::PurpurPillar(state_unique_falcon) => {
                Some(8075i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::PurpurStairs(state_unique_falcon) => Some(
                8078i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBricks => Some(8158i32),
            Blocks::Beetroots(state_unique_falcon) => Some(8159i32 + state_unique_falcon.age),
            Blocks::DirtPath => Some(8163i32),
            Blocks::EndGateway => Some(8164i32),
            Blocks::RepeatingCommandBlock(state_unique_falcon) => Some(
                8165i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::ChainCommandBlock(state_unique_falcon) => Some(
                8177i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::FrostedIce(state_unique_falcon) => Some(8189i32 + state_unique_falcon.age),
            Blocks::MagmaBlock => Some(8193i32),
            Blocks::NetherWartBlock => Some(8194i32),
            Blocks::RedNetherBricks => Some(8195i32),
            Blocks::BoneBlock(state_unique_falcon) => {
                Some(8196i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StructureVoid => Some(8199i32),
            Blocks::Observer(state_unique_falcon) => Some(
                8200i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ShulkerBox(state_unique_falcon) => {
                Some(8212i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteShulkerBox(state_unique_falcon) => {
                Some(8218i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeShulkerBox(state_unique_falcon) => {
                Some(8224i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaShulkerBox(state_unique_falcon) => {
                Some(8230i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueShulkerBox(state_unique_falcon) => {
                Some(8236i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowShulkerBox(state_unique_falcon) => {
                Some(8242i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeShulkerBox(state_unique_falcon) => {
                Some(8248i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkShulkerBox(state_unique_falcon) => {
                Some(8254i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayShulkerBox(state_unique_falcon) => {
                Some(8260i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayShulkerBox(state_unique_falcon) => {
                Some(8266i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanShulkerBox(state_unique_falcon) => {
                Some(8272i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleShulkerBox(state_unique_falcon) => {
                Some(8278i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueShulkerBox(state_unique_falcon) => {
                Some(8284i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownShulkerBox(state_unique_falcon) => {
                Some(8290i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenShulkerBox(state_unique_falcon) => {
                Some(8296i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedShulkerBox(state_unique_falcon) => {
                Some(8302i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackShulkerBox(state_unique_falcon) => {
                Some(8308i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteGlazedTerracotta(state_unique_falcon) => {
                Some(8314i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeGlazedTerracotta(state_unique_falcon) => {
                Some(8318i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaGlazedTerracotta(state_unique_falcon) => {
                Some(8322i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueGlazedTerracotta(state_unique_falcon) => {
                Some(8326i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowGlazedTerracotta(state_unique_falcon) => {
                Some(8330i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeGlazedTerracotta(state_unique_falcon) => {
                Some(8334i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkGlazedTerracotta(state_unique_falcon) => {
                Some(8338i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayGlazedTerracotta(state_unique_falcon) => {
                Some(8342i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayGlazedTerracotta(state_unique_falcon) => {
                Some(8346i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanGlazedTerracotta(state_unique_falcon) => {
                Some(8350i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleGlazedTerracotta(state_unique_falcon) => {
                Some(8354i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueGlazedTerracotta(state_unique_falcon) => {
                Some(8358i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownGlazedTerracotta(state_unique_falcon) => {
                Some(8362i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenGlazedTerracotta(state_unique_falcon) => {
                Some(8366i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedGlazedTerracotta(state_unique_falcon) => {
                Some(8370i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackGlazedTerracotta(state_unique_falcon) => {
                Some(8374i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteConcrete => Some(8378i32),
            Blocks::OrangeConcrete => Some(8379i32),
            Blocks::MagentaConcrete => Some(8380i32),
            Blocks::LightBlueConcrete => Some(8381i32),
            Blocks::YellowConcrete => Some(8382i32),
            Blocks::LimeConcrete => Some(8383i32),
            Blocks::PinkConcrete => Some(8384i32),
            Blocks::GrayConcrete => Some(8385i32),
            Blocks::LightGrayConcrete => Some(8386i32),
            Blocks::CyanConcrete => Some(8387i32),
            Blocks::PurpleConcrete => Some(8388i32),
            Blocks::BlueConcrete => Some(8389i32),
            Blocks::BrownConcrete => Some(8390i32),
            Blocks::GreenConcrete => Some(8391i32),
            Blocks::RedConcrete => Some(8392i32),
            Blocks::BlackConcrete => Some(8393i32),
            Blocks::WhiteConcretePowder => Some(8394i32),
            Blocks::OrangeConcretePowder => Some(8395i32),
            Blocks::MagentaConcretePowder => Some(8396i32),
            Blocks::LightBlueConcretePowder => Some(8397i32),
            Blocks::YellowConcretePowder => Some(8398i32),
            Blocks::LimeConcretePowder => Some(8399i32),
            Blocks::PinkConcretePowder => Some(8400i32),
            Blocks::GrayConcretePowder => Some(8401i32),
            Blocks::LightGrayConcretePowder => Some(8402i32),
            Blocks::CyanConcretePowder => Some(8403i32),
            Blocks::PurpleConcretePowder => Some(8404i32),
            Blocks::BlueConcretePowder => Some(8405i32),
            Blocks::BrownConcretePowder => Some(8406i32),
            Blocks::GreenConcretePowder => Some(8407i32),
            Blocks::RedConcretePowder => Some(8408i32),
            Blocks::BlackConcretePowder => Some(8409i32),
            Blocks::Kelp(state_unique_falcon) => Some(8410i32 + state_unique_falcon.age),
            Blocks::KelpPlant => Some(8436i32),
            Blocks::DriedKelpBlock => Some(8437i32),
            Blocks::TurtleEgg(state_unique_falcon) => {
                Some(8438i32 + state_unique_falcon.hatch + 3 * state_unique_falcon.eggs)
            }
            Blocks::DeadTubeCoralBlock => Some(8450i32),
            Blocks::DeadBrainCoralBlock => Some(8451i32),
            Blocks::DeadBubbleCoralBlock => Some(8452i32),
            Blocks::DeadFireCoralBlock => Some(8453i32),
            Blocks::DeadHornCoralBlock => Some(8454i32),
            Blocks::TubeCoralBlock => Some(8455i32),
            Blocks::BrainCoralBlock => Some(8456i32),
            Blocks::BubbleCoralBlock => Some(8457i32),
            Blocks::FireCoralBlock => Some(8458i32),
            Blocks::HornCoralBlock => Some(8459i32),
            Blocks::DeadTubeCoral(state_unique_falcon) => {
                Some(8460i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoral(state_unique_falcon) => {
                Some(8462i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoral(state_unique_falcon) => {
                Some(8464i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoral(state_unique_falcon) => {
                Some(8466i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoral(state_unique_falcon) => {
                Some(8468i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoral(state_unique_falcon) => {
                Some(8470i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoral(state_unique_falcon) => {
                Some(8472i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoral(state_unique_falcon) => {
                Some(8474i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoral(state_unique_falcon) => {
                Some(8476i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoral(state_unique_falcon) => {
                Some(8478i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadTubeCoralWallFan(state_unique_falcon) => Some(
                8480i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBrainCoralWallFan(state_unique_falcon) => Some(
                8488i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBubbleCoralWallFan(state_unique_falcon) => Some(
                8496i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadFireCoralWallFan(state_unique_falcon) => Some(
                8504i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadHornCoralWallFan(state_unique_falcon) => Some(
                8512i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TubeCoralWallFan(state_unique_falcon) => Some(
                8520i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrainCoralWallFan(state_unique_falcon) => Some(
                8528i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BubbleCoralWallFan(state_unique_falcon) => Some(
                8536i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::FireCoralWallFan(state_unique_falcon) => Some(
                8544i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HornCoralWallFan(state_unique_falcon) => Some(
                8552i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadTubeCoralFan(state_unique_falcon) => {
                Some(8560i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoralFan(state_unique_falcon) => {
                Some(8562i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoralFan(state_unique_falcon) => {
                Some(8564i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoralFan(state_unique_falcon) => {
                Some(8566i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoralFan(state_unique_falcon) => {
                Some(8568i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoralFan(state_unique_falcon) => {
                Some(8570i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoralFan(state_unique_falcon) => {
                Some(8572i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoralFan(state_unique_falcon) => {
                Some(8574i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoralFan(state_unique_falcon) => {
                Some(8576i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoralFan(state_unique_falcon) => {
                Some(8578i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::SeaPickle(state_unique_falcon) => Some(
                8580i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.pickles,
            ),
            Blocks::BlueIce => Some(8588i32),
            Blocks::Conduit(state_unique_falcon) => {
                Some(8589i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::VoidAir => Some(8591i32),
            Blocks::CaveAir => Some(8592i32),
            Blocks::BubbleColumn(state_unique_falcon) => {
                Some(8593i32 + (!state_unique_falcon.drag() as i32))
            }
            Blocks::StructureBlock(state_unique_falcon) => {
                Some(8595i32 + (state_unique_falcon.mode as i32))
            }
            _ => None,
        }
    }
    pub fn get_global_id_1519(&self) -> Option<i32> {
        match self {
            Blocks::Air => Some(0i32),
            Blocks::Stone => Some(1i32),
            Blocks::Granite => Some(2i32),
            Blocks::PolishedGranite => Some(3i32),
            Blocks::Diorite => Some(4i32),
            Blocks::PolishedDiorite => Some(5i32),
            Blocks::Andesite => Some(6i32),
            Blocks::PolishedAndesite => Some(7i32),
            Blocks::GrassBlock(state_unique_falcon) => {
                Some(8i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Dirt => Some(10i32),
            Blocks::CoarseDirt => Some(11i32),
            Blocks::Podzol(state_unique_falcon) => {
                Some(12i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::Cobblestone => Some(14i32),
            Blocks::OakPlanks => Some(15i32),
            Blocks::SprucePlanks => Some(16i32),
            Blocks::BirchPlanks => Some(17i32),
            Blocks::JunglePlanks => Some(18i32),
            Blocks::AcaciaPlanks => Some(19i32),
            Blocks::DarkOakPlanks => Some(20i32),
            Blocks::OakSapling(state_unique_falcon) => Some(21i32 + state_unique_falcon.stage),
            Blocks::SpruceSapling(state_unique_falcon) => Some(23i32 + state_unique_falcon.stage),
            Blocks::BirchSapling(state_unique_falcon) => Some(25i32 + state_unique_falcon.stage),
            Blocks::JungleSapling(state_unique_falcon) => Some(27i32 + state_unique_falcon.stage),
            Blocks::AcaciaSapling(state_unique_falcon) => Some(29i32 + state_unique_falcon.stage),
            Blocks::DarkOakSapling(state_unique_falcon) => Some(31i32 + state_unique_falcon.stage),
            Blocks::Bedrock => Some(33i32),
            Blocks::Water(state_unique_falcon) => Some(34i32 + state_unique_falcon.level),
            Blocks::Lava(state_unique_falcon) => Some(50i32 + state_unique_falcon.level),
            Blocks::Sand => Some(66i32),
            Blocks::RedSand => Some(67i32),
            Blocks::Gravel => Some(68i32),
            Blocks::GoldOre => Some(69i32),
            Blocks::IronOre => Some(70i32),
            Blocks::CoalOre => Some(71i32),
            Blocks::OakLog(state_unique_falcon) => Some(72i32 + (state_unique_falcon.axis as i32)),
            Blocks::SpruceLog(state_unique_falcon) => {
                Some(75i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchLog(state_unique_falcon) => {
                Some(78i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleLog(state_unique_falcon) => {
                Some(81i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaLog(state_unique_falcon) => {
                Some(84i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakLog(state_unique_falcon) => {
                Some(87i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceLog(state_unique_falcon) => {
                Some(90i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchLog(state_unique_falcon) => {
                Some(93i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleLog(state_unique_falcon) => {
                Some(96i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaLog(state_unique_falcon) => {
                Some(99i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakLog(state_unique_falcon) => {
                Some(102i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakLog(state_unique_falcon) => {
                Some(105i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakWood(state_unique_falcon) => {
                Some(108i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::SpruceWood(state_unique_falcon) => {
                Some(111i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::BirchWood(state_unique_falcon) => {
                Some(114i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::JungleWood(state_unique_falcon) => {
                Some(117i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::AcaciaWood(state_unique_falcon) => {
                Some(120i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::DarkOakWood(state_unique_falcon) => {
                Some(123i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedOakWood(state_unique_falcon) => {
                Some(126i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedSpruceWood(state_unique_falcon) => {
                Some(129i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedBirchWood(state_unique_falcon) => {
                Some(132i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedJungleWood(state_unique_falcon) => {
                Some(135i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedAcaciaWood(state_unique_falcon) => {
                Some(138i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StrippedDarkOakWood(state_unique_falcon) => {
                Some(141i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::OakLeaves(state_unique_falcon) => Some(
                144i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::SpruceLeaves(state_unique_falcon) => Some(
                158i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::BirchLeaves(state_unique_falcon) => Some(
                172i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::JungleLeaves(state_unique_falcon) => Some(
                186i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::AcaciaLeaves(state_unique_falcon) => Some(
                200i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::DarkOakLeaves(state_unique_falcon) => Some(
                214i32
                    + (!state_unique_falcon.persistent() as i32)
                    + 2 * state_unique_falcon.distance,
            ),
            Blocks::Sponge => Some(228i32),
            Blocks::WetSponge => Some(229i32),
            Blocks::Glass => Some(230i32),
            Blocks::LapisOre => Some(231i32),
            Blocks::LapisBlock => Some(232i32),
            Blocks::Dispenser(state_unique_falcon) => Some(
                233i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Sandstone => Some(245i32),
            Blocks::ChiseledSandstone => Some(246i32),
            Blocks::CutSandstone => Some(247i32),
            Blocks::NoteBlock(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.instrument {
                    Instrument::Harp => 0,
                    Instrument::Basedrum => 1,
                    Instrument::Snare => 2,
                    Instrument::Hat => 3,
                    Instrument::Bass => 4,
                    Instrument::Flute => 5,
                    Instrument::Bell => 6,
                    Instrument::Guitar => 7,
                    Instrument::Chime => 8,
                    Instrument::Xylophone => 9,
                    _ => return None,
                };
                Some(
                    248i32
                        + (!state_unique_falcon.powered() as i32)
                        + 2 * state_unique_falcon.note
                        + 50 * temp_var_local0,
                )
            }
            Blocks::WhiteBed(state_unique_falcon) => Some(
                748i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OrangeBed(state_unique_falcon) => Some(
                764i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::MagentaBed(state_unique_falcon) => Some(
                780i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightBlueBed(state_unique_falcon) => Some(
                796i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::YellowBed(state_unique_falcon) => Some(
                812i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LimeBed(state_unique_falcon) => Some(
                828i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PinkBed(state_unique_falcon) => Some(
                844i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GrayBed(state_unique_falcon) => Some(
                860i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightGrayBed(state_unique_falcon) => Some(
                876i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CyanBed(state_unique_falcon) => Some(
                892i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PurpleBed(state_unique_falcon) => Some(
                908i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlueBed(state_unique_falcon) => Some(
                924i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrownBed(state_unique_falcon) => Some(
                940i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::GreenBed(state_unique_falcon) => Some(
                956i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedBed(state_unique_falcon) => Some(
                972i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BlackBed(state_unique_falcon) => Some(
                988i32
                    + (state_unique_falcon.part as i32)
                    + 2 * (!state_unique_falcon.occupied() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PoweredRail(state_unique_falcon) => Some(
                1004i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::DetectorRail(state_unique_falcon) => Some(
                1016i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::StickyPiston(state_unique_falcon) => Some(
                1028i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::Cobweb => Some(1040i32),
            Blocks::Grass => Some(1041i32),
            Blocks::Fern => Some(1042i32),
            Blocks::DeadBush => Some(1043i32),
            Blocks::Seagrass => Some(1044i32),
            Blocks::TallSeagrass(state_unique_falcon) => {
                Some(1045i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Piston(state_unique_falcon) => Some(
                1047i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.extended() as i32),
            ),
            Blocks::PistonHead(state_unique_falcon) => Some(
                1059i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (!state_unique_falcon.short() as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteWool => Some(1083i32),
            Blocks::OrangeWool => Some(1084i32),
            Blocks::MagentaWool => Some(1085i32),
            Blocks::LightBlueWool => Some(1086i32),
            Blocks::YellowWool => Some(1087i32),
            Blocks::LimeWool => Some(1088i32),
            Blocks::PinkWool => Some(1089i32),
            Blocks::GrayWool => Some(1090i32),
            Blocks::LightGrayWool => Some(1091i32),
            Blocks::CyanWool => Some(1092i32),
            Blocks::PurpleWool => Some(1093i32),
            Blocks::BlueWool => Some(1094i32),
            Blocks::BrownWool => Some(1095i32),
            Blocks::GreenWool => Some(1096i32),
            Blocks::RedWool => Some(1097i32),
            Blocks::BlackWool => Some(1098i32),
            Blocks::MovingPiston(state_unique_falcon) => Some(
                1099i32
                    + (state_unique_falcon.typed as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Dandelion => Some(1111i32),
            Blocks::Poppy => Some(1112i32),
            Blocks::BlueOrchid => Some(1113i32),
            Blocks::Allium => Some(1114i32),
            Blocks::AzureBluet => Some(1115i32),
            Blocks::RedTulip => Some(1116i32),
            Blocks::OrangeTulip => Some(1117i32),
            Blocks::WhiteTulip => Some(1118i32),
            Blocks::PinkTulip => Some(1119i32),
            Blocks::OxeyeDaisy => Some(1120i32),
            Blocks::BrownMushroom => Some(1121i32),
            Blocks::RedMushroom => Some(1122i32),
            Blocks::GoldBlock => Some(1123i32),
            Blocks::IronBlock => Some(1124i32),
            Blocks::Bricks => Some(1125i32),
            Blocks::Tnt(_) => Some(1126i32),
            Blocks::Bookshelf => Some(1127i32),
            Blocks::MossyCobblestone => Some(1128i32),
            Blocks::Obsidian => Some(1129i32),
            Blocks::Torch => Some(1130i32),
            Blocks::WallTorch(state_unique_falcon) => {
                Some(1131i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Fire(state_unique_falcon) => Some(
                1135i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * state_unique_falcon.age,
            ),
            Blocks::Spawner => Some(1647i32),
            Blocks::OakStairs(state_unique_falcon) => Some(
                1648i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Chest(state_unique_falcon) => Some(
                1728i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::RedstoneWire(state_unique_falcon) => Some(
                1752i32
                    + (state_unique_falcon.west as i32)
                    + 3 * (state_unique_falcon.south as i32)
                    + 9 * state_unique_falcon.power
                    + 144 * (state_unique_falcon.north as i32)
                    + 432 * (state_unique_falcon.east as i32),
            ),
            Blocks::DiamondOre => Some(3048i32),
            Blocks::DiamondBlock => Some(3049i32),
            Blocks::CraftingTable => Some(3050i32),
            Blocks::Wheat(state_unique_falcon) => Some(3051i32 + state_unique_falcon.age),
            Blocks::Farmland(state_unique_falcon) => Some(3059i32 + state_unique_falcon.moisture),
            Blocks::Furnace(state_unique_falcon) => Some(
                3067i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSign(state_unique_falcon) => Some(
                3075i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.rotation,
            ),
            Blocks::OakDoor(state_unique_falcon) => Some(
                3107i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Ladder(state_unique_falcon) => Some(
                3171i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Rail(state_unique_falcon) => Some(3179i32 + (state_unique_falcon.shape as i32)),
            Blocks::CobblestoneStairs(state_unique_falcon) => Some(
                3189i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakWallSign(state_unique_falcon) => Some(
                3269i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Lever(state_unique_falcon) => Some(
                3277i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::StonePressurePlate(state_unique_falcon) => {
                Some(3301i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::IronDoor(state_unique_falcon) => Some(
                3303i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakPressurePlate(state_unique_falcon) => {
                Some(3367i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::SprucePressurePlate(state_unique_falcon) => {
                Some(3369i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::BirchPressurePlate(state_unique_falcon) => {
                Some(3371i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::JunglePressurePlate(state_unique_falcon) => {
                Some(3373i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::AcaciaPressurePlate(state_unique_falcon) => {
                Some(3375i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::DarkOakPressurePlate(state_unique_falcon) => {
                Some(3377i32 + (!state_unique_falcon.powered() as i32))
            }
            Blocks::RedstoneOre(state_unique_falcon) => {
                Some(3379i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneTorch(state_unique_falcon) => {
                Some(3381i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::RedstoneWallTorch(state_unique_falcon) => Some(
                3383i32
                    + (!state_unique_falcon.lit() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneButton(state_unique_falcon) => Some(
                3391i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::Snow(state_unique_falcon) => Some(3415i32 + state_unique_falcon.layers),
            Blocks::Ice => Some(3423i32),
            Blocks::SnowBlock => Some(3424i32),
            Blocks::Cactus(state_unique_falcon) => Some(3425i32 + state_unique_falcon.age),
            Blocks::Clay => Some(3441i32),
            Blocks::SugarCane(state_unique_falcon) => Some(3442i32 + state_unique_falcon.age),
            Blocks::Jukebox(state_unique_falcon) => {
                Some(3458i32 + (!state_unique_falcon.has_record() as i32))
            }
            Blocks::OakFence(state_unique_falcon) => Some(
                3460i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Pumpkin => Some(3492i32),
            Blocks::Netherrack => Some(3493i32),
            Blocks::SoulSand => Some(3494i32),
            Blocks::Glowstone => Some(3495i32),
            Blocks::NetherPortal(state_unique_falcon) => {
                Some(3496i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::CarvedPumpkin(state_unique_falcon) => {
                Some(3498i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::JackOLantern(state_unique_falcon) => {
                Some(3502i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::Cake(state_unique_falcon) => Some(3506i32 + state_unique_falcon.bites),
            Blocks::Repeater(state_unique_falcon) => Some(
                3513i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.locked() as i32)
                    + 4 * (state_unique_falcon.facing as i32)
                    + 16 * state_unique_falcon.delay,
            ),
            Blocks::WhiteStainedGlass => Some(3577i32),
            Blocks::OrangeStainedGlass => Some(3578i32),
            Blocks::MagentaStainedGlass => Some(3579i32),
            Blocks::LightBlueStainedGlass => Some(3580i32),
            Blocks::YellowStainedGlass => Some(3581i32),
            Blocks::LimeStainedGlass => Some(3582i32),
            Blocks::PinkStainedGlass => Some(3583i32),
            Blocks::GrayStainedGlass => Some(3584i32),
            Blocks::LightGrayStainedGlass => Some(3585i32),
            Blocks::CyanStainedGlass => Some(3586i32),
            Blocks::PurpleStainedGlass => Some(3587i32),
            Blocks::BlueStainedGlass => Some(3588i32),
            Blocks::BrownStainedGlass => Some(3589i32),
            Blocks::GreenStainedGlass => Some(3590i32),
            Blocks::RedStainedGlass => Some(3591i32),
            Blocks::BlackStainedGlass => Some(3592i32),
            Blocks::OakTrapdoor(state_unique_falcon) => Some(
                3593i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceTrapdoor(state_unique_falcon) => Some(
                3657i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchTrapdoor(state_unique_falcon) => Some(
                3721i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleTrapdoor(state_unique_falcon) => Some(
                3785i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaTrapdoor(state_unique_falcon) => Some(
                3849i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakTrapdoor(state_unique_falcon) => Some(
                3913i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::InfestedStone => Some(3977i32),
            Blocks::InfestedCobblestone => Some(3978i32),
            Blocks::InfestedStoneBricks => Some(3979i32),
            Blocks::InfestedMossyStoneBricks => Some(3980i32),
            Blocks::InfestedCrackedStoneBricks => Some(3981i32),
            Blocks::InfestedChiseledStoneBricks => Some(3982i32),
            Blocks::StoneBricks => Some(3983i32),
            Blocks::MossyStoneBricks => Some(3984i32),
            Blocks::CrackedStoneBricks => Some(3985i32),
            Blocks::ChiseledStoneBricks => Some(3986i32),
            Blocks::BrownMushroomBlock(state_unique_falcon) => Some(
                3987i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::RedMushroomBlock(state_unique_falcon) => Some(
                4051i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::MushroomStem(state_unique_falcon) => Some(
                4115i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::IronBars(state_unique_falcon) => Some(
                4179i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GlassPane(state_unique_falcon) => Some(
                4211i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::Melon => Some(4243i32),
            Blocks::AttachedPumpkinStem(state_unique_falcon) => {
                Some(4244i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::AttachedMelonStem(state_unique_falcon) => {
                Some(4248i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PumpkinStem(state_unique_falcon) => Some(4252i32 + state_unique_falcon.age),
            Blocks::MelonStem(state_unique_falcon) => Some(4260i32 + state_unique_falcon.age),
            Blocks::Vine(state_unique_falcon) => Some(
                4268i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OakFenceGate(state_unique_falcon) => Some(
                4300i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrickStairs(state_unique_falcon) => Some(
                4332i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::StoneBrickStairs(state_unique_falcon) => Some(
                4412i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Mycelium(state_unique_falcon) => {
                Some(4492i32 + (!state_unique_falcon.snowy() as i32))
            }
            Blocks::LilyPad => Some(4494i32),
            Blocks::NetherBricks => Some(4495i32),
            Blocks::NetherBrickFence(state_unique_falcon) => Some(
                4496i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::NetherBrickStairs(state_unique_falcon) => Some(
                4528i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::NetherWart(state_unique_falcon) => Some(4608i32 + state_unique_falcon.age),
            Blocks::EnchantingTable => Some(4612i32),
            Blocks::BrewingStand(state_unique_falcon) => Some(
                4613i32
                    + (!state_unique_falcon.has_bottle_2() as i32)
                    + 2 * (!state_unique_falcon.has_bottle_1() as i32)
                    + 4 * (!state_unique_falcon.has_bottle_0() as i32),
            ),
            Blocks::Cauldron => Some(4621i32),
            Blocks::WaterCauldron(state_unique_falcon) => Some(4622i32 + state_unique_falcon.level),
            Blocks::EndPortal => Some(4625i32),
            Blocks::EndPortalFrame(state_unique_falcon) => Some(
                4626i32
                    + (state_unique_falcon.facing as i32)
                    + 4 * (!state_unique_falcon.eye() as i32),
            ),
            Blocks::EndStone => Some(4634i32),
            Blocks::DragonEgg => Some(4635i32),
            Blocks::RedstoneLamp(state_unique_falcon) => {
                Some(4636i32 + (!state_unique_falcon.lit() as i32))
            }
            Blocks::Cocoa(state_unique_falcon) => {
                Some(4638i32 + (state_unique_falcon.facing as i32) + 4 * state_unique_falcon.age)
            }
            Blocks::SandstoneStairs(state_unique_falcon) => Some(
                4650i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EmeraldOre => Some(4730i32),
            Blocks::EnderChest(state_unique_falcon) => Some(
                4731i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TripwireHook(state_unique_falcon) => Some(
                4739i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::Tripwire(state_unique_falcon) => Some(
                4755i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.south() as i32)
                    + 4 * (!state_unique_falcon.powered() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.disarmed() as i32)
                    + 64 * (!state_unique_falcon.attached() as i32),
            ),
            Blocks::EmeraldBlock => Some(4883i32),
            Blocks::SpruceStairs(state_unique_falcon) => Some(
                4884i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchStairs(state_unique_falcon) => Some(
                4964i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleStairs(state_unique_falcon) => Some(
                5044i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::CommandBlock(state_unique_falcon) => Some(
                5124i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::Beacon => Some(5136i32),
            Blocks::CobblestoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    5137i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::MossyCobblestoneWall(state_unique_falcon) => {
                let temp_var_local0 = match state_unique_falcon.west {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local1 = match state_unique_falcon.south {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local2 = match state_unique_falcon.north {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                let temp_var_local3 = match state_unique_falcon.east {
                    WallType::Low => 0,
                    WallType::None => 1,
                    _ => return None,
                };
                Some(
                    5201i32
                        + temp_var_local0
                        + 2 * (!state_unique_falcon.waterlogged() as i32)
                        + 4 * (!state_unique_falcon.up() as i32)
                        + 8 * temp_var_local1
                        + 16 * temp_var_local2
                        + 32 * temp_var_local3,
                )
            }
            Blocks::FlowerPot => Some(5265i32),
            Blocks::PottedOakSapling => Some(5266i32),
            Blocks::PottedSpruceSapling => Some(5267i32),
            Blocks::PottedBirchSapling => Some(5268i32),
            Blocks::PottedJungleSapling => Some(5269i32),
            Blocks::PottedAcaciaSapling => Some(5270i32),
            Blocks::PottedDarkOakSapling => Some(5271i32),
            Blocks::PottedFern => Some(5272i32),
            Blocks::PottedDandelion => Some(5273i32),
            Blocks::PottedPoppy => Some(5274i32),
            Blocks::PottedBlueOrchid => Some(5275i32),
            Blocks::PottedAllium => Some(5276i32),
            Blocks::PottedAzureBluet => Some(5277i32),
            Blocks::PottedRedTulip => Some(5278i32),
            Blocks::PottedOrangeTulip => Some(5279i32),
            Blocks::PottedWhiteTulip => Some(5280i32),
            Blocks::PottedPinkTulip => Some(5281i32),
            Blocks::PottedOxeyeDaisy => Some(5282i32),
            Blocks::PottedRedMushroom => Some(5283i32),
            Blocks::PottedBrownMushroom => Some(5284i32),
            Blocks::PottedDeadBush => Some(5285i32),
            Blocks::PottedCactus => Some(5286i32),
            Blocks::Carrots(state_unique_falcon) => Some(5287i32 + state_unique_falcon.age),
            Blocks::Potatoes(state_unique_falcon) => Some(5295i32 + state_unique_falcon.age),
            Blocks::OakButton(state_unique_falcon) => Some(
                5303i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SpruceButton(state_unique_falcon) => Some(
                5327i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::BirchButton(state_unique_falcon) => Some(
                5351i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::JungleButton(state_unique_falcon) => Some(
                5375i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::AcaciaButton(state_unique_falcon) => Some(
                5399i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::DarkOakButton(state_unique_falcon) => Some(
                5423i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32)
                    + 8 * (state_unique_falcon.face as i32),
            ),
            Blocks::SkeletonWallSkull(state_unique_falcon) => {
                Some(5447i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::SkeletonSkull(state_unique_falcon) => {
                Some(5451i32 + state_unique_falcon.rotation)
            }
            Blocks::WitherSkeletonWallSkull(state_unique_falcon) => {
                Some(5467i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WitherSkeletonSkull(state_unique_falcon) => {
                Some(5471i32 + state_unique_falcon.rotation)
            }
            Blocks::ZombieWallHead(state_unique_falcon) => {
                Some(5487i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ZombieHead(state_unique_falcon) => Some(5491i32 + state_unique_falcon.rotation),
            Blocks::PlayerWallHead(state_unique_falcon) => {
                Some(5507i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PlayerHead(state_unique_falcon) => Some(5511i32 + state_unique_falcon.rotation),
            Blocks::CreeperWallHead(state_unique_falcon) => {
                Some(5527i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CreeperHead(state_unique_falcon) => {
                Some(5531i32 + state_unique_falcon.rotation)
            }
            Blocks::DragonWallHead(state_unique_falcon) => {
                Some(5547i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DragonHead(state_unique_falcon) => Some(5551i32 + state_unique_falcon.rotation),
            Blocks::Anvil(state_unique_falcon) => {
                Some(5567i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChippedAnvil(state_unique_falcon) => {
                Some(5571i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::DamagedAnvil(state_unique_falcon) => {
                Some(5575i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::TrappedChest(state_unique_falcon) => Some(
                5579i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32)
                    + 6 * (state_unique_falcon.facing as i32),
            ),
            Blocks::LightWeightedPressurePlate(state_unique_falcon) => {
                Some(5603i32 + state_unique_falcon.power)
            }
            Blocks::HeavyWeightedPressurePlate(state_unique_falcon) => {
                Some(5619i32 + state_unique_falcon.power)
            }
            Blocks::Comparator(state_unique_falcon) => Some(
                5635i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.mode as i32)
                    + 4 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DaylightDetector(state_unique_falcon) => Some(
                5651i32 + state_unique_falcon.power + 16 * (!state_unique_falcon.inverted() as i32),
            ),
            Blocks::RedstoneBlock => Some(5683i32),
            Blocks::NetherQuartzOre => Some(5684i32),
            Blocks::Hopper(state_unique_falcon) => Some(
                5685i32
                    + (state_unique_falcon.facing as i32)
                    + 5 * (!state_unique_falcon.enabled() as i32),
            ),
            Blocks::QuartzBlock => Some(5695i32),
            Blocks::ChiseledQuartzBlock => Some(5696i32),
            Blocks::QuartzPillar(state_unique_falcon) => {
                Some(5697i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::QuartzStairs(state_unique_falcon) => Some(
                5700i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ActivatorRail(state_unique_falcon) => Some(
                5780i32
                    + (state_unique_falcon.shape as i32)
                    + 6 * (!state_unique_falcon.powered() as i32),
            ),
            Blocks::Dropper(state_unique_falcon) => Some(
                5792i32
                    + (!state_unique_falcon.triggered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::WhiteTerracotta => Some(5804i32),
            Blocks::OrangeTerracotta => Some(5805i32),
            Blocks::MagentaTerracotta => Some(5806i32),
            Blocks::LightBlueTerracotta => Some(5807i32),
            Blocks::YellowTerracotta => Some(5808i32),
            Blocks::LimeTerracotta => Some(5809i32),
            Blocks::PinkTerracotta => Some(5810i32),
            Blocks::GrayTerracotta => Some(5811i32),
            Blocks::LightGrayTerracotta => Some(5812i32),
            Blocks::CyanTerracotta => Some(5813i32),
            Blocks::PurpleTerracotta => Some(5814i32),
            Blocks::BlueTerracotta => Some(5815i32),
            Blocks::BrownTerracotta => Some(5816i32),
            Blocks::GreenTerracotta => Some(5817i32),
            Blocks::RedTerracotta => Some(5818i32),
            Blocks::BlackTerracotta => Some(5819i32),
            Blocks::WhiteStainedGlassPane(state_unique_falcon) => Some(
                5820i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::OrangeStainedGlassPane(state_unique_falcon) => Some(
                5852i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::MagentaStainedGlassPane(state_unique_falcon) => Some(
                5884i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightBlueStainedGlassPane(state_unique_falcon) => Some(
                5916i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::YellowStainedGlassPane(state_unique_falcon) => Some(
                5948i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LimeStainedGlassPane(state_unique_falcon) => Some(
                5980i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PinkStainedGlassPane(state_unique_falcon) => Some(
                6012i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GrayStainedGlassPane(state_unique_falcon) => Some(
                6044i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::LightGrayStainedGlassPane(state_unique_falcon) => Some(
                6076i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::CyanStainedGlassPane(state_unique_falcon) => Some(
                6108i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::PurpleStainedGlassPane(state_unique_falcon) => Some(
                6140i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlueStainedGlassPane(state_unique_falcon) => Some(
                6172i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BrownStainedGlassPane(state_unique_falcon) => Some(
                6204i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::GreenStainedGlassPane(state_unique_falcon) => Some(
                6236i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::RedStainedGlassPane(state_unique_falcon) => Some(
                6268i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BlackStainedGlassPane(state_unique_falcon) => Some(
                6300i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaStairs(state_unique_falcon) => Some(
                6332i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakStairs(state_unique_falcon) => Some(
                6412i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SlimeBlock => Some(6492i32),
            Blocks::Barrier => Some(6493i32),
            Blocks::IronTrapdoor(state_unique_falcon) => Some(
                6494i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (!state_unique_falcon.powered() as i32)
                    + 4 * (!state_unique_falcon.open() as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::Prismarine => Some(6558i32),
            Blocks::PrismarineBricks => Some(6559i32),
            Blocks::DarkPrismarine => Some(6560i32),
            Blocks::PrismarineStairs(state_unique_falcon) => Some(
                6561i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineBrickStairs(state_unique_falcon) => Some(
                6641i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkPrismarineStairs(state_unique_falcon) => Some(
                6721i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::PrismarineSlab(state_unique_falcon) => Some(
                6801i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PrismarineBrickSlab(state_unique_falcon) => Some(
                6807i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkPrismarineSlab(state_unique_falcon) => Some(
                6813i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SeaLantern => Some(6819i32),
            Blocks::HayBlock(state_unique_falcon) => {
                Some(6820i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::WhiteCarpet => Some(6823i32),
            Blocks::OrangeCarpet => Some(6824i32),
            Blocks::MagentaCarpet => Some(6825i32),
            Blocks::LightBlueCarpet => Some(6826i32),
            Blocks::YellowCarpet => Some(6827i32),
            Blocks::LimeCarpet => Some(6828i32),
            Blocks::PinkCarpet => Some(6829i32),
            Blocks::GrayCarpet => Some(6830i32),
            Blocks::LightGrayCarpet => Some(6831i32),
            Blocks::CyanCarpet => Some(6832i32),
            Blocks::PurpleCarpet => Some(6833i32),
            Blocks::BlueCarpet => Some(6834i32),
            Blocks::BrownCarpet => Some(6835i32),
            Blocks::GreenCarpet => Some(6836i32),
            Blocks::RedCarpet => Some(6837i32),
            Blocks::BlackCarpet => Some(6838i32),
            Blocks::Terracotta => Some(6839i32),
            Blocks::CoalBlock => Some(6840i32),
            Blocks::PackedIce => Some(6841i32),
            Blocks::Sunflower(state_unique_falcon) => {
                Some(6842i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Lilac(state_unique_falcon) => Some(6844i32 + (state_unique_falcon.half as i32)),
            Blocks::RoseBush(state_unique_falcon) => {
                Some(6846i32 + (state_unique_falcon.half as i32))
            }
            Blocks::Peony(state_unique_falcon) => Some(6848i32 + (state_unique_falcon.half as i32)),
            Blocks::TallGrass(state_unique_falcon) => {
                Some(6850i32 + (state_unique_falcon.half as i32))
            }
            Blocks::LargeFern(state_unique_falcon) => {
                Some(6852i32 + (state_unique_falcon.half as i32))
            }
            Blocks::WhiteBanner(state_unique_falcon) => {
                Some(6854i32 + state_unique_falcon.rotation)
            }
            Blocks::OrangeBanner(state_unique_falcon) => {
                Some(6870i32 + state_unique_falcon.rotation)
            }
            Blocks::MagentaBanner(state_unique_falcon) => {
                Some(6886i32 + state_unique_falcon.rotation)
            }
            Blocks::LightBlueBanner(state_unique_falcon) => {
                Some(6902i32 + state_unique_falcon.rotation)
            }
            Blocks::YellowBanner(state_unique_falcon) => {
                Some(6918i32 + state_unique_falcon.rotation)
            }
            Blocks::LimeBanner(state_unique_falcon) => Some(6934i32 + state_unique_falcon.rotation),
            Blocks::PinkBanner(state_unique_falcon) => Some(6950i32 + state_unique_falcon.rotation),
            Blocks::GrayBanner(state_unique_falcon) => Some(6966i32 + state_unique_falcon.rotation),
            Blocks::LightGrayBanner(state_unique_falcon) => {
                Some(6982i32 + state_unique_falcon.rotation)
            }
            Blocks::CyanBanner(state_unique_falcon) => Some(6998i32 + state_unique_falcon.rotation),
            Blocks::PurpleBanner(state_unique_falcon) => {
                Some(7014i32 + state_unique_falcon.rotation)
            }
            Blocks::BlueBanner(state_unique_falcon) => Some(7030i32 + state_unique_falcon.rotation),
            Blocks::BrownBanner(state_unique_falcon) => {
                Some(7046i32 + state_unique_falcon.rotation)
            }
            Blocks::GreenBanner(state_unique_falcon) => {
                Some(7062i32 + state_unique_falcon.rotation)
            }
            Blocks::RedBanner(state_unique_falcon) => Some(7078i32 + state_unique_falcon.rotation),
            Blocks::BlackBanner(state_unique_falcon) => {
                Some(7094i32 + state_unique_falcon.rotation)
            }
            Blocks::WhiteWallBanner(state_unique_falcon) => {
                Some(7110i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeWallBanner(state_unique_falcon) => {
                Some(7114i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaWallBanner(state_unique_falcon) => {
                Some(7118i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueWallBanner(state_unique_falcon) => {
                Some(7122i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowWallBanner(state_unique_falcon) => {
                Some(7126i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeWallBanner(state_unique_falcon) => {
                Some(7130i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkWallBanner(state_unique_falcon) => {
                Some(7134i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayWallBanner(state_unique_falcon) => {
                Some(7138i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayWallBanner(state_unique_falcon) => {
                Some(7142i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanWallBanner(state_unique_falcon) => {
                Some(7146i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleWallBanner(state_unique_falcon) => {
                Some(7150i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueWallBanner(state_unique_falcon) => {
                Some(7154i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownWallBanner(state_unique_falcon) => {
                Some(7158i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenWallBanner(state_unique_falcon) => {
                Some(7162i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedWallBanner(state_unique_falcon) => {
                Some(7166i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackWallBanner(state_unique_falcon) => {
                Some(7170i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedSandstone => Some(7174i32),
            Blocks::ChiseledRedSandstone => Some(7175i32),
            Blocks::CutRedSandstone => Some(7176i32),
            Blocks::RedSandstoneStairs(state_unique_falcon) => Some(
                7177i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::OakSlab(state_unique_falcon) => Some(
                7257i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SpruceSlab(state_unique_falcon) => Some(
                7263i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BirchSlab(state_unique_falcon) => Some(
                7269i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::JungleSlab(state_unique_falcon) => Some(
                7275i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::AcaciaSlab(state_unique_falcon) => Some(
                7281i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::DarkOakSlab(state_unique_falcon) => Some(
                7287i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneSlab(state_unique_falcon) => Some(
                7293i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SandstoneSlab(state_unique_falcon) => Some(
                7299i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PetrifiedOakSlab(state_unique_falcon) => Some(
                7305i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::CobblestoneSlab(state_unique_falcon) => Some(
                7311i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::BrickSlab(state_unique_falcon) => Some(
                7317i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::StoneBrickSlab(state_unique_falcon) => Some(
                7323i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::NetherBrickSlab(state_unique_falcon) => Some(
                7329i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::QuartzSlab(state_unique_falcon) => Some(
                7335i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::RedSandstoneSlab(state_unique_falcon) => Some(
                7341i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::PurpurSlab(state_unique_falcon) => Some(
                7347i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.typed as i32),
            ),
            Blocks::SmoothStone => Some(7353i32),
            Blocks::SmoothSandstone => Some(7354i32),
            Blocks::SmoothQuartz => Some(7355i32),
            Blocks::SmoothRedSandstone => Some(7356i32),
            Blocks::SpruceFenceGate(state_unique_falcon) => Some(
                7357i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchFenceGate(state_unique_falcon) => Some(
                7389i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleFenceGate(state_unique_falcon) => Some(
                7421i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaFenceGate(state_unique_falcon) => Some(
                7453i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakFenceGate(state_unique_falcon) => Some(
                7485i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (!state_unique_falcon.in_wall() as i32)
                    + 8 * (state_unique_falcon.facing as i32),
            ),
            Blocks::SpruceFence(state_unique_falcon) => Some(
                7517i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::BirchFence(state_unique_falcon) => Some(
                7549i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::JungleFence(state_unique_falcon) => Some(
                7581i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::AcaciaFence(state_unique_falcon) => Some(
                7613i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::DarkOakFence(state_unique_falcon) => Some(
                7645i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.waterlogged() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32),
            ),
            Blocks::SpruceDoor(state_unique_falcon) => Some(
                7677i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BirchDoor(state_unique_falcon) => Some(
                7741i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::JungleDoor(state_unique_falcon) => Some(
                7805i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::AcaciaDoor(state_unique_falcon) => Some(
                7869i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DarkOakDoor(state_unique_falcon) => Some(
                7933i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (!state_unique_falcon.open() as i32)
                    + 4 * (state_unique_falcon.hinge as i32)
                    + 8 * (state_unique_falcon.half as i32)
                    + 16 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndRod(state_unique_falcon) => {
                Some(7997i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::ChorusPlant(state_unique_falcon) => Some(
                8003i32
                    + (!state_unique_falcon.west() as i32)
                    + 2 * (!state_unique_falcon.up() as i32)
                    + 4 * (!state_unique_falcon.south() as i32)
                    + 8 * (!state_unique_falcon.north() as i32)
                    + 16 * (!state_unique_falcon.east() as i32)
                    + 32 * (!state_unique_falcon.down() as i32),
            ),
            Blocks::ChorusFlower(state_unique_falcon) => Some(8067i32 + state_unique_falcon.age),
            Blocks::PurpurBlock => Some(8073i32),
            Blocks::PurpurPillar(state_unique_falcon) => {
                Some(8074i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::PurpurStairs(state_unique_falcon) => Some(
                8077i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.shape as i32)
                    + 10 * (state_unique_falcon.half as i32)
                    + 20 * (state_unique_falcon.facing as i32),
            ),
            Blocks::EndStoneBricks => Some(8157i32),
            Blocks::Beetroots(state_unique_falcon) => Some(8158i32 + state_unique_falcon.age),
            Blocks::DirtPath => Some(8162i32),
            Blocks::EndGateway => Some(8163i32),
            Blocks::RepeatingCommandBlock(state_unique_falcon) => Some(
                8164i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::ChainCommandBlock(state_unique_falcon) => Some(
                8176i32
                    + (state_unique_falcon.facing as i32)
                    + 6 * (!state_unique_falcon.conditional() as i32),
            ),
            Blocks::FrostedIce(state_unique_falcon) => Some(8188i32 + state_unique_falcon.age),
            Blocks::MagmaBlock => Some(8192i32),
            Blocks::NetherWartBlock => Some(8193i32),
            Blocks::RedNetherBricks => Some(8194i32),
            Blocks::BoneBlock(state_unique_falcon) => {
                Some(8195i32 + (state_unique_falcon.axis as i32))
            }
            Blocks::StructureVoid => Some(8198i32),
            Blocks::Observer(state_unique_falcon) => Some(
                8199i32
                    + (!state_unique_falcon.powered() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::ShulkerBox(state_unique_falcon) => {
                Some(8211i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteShulkerBox(state_unique_falcon) => {
                Some(8217i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeShulkerBox(state_unique_falcon) => {
                Some(8223i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaShulkerBox(state_unique_falcon) => {
                Some(8229i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueShulkerBox(state_unique_falcon) => {
                Some(8235i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowShulkerBox(state_unique_falcon) => {
                Some(8241i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeShulkerBox(state_unique_falcon) => {
                Some(8247i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkShulkerBox(state_unique_falcon) => {
                Some(8253i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayShulkerBox(state_unique_falcon) => {
                Some(8259i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayShulkerBox(state_unique_falcon) => {
                Some(8265i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanShulkerBox(state_unique_falcon) => {
                Some(8271i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleShulkerBox(state_unique_falcon) => {
                Some(8277i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueShulkerBox(state_unique_falcon) => {
                Some(8283i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownShulkerBox(state_unique_falcon) => {
                Some(8289i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenShulkerBox(state_unique_falcon) => {
                Some(8295i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedShulkerBox(state_unique_falcon) => {
                Some(8301i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackShulkerBox(state_unique_falcon) => {
                Some(8307i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteGlazedTerracotta(state_unique_falcon) => {
                Some(8313i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::OrangeGlazedTerracotta(state_unique_falcon) => {
                Some(8317i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::MagentaGlazedTerracotta(state_unique_falcon) => {
                Some(8321i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightBlueGlazedTerracotta(state_unique_falcon) => {
                Some(8325i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::YellowGlazedTerracotta(state_unique_falcon) => {
                Some(8329i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LimeGlazedTerracotta(state_unique_falcon) => {
                Some(8333i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PinkGlazedTerracotta(state_unique_falcon) => {
                Some(8337i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GrayGlazedTerracotta(state_unique_falcon) => {
                Some(8341i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::LightGrayGlazedTerracotta(state_unique_falcon) => {
                Some(8345i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::CyanGlazedTerracotta(state_unique_falcon) => {
                Some(8349i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::PurpleGlazedTerracotta(state_unique_falcon) => {
                Some(8353i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlueGlazedTerracotta(state_unique_falcon) => {
                Some(8357i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BrownGlazedTerracotta(state_unique_falcon) => {
                Some(8361i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::GreenGlazedTerracotta(state_unique_falcon) => {
                Some(8365i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::RedGlazedTerracotta(state_unique_falcon) => {
                Some(8369i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::BlackGlazedTerracotta(state_unique_falcon) => {
                Some(8373i32 + (state_unique_falcon.facing as i32))
            }
            Blocks::WhiteConcrete => Some(8377i32),
            Blocks::OrangeConcrete => Some(8378i32),
            Blocks::MagentaConcrete => Some(8379i32),
            Blocks::LightBlueConcrete => Some(8380i32),
            Blocks::YellowConcrete => Some(8381i32),
            Blocks::LimeConcrete => Some(8382i32),
            Blocks::PinkConcrete => Some(8383i32),
            Blocks::GrayConcrete => Some(8384i32),
            Blocks::LightGrayConcrete => Some(8385i32),
            Blocks::CyanConcrete => Some(8386i32),
            Blocks::PurpleConcrete => Some(8387i32),
            Blocks::BlueConcrete => Some(8388i32),
            Blocks::BrownConcrete => Some(8389i32),
            Blocks::GreenConcrete => Some(8390i32),
            Blocks::RedConcrete => Some(8391i32),
            Blocks::BlackConcrete => Some(8392i32),
            Blocks::WhiteConcretePowder => Some(8393i32),
            Blocks::OrangeConcretePowder => Some(8394i32),
            Blocks::MagentaConcretePowder => Some(8395i32),
            Blocks::LightBlueConcretePowder => Some(8396i32),
            Blocks::YellowConcretePowder => Some(8397i32),
            Blocks::LimeConcretePowder => Some(8398i32),
            Blocks::PinkConcretePowder => Some(8399i32),
            Blocks::GrayConcretePowder => Some(8400i32),
            Blocks::LightGrayConcretePowder => Some(8401i32),
            Blocks::CyanConcretePowder => Some(8402i32),
            Blocks::PurpleConcretePowder => Some(8403i32),
            Blocks::BlueConcretePowder => Some(8404i32),
            Blocks::BrownConcretePowder => Some(8405i32),
            Blocks::GreenConcretePowder => Some(8406i32),
            Blocks::RedConcretePowder => Some(8407i32),
            Blocks::BlackConcretePowder => Some(8408i32),
            Blocks::Kelp(state_unique_falcon) => Some(8409i32 + state_unique_falcon.age),
            Blocks::KelpPlant => Some(8435i32),
            Blocks::DriedKelpBlock => Some(8436i32),
            Blocks::TurtleEgg(state_unique_falcon) => {
                Some(8437i32 + state_unique_falcon.hatch + 3 * state_unique_falcon.eggs)
            }
            Blocks::DeadTubeCoralBlock => Some(8449i32),
            Blocks::DeadBrainCoralBlock => Some(8450i32),
            Blocks::DeadBubbleCoralBlock => Some(8451i32),
            Blocks::DeadFireCoralBlock => Some(8452i32),
            Blocks::DeadHornCoralBlock => Some(8453i32),
            Blocks::TubeCoralBlock => Some(8454i32),
            Blocks::BrainCoralBlock => Some(8455i32),
            Blocks::BubbleCoralBlock => Some(8456i32),
            Blocks::FireCoralBlock => Some(8457i32),
            Blocks::HornCoralBlock => Some(8458i32),
            Blocks::TubeCoral(_) => Some(8459i32),
            Blocks::BrainCoral(_) => Some(8460i32),
            Blocks::BubbleCoral(_) => Some(8461i32),
            Blocks::FireCoral(_) => Some(8462i32),
            Blocks::HornCoral(_) => Some(8463i32),
            Blocks::DeadTubeCoralWallFan(state_unique_falcon) => Some(
                8464i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBrainCoralWallFan(state_unique_falcon) => Some(
                8472i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadBubbleCoralWallFan(state_unique_falcon) => Some(
                8480i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadFireCoralWallFan(state_unique_falcon) => Some(
                8488i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadHornCoralWallFan(state_unique_falcon) => Some(
                8496i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::TubeCoralWallFan(state_unique_falcon) => Some(
                8504i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BrainCoralWallFan(state_unique_falcon) => Some(
                8512i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::BubbleCoralWallFan(state_unique_falcon) => Some(
                8520i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::FireCoralWallFan(state_unique_falcon) => Some(
                8528i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::HornCoralWallFan(state_unique_falcon) => Some(
                8536i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * (state_unique_falcon.facing as i32),
            ),
            Blocks::DeadTubeCoralFan(state_unique_falcon) => {
                Some(8544i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBrainCoralFan(state_unique_falcon) => {
                Some(8546i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadBubbleCoralFan(state_unique_falcon) => {
                Some(8548i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadFireCoralFan(state_unique_falcon) => {
                Some(8550i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::DeadHornCoralFan(state_unique_falcon) => {
                Some(8552i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::TubeCoralFan(state_unique_falcon) => {
                Some(8554i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BrainCoralFan(state_unique_falcon) => {
                Some(8556i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::BubbleCoralFan(state_unique_falcon) => {
                Some(8558i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::FireCoralFan(state_unique_falcon) => {
                Some(8560i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::HornCoralFan(state_unique_falcon) => {
                Some(8562i32 + (!state_unique_falcon.waterlogged() as i32))
            }
            Blocks::SeaPickle(state_unique_falcon) => Some(
                8564i32
                    + (!state_unique_falcon.waterlogged() as i32)
                    + 2 * state_unique_falcon.pickles,
            ),
            Blocks::BlueIce => Some(8572i32),
            Blocks::Conduit(_) => Some(8573i32),
            Blocks::VoidAir => Some(8574i32),
            Blocks::CaveAir => Some(8575i32),
            Blocks::BubbleColumn(state_unique_falcon) => {
                Some(8576i32 + (!state_unique_falcon.drag() as i32))
            }
            Blocks::StructureBlock(state_unique_falcon) => {
                Some(8578i32 + (state_unique_falcon.mode as i32))
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GrassBlockState {
    snowy: bool,
}
impl GrassBlockState {
    pub fn with_snowy(&mut self, snowy: bool) -> &mut Self {
        self.snowy = snowy;
        self
    }
    pub fn snowy(&self) -> bool {
        self.snowy
    }
}
impl Default for GrassBlockState {
    fn default() -> Self {
        GrassBlockState { snowy: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PodzolState {
    snowy: bool,
}
impl PodzolState {
    pub fn with_snowy(&mut self, snowy: bool) -> &mut Self {
        self.snowy = snowy;
        self
    }
    pub fn snowy(&self) -> bool {
        self.snowy
    }
}
impl Default for PodzolState {
    fn default() -> Self {
        PodzolState { snowy: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakSaplingState {
    stage: i32,
}
impl OakSaplingState {
    #[doc = "This is a value between 0 and 1 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_stage(&mut self, stage: i32) -> &mut Self {
        self.stage = stage;
        self
    }
    pub fn stage(&self) -> i32 {
        self.stage
    }
}
impl Default for OakSaplingState {
    fn default() -> Self {
        OakSaplingState { stage: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceSaplingState {
    stage: i32,
}
impl SpruceSaplingState {
    #[doc = "This is a value between 0 and 1 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_stage(&mut self, stage: i32) -> &mut Self {
        self.stage = stage;
        self
    }
    pub fn stage(&self) -> i32 {
        self.stage
    }
}
impl Default for SpruceSaplingState {
    fn default() -> Self {
        SpruceSaplingState { stage: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchSaplingState {
    stage: i32,
}
impl BirchSaplingState {
    #[doc = "This is a value between 0 and 1 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_stage(&mut self, stage: i32) -> &mut Self {
        self.stage = stage;
        self
    }
    pub fn stage(&self) -> i32 {
        self.stage
    }
}
impl Default for BirchSaplingState {
    fn default() -> Self {
        BirchSaplingState { stage: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleSaplingState {
    stage: i32,
}
impl JungleSaplingState {
    #[doc = "This is a value between 0 and 1 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_stage(&mut self, stage: i32) -> &mut Self {
        self.stage = stage;
        self
    }
    pub fn stage(&self) -> i32 {
        self.stage
    }
}
impl Default for JungleSaplingState {
    fn default() -> Self {
        JungleSaplingState { stage: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaSaplingState {
    stage: i32,
}
impl AcaciaSaplingState {
    #[doc = "This is a value between 0 and 1 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_stage(&mut self, stage: i32) -> &mut Self {
        self.stage = stage;
        self
    }
    pub fn stage(&self) -> i32 {
        self.stage
    }
}
impl Default for AcaciaSaplingState {
    fn default() -> Self {
        AcaciaSaplingState { stage: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakSaplingState {
    stage: i32,
}
impl DarkOakSaplingState {
    #[doc = "This is a value between 0 and 1 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_stage(&mut self, stage: i32) -> &mut Self {
        self.stage = stage;
        self
    }
    pub fn stage(&self) -> i32 {
        self.stage
    }
}
impl Default for DarkOakSaplingState {
    fn default() -> Self {
        DarkOakSaplingState { stage: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WaterState {
    level: i32,
}
impl WaterState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_level(&mut self, level: i32) -> &mut Self {
        self.level = level;
        self
    }
    pub fn level(&self) -> i32 {
        self.level
    }
}
impl Default for WaterState {
    fn default() -> Self {
        WaterState { level: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LavaState {
    level: i32,
}
impl LavaState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_level(&mut self, level: i32) -> &mut Self {
        self.level = level;
        self
    }
    pub fn level(&self) -> i32 {
        self.level
    }
}
impl Default for LavaState {
    fn default() -> Self {
        LavaState { level: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakLogState {
    axis: Axis,
}
impl OakLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for OakLogState {
    fn default() -> Self {
        OakLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceLogState {
    axis: Axis,
}
impl SpruceLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for SpruceLogState {
    fn default() -> Self {
        SpruceLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchLogState {
    axis: Axis,
}
impl BirchLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for BirchLogState {
    fn default() -> Self {
        BirchLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleLogState {
    axis: Axis,
}
impl JungleLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for JungleLogState {
    fn default() -> Self {
        JungleLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaLogState {
    axis: Axis,
}
impl AcaciaLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for AcaciaLogState {
    fn default() -> Self {
        AcaciaLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakLogState {
    axis: Axis,
}
impl DarkOakLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for DarkOakLogState {
    fn default() -> Self {
        DarkOakLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedSpruceLogState {
    axis: Axis,
}
impl StrippedSpruceLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedSpruceLogState {
    fn default() -> Self {
        StrippedSpruceLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedBirchLogState {
    axis: Axis,
}
impl StrippedBirchLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedBirchLogState {
    fn default() -> Self {
        StrippedBirchLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedJungleLogState {
    axis: Axis,
}
impl StrippedJungleLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedJungleLogState {
    fn default() -> Self {
        StrippedJungleLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedAcaciaLogState {
    axis: Axis,
}
impl StrippedAcaciaLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedAcaciaLogState {
    fn default() -> Self {
        StrippedAcaciaLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedDarkOakLogState {
    axis: Axis,
}
impl StrippedDarkOakLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedDarkOakLogState {
    fn default() -> Self {
        StrippedDarkOakLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedOakLogState {
    axis: Axis,
}
impl StrippedOakLogState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedOakLogState {
    fn default() -> Self {
        StrippedOakLogState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakWoodState {
    axis: Axis,
}
impl OakWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for OakWoodState {
    fn default() -> Self {
        OakWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceWoodState {
    axis: Axis,
}
impl SpruceWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for SpruceWoodState {
    fn default() -> Self {
        SpruceWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchWoodState {
    axis: Axis,
}
impl BirchWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for BirchWoodState {
    fn default() -> Self {
        BirchWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleWoodState {
    axis: Axis,
}
impl JungleWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for JungleWoodState {
    fn default() -> Self {
        JungleWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaWoodState {
    axis: Axis,
}
impl AcaciaWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for AcaciaWoodState {
    fn default() -> Self {
        AcaciaWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakWoodState {
    axis: Axis,
}
impl DarkOakWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for DarkOakWoodState {
    fn default() -> Self {
        DarkOakWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedOakWoodState {
    axis: Axis,
}
impl StrippedOakWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedOakWoodState {
    fn default() -> Self {
        StrippedOakWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedSpruceWoodState {
    axis: Axis,
}
impl StrippedSpruceWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedSpruceWoodState {
    fn default() -> Self {
        StrippedSpruceWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedBirchWoodState {
    axis: Axis,
}
impl StrippedBirchWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedBirchWoodState {
    fn default() -> Self {
        StrippedBirchWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedJungleWoodState {
    axis: Axis,
}
impl StrippedJungleWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedJungleWoodState {
    fn default() -> Self {
        StrippedJungleWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedAcaciaWoodState {
    axis: Axis,
}
impl StrippedAcaciaWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedAcaciaWoodState {
    fn default() -> Self {
        StrippedAcaciaWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedDarkOakWoodState {
    axis: Axis,
}
impl StrippedDarkOakWoodState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedDarkOakWoodState {
    fn default() -> Self {
        StrippedDarkOakWoodState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakLeavesState {
    distance: i32,
    persistent: bool,
}
impl OakLeavesState {
    #[doc = "This is a value between 1 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_distance(&mut self, distance: i32) -> &mut Self {
        self.distance = distance - 1;
        self
    }
    pub fn distance(&self) -> i32 {
        self.distance + 1
    }
    pub fn with_persistent(&mut self, persistent: bool) -> &mut Self {
        self.persistent = persistent;
        self
    }
    pub fn persistent(&self) -> bool {
        self.persistent
    }
}
impl Default for OakLeavesState {
    fn default() -> Self {
        OakLeavesState {
            distance: 6i32,
            persistent: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceLeavesState {
    distance: i32,
    persistent: bool,
}
impl SpruceLeavesState {
    #[doc = "This is a value between 1 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_distance(&mut self, distance: i32) -> &mut Self {
        self.distance = distance - 1;
        self
    }
    pub fn distance(&self) -> i32 {
        self.distance + 1
    }
    pub fn with_persistent(&mut self, persistent: bool) -> &mut Self {
        self.persistent = persistent;
        self
    }
    pub fn persistent(&self) -> bool {
        self.persistent
    }
}
impl Default for SpruceLeavesState {
    fn default() -> Self {
        SpruceLeavesState {
            distance: 6i32,
            persistent: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchLeavesState {
    distance: i32,
    persistent: bool,
}
impl BirchLeavesState {
    #[doc = "This is a value between 1 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_distance(&mut self, distance: i32) -> &mut Self {
        self.distance = distance - 1;
        self
    }
    pub fn distance(&self) -> i32 {
        self.distance + 1
    }
    pub fn with_persistent(&mut self, persistent: bool) -> &mut Self {
        self.persistent = persistent;
        self
    }
    pub fn persistent(&self) -> bool {
        self.persistent
    }
}
impl Default for BirchLeavesState {
    fn default() -> Self {
        BirchLeavesState {
            distance: 6i32,
            persistent: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleLeavesState {
    distance: i32,
    persistent: bool,
}
impl JungleLeavesState {
    #[doc = "This is a value between 1 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_distance(&mut self, distance: i32) -> &mut Self {
        self.distance = distance - 1;
        self
    }
    pub fn distance(&self) -> i32 {
        self.distance + 1
    }
    pub fn with_persistent(&mut self, persistent: bool) -> &mut Self {
        self.persistent = persistent;
        self
    }
    pub fn persistent(&self) -> bool {
        self.persistent
    }
}
impl Default for JungleLeavesState {
    fn default() -> Self {
        JungleLeavesState {
            distance: 6i32,
            persistent: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaLeavesState {
    distance: i32,
    persistent: bool,
}
impl AcaciaLeavesState {
    #[doc = "This is a value between 1 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_distance(&mut self, distance: i32) -> &mut Self {
        self.distance = distance - 1;
        self
    }
    pub fn distance(&self) -> i32 {
        self.distance + 1
    }
    pub fn with_persistent(&mut self, persistent: bool) -> &mut Self {
        self.persistent = persistent;
        self
    }
    pub fn persistent(&self) -> bool {
        self.persistent
    }
}
impl Default for AcaciaLeavesState {
    fn default() -> Self {
        AcaciaLeavesState {
            distance: 6i32,
            persistent: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakLeavesState {
    distance: i32,
    persistent: bool,
}
impl DarkOakLeavesState {
    #[doc = "This is a value between 1 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_distance(&mut self, distance: i32) -> &mut Self {
        self.distance = distance - 1;
        self
    }
    pub fn distance(&self) -> i32 {
        self.distance + 1
    }
    pub fn with_persistent(&mut self, persistent: bool) -> &mut Self {
        self.persistent = persistent;
        self
    }
    pub fn persistent(&self) -> bool {
        self.persistent
    }
}
impl Default for DarkOakLeavesState {
    fn default() -> Self {
        DarkOakLeavesState {
            distance: 6i32,
            persistent: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AzaleaLeavesState {
    distance: i32,
    persistent: bool,
}
impl AzaleaLeavesState {
    #[doc = "This is a value between 1 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_distance(&mut self, distance: i32) -> &mut Self {
        self.distance = distance - 1;
        self
    }
    pub fn distance(&self) -> i32 {
        self.distance + 1
    }
    pub fn with_persistent(&mut self, persistent: bool) -> &mut Self {
        self.persistent = persistent;
        self
    }
    pub fn persistent(&self) -> bool {
        self.persistent
    }
}
impl Default for AzaleaLeavesState {
    fn default() -> Self {
        AzaleaLeavesState {
            distance: 6i32,
            persistent: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct FloweringAzaleaLeavesState {
    distance: i32,
    persistent: bool,
}
impl FloweringAzaleaLeavesState {
    #[doc = "This is a value between 1 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_distance(&mut self, distance: i32) -> &mut Self {
        self.distance = distance - 1;
        self
    }
    pub fn distance(&self) -> i32 {
        self.distance + 1
    }
    pub fn with_persistent(&mut self, persistent: bool) -> &mut Self {
        self.persistent = persistent;
        self
    }
    pub fn persistent(&self) -> bool {
        self.persistent
    }
}
impl Default for FloweringAzaleaLeavesState {
    fn default() -> Self {
        FloweringAzaleaLeavesState {
            distance: 6i32,
            persistent: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DispenserState {
    facing: AllFacing,
    triggered: bool,
}
impl DispenserState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_triggered(&mut self, triggered: bool) -> &mut Self {
        self.triggered = triggered;
        self
    }
    pub fn triggered(&self) -> bool {
        self.triggered
    }
}
impl Default for DispenserState {
    fn default() -> Self {
        DispenserState {
            facing: AllFacing::North,
            triggered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct NoteBlockState {
    instrument: Instrument,
    note: i32,
    powered: bool,
}
impl NoteBlockState {
    pub fn with_instrument(&mut self, instrument: Instrument) -> &mut Self {
        self.instrument = instrument;
        self
    }
    pub fn instrument(&self) -> Instrument {
        self.instrument
    }
    #[doc = "This is a value between 0 and 24 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_note(&mut self, note: i32) -> &mut Self {
        self.note = note;
        self
    }
    pub fn note(&self) -> i32 {
        self.note
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for NoteBlockState {
    fn default() -> Self {
        NoteBlockState {
            instrument: Instrument::Harp,
            note: 0i32,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WhiteBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl WhiteBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for WhiteBedState {
    fn default() -> Self {
        WhiteBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OrangeBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl OrangeBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for OrangeBedState {
    fn default() -> Self {
        OrangeBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MagentaBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl MagentaBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for MagentaBedState {
    fn default() -> Self {
        MagentaBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightBlueBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl LightBlueBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for LightBlueBedState {
    fn default() -> Self {
        LightBlueBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct YellowBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl YellowBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for YellowBedState {
    fn default() -> Self {
        YellowBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LimeBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl LimeBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for LimeBedState {
    fn default() -> Self {
        LimeBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PinkBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl PinkBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for PinkBedState {
    fn default() -> Self {
        PinkBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GrayBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl GrayBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for GrayBedState {
    fn default() -> Self {
        GrayBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightGrayBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl LightGrayBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for LightGrayBedState {
    fn default() -> Self {
        LightGrayBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CyanBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl CyanBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for CyanBedState {
    fn default() -> Self {
        CyanBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpleBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl PurpleBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for PurpleBedState {
    fn default() -> Self {
        PurpleBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlueBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl BlueBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for BlueBedState {
    fn default() -> Self {
        BlueBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrownBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl BrownBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for BrownBedState {
    fn default() -> Self {
        BrownBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GreenBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl GreenBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for GreenBedState {
    fn default() -> Self {
        GreenBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl RedBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for RedBedState {
    fn default() -> Self {
        RedBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackBedState {
    facing: HorizontalFacing,
    occupied: bool,
    part: Part,
}
impl BlackBedState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_occupied(&mut self, occupied: bool) -> &mut Self {
        self.occupied = occupied;
        self
    }
    pub fn occupied(&self) -> bool {
        self.occupied
    }
    pub fn with_part(&mut self, part: Part) -> &mut Self {
        self.part = part;
        self
    }
    pub fn part(&self) -> Part {
        self.part
    }
}
impl Default for BlackBedState {
    fn default() -> Self {
        BlackBedState {
            facing: HorizontalFacing::North,
            occupied: false,
            part: Part::Foot,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PoweredRailState {
    powered: bool,
    shape: StraightRailShape,
    waterlogged: bool,
}
impl PoweredRailState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_shape(&mut self, shape: StraightRailShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StraightRailShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PoweredRailState {
    fn default() -> Self {
        PoweredRailState {
            powered: false,
            shape: StraightRailShape::NorthSouth,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DetectorRailState {
    powered: bool,
    shape: StraightRailShape,
    waterlogged: bool,
}
impl DetectorRailState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_shape(&mut self, shape: StraightRailShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StraightRailShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DetectorRailState {
    fn default() -> Self {
        DetectorRailState {
            powered: false,
            shape: StraightRailShape::NorthSouth,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StickyPistonState {
    extended: bool,
    facing: AllFacing,
}
impl StickyPistonState {
    pub fn with_extended(&mut self, extended: bool) -> &mut Self {
        self.extended = extended;
        self
    }
    pub fn extended(&self) -> bool {
        self.extended
    }
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for StickyPistonState {
    fn default() -> Self {
        StickyPistonState {
            extended: false,
            facing: AllFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TallSeagrassState {
    half: DoubleBlockHalf,
}
impl TallSeagrassState {
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
}
impl Default for TallSeagrassState {
    fn default() -> Self {
        TallSeagrassState {
            half: DoubleBlockHalf::Lower,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PistonState {
    extended: bool,
    facing: AllFacing,
}
impl PistonState {
    pub fn with_extended(&mut self, extended: bool) -> &mut Self {
        self.extended = extended;
        self
    }
    pub fn extended(&self) -> bool {
        self.extended
    }
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for PistonState {
    fn default() -> Self {
        PistonState {
            extended: false,
            facing: AllFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PistonHeadState {
    facing: AllFacing,
    short: bool,
    typed: PistonType,
}
impl PistonHeadState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_short(&mut self, short: bool) -> &mut Self {
        self.short = short;
        self
    }
    pub fn short(&self) -> bool {
        self.short
    }
    pub fn with_typed(&mut self, typed: PistonType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> PistonType {
        self.typed
    }
}
impl Default for PistonHeadState {
    fn default() -> Self {
        PistonHeadState {
            facing: AllFacing::North,
            short: false,
            typed: PistonType::Normal,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MovingPistonState {
    facing: AllFacing,
    typed: PistonType,
}
impl MovingPistonState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_typed(&mut self, typed: PistonType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> PistonType {
        self.typed
    }
}
impl Default for MovingPistonState {
    fn default() -> Self {
        MovingPistonState {
            facing: AllFacing::North,
            typed: PistonType::Normal,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TntState {
    unstable: bool,
}
impl TntState {
    pub fn with_unstable(&mut self, unstable: bool) -> &mut Self {
        self.unstable = unstable;
        self
    }
    pub fn unstable(&self) -> bool {
        self.unstable
    }
}
impl Default for TntState {
    fn default() -> Self {
        TntState { unstable: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WallTorchState {
    facing: HorizontalFacing,
}
impl WallTorchState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for WallTorchState {
    fn default() -> Self {
        WallTorchState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct FireState {
    age: i32,
    east: bool,
    north: bool,
    south: bool,
    up: bool,
    west: bool,
}
impl FireState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for FireState {
    fn default() -> Self {
        FireState {
            age: 0i32,
            east: false,
            north: false,
            south: false,
            up: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl OakStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for OakStairsState {
    fn default() -> Self {
        OakStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ChestState {
    facing: HorizontalFacing,
    typed: ChestType,
    waterlogged: bool,
}
impl ChestState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_typed(&mut self, typed: ChestType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> ChestType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for ChestState {
    fn default() -> Self {
        ChestState {
            facing: HorizontalFacing::North,
            typed: ChestType::Single,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedstoneWireState {
    east: RedstoneType,
    north: RedstoneType,
    power: i32,
    south: RedstoneType,
    west: RedstoneType,
}
impl RedstoneWireState {
    pub fn with_east(&mut self, east: RedstoneType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> RedstoneType {
        self.east
    }
    pub fn with_north(&mut self, north: RedstoneType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> RedstoneType {
        self.north
    }
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_power(&mut self, power: i32) -> &mut Self {
        self.power = power;
        self
    }
    pub fn power(&self) -> i32 {
        self.power
    }
    pub fn with_south(&mut self, south: RedstoneType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> RedstoneType {
        self.south
    }
    pub fn with_west(&mut self, west: RedstoneType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> RedstoneType {
        self.west
    }
}
impl Default for RedstoneWireState {
    fn default() -> Self {
        RedstoneWireState {
            east: RedstoneType::None,
            north: RedstoneType::None,
            power: 0i32,
            south: RedstoneType::None,
            west: RedstoneType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WheatState {
    age: i32,
}
impl WheatState {
    #[doc = "This is a value between 0 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for WheatState {
    fn default() -> Self {
        WheatState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct FarmlandState {
    moisture: i32,
}
impl FarmlandState {
    #[doc = "This is a value between 0 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_moisture(&mut self, moisture: i32) -> &mut Self {
        self.moisture = moisture;
        self
    }
    pub fn moisture(&self) -> i32 {
        self.moisture
    }
}
impl Default for FarmlandState {
    fn default() -> Self {
        FarmlandState { moisture: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct FurnaceState {
    facing: HorizontalFacing,
    lit: bool,
}
impl FurnaceState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for FurnaceState {
    fn default() -> Self {
        FurnaceState {
            facing: HorizontalFacing::North,
            lit: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakSignState {
    rotation: i32,
    waterlogged: bool,
}
impl OakSignState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for OakSignState {
    fn default() -> Self {
        OakSignState {
            rotation: 0i32,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceSignState {
    rotation: i32,
    waterlogged: bool,
}
impl SpruceSignState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SpruceSignState {
    fn default() -> Self {
        SpruceSignState {
            rotation: 0i32,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchSignState {
    rotation: i32,
    waterlogged: bool,
}
impl BirchSignState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BirchSignState {
    fn default() -> Self {
        BirchSignState {
            rotation: 0i32,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaSignState {
    rotation: i32,
    waterlogged: bool,
}
impl AcaciaSignState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for AcaciaSignState {
    fn default() -> Self {
        AcaciaSignState {
            rotation: 0i32,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleSignState {
    rotation: i32,
    waterlogged: bool,
}
impl JungleSignState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for JungleSignState {
    fn default() -> Self {
        JungleSignState {
            rotation: 0i32,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakSignState {
    rotation: i32,
    waterlogged: bool,
}
impl DarkOakSignState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DarkOakSignState {
    fn default() -> Self {
        DarkOakSignState {
            rotation: 0i32,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakDoorState {
    facing: HorizontalFacing,
    half: DoubleBlockHalf,
    hinge: Hinge,
    open: bool,
    powered: bool,
}
impl OakDoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
    pub fn with_hinge(&mut self, hinge: Hinge) -> &mut Self {
        self.hinge = hinge;
        self
    }
    pub fn hinge(&self) -> Hinge {
        self.hinge
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for OakDoorState {
    fn default() -> Self {
        OakDoorState {
            facing: HorizontalFacing::North,
            half: DoubleBlockHalf::Lower,
            hinge: Hinge::Left,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LadderState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl LadderState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for LadderState {
    fn default() -> Self {
        LadderState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RailState {
    shape: RailShape,
    waterlogged: bool,
}
impl RailState {
    pub fn with_shape(&mut self, shape: RailShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> RailShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for RailState {
    fn default() -> Self {
        RailState {
            shape: RailShape::NorthSouth,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CobblestoneStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl CobblestoneStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CobblestoneStairsState {
    fn default() -> Self {
        CobblestoneStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakWallSignState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl OakWallSignState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for OakWallSignState {
    fn default() -> Self {
        OakWallSignState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceWallSignState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl SpruceWallSignState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SpruceWallSignState {
    fn default() -> Self {
        SpruceWallSignState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchWallSignState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl BirchWallSignState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BirchWallSignState {
    fn default() -> Self {
        BirchWallSignState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaWallSignState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl AcaciaWallSignState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for AcaciaWallSignState {
    fn default() -> Self {
        AcaciaWallSignState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleWallSignState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl JungleWallSignState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for JungleWallSignState {
    fn default() -> Self {
        JungleWallSignState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakWallSignState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl DarkOakWallSignState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DarkOakWallSignState {
    fn default() -> Self {
        DarkOakWallSignState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LeverState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl LeverState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for LeverState {
    fn default() -> Self {
        LeverState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StonePressurePlateState {
    powered: bool,
}
impl StonePressurePlateState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for StonePressurePlateState {
    fn default() -> Self {
        StonePressurePlateState { powered: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct IronDoorState {
    facing: HorizontalFacing,
    half: DoubleBlockHalf,
    hinge: Hinge,
    open: bool,
    powered: bool,
}
impl IronDoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
    pub fn with_hinge(&mut self, hinge: Hinge) -> &mut Self {
        self.hinge = hinge;
        self
    }
    pub fn hinge(&self) -> Hinge {
        self.hinge
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for IronDoorState {
    fn default() -> Self {
        IronDoorState {
            facing: HorizontalFacing::North,
            half: DoubleBlockHalf::Lower,
            hinge: Hinge::Left,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakPressurePlateState {
    powered: bool,
}
impl OakPressurePlateState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for OakPressurePlateState {
    fn default() -> Self {
        OakPressurePlateState { powered: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SprucePressurePlateState {
    powered: bool,
}
impl SprucePressurePlateState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for SprucePressurePlateState {
    fn default() -> Self {
        SprucePressurePlateState { powered: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchPressurePlateState {
    powered: bool,
}
impl BirchPressurePlateState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for BirchPressurePlateState {
    fn default() -> Self {
        BirchPressurePlateState { powered: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JunglePressurePlateState {
    powered: bool,
}
impl JunglePressurePlateState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for JunglePressurePlateState {
    fn default() -> Self {
        JunglePressurePlateState { powered: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaPressurePlateState {
    powered: bool,
}
impl AcaciaPressurePlateState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for AcaciaPressurePlateState {
    fn default() -> Self {
        AcaciaPressurePlateState { powered: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakPressurePlateState {
    powered: bool,
}
impl DarkOakPressurePlateState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for DarkOakPressurePlateState {
    fn default() -> Self {
        DarkOakPressurePlateState { powered: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedstoneOreState {
    lit: bool,
}
impl RedstoneOreState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for RedstoneOreState {
    fn default() -> Self {
        RedstoneOreState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeepslateRedstoneOreState {
    lit: bool,
}
impl DeepslateRedstoneOreState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for DeepslateRedstoneOreState {
    fn default() -> Self {
        DeepslateRedstoneOreState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedstoneTorchState {
    lit: bool,
}
impl RedstoneTorchState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for RedstoneTorchState {
    fn default() -> Self {
        RedstoneTorchState { lit: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedstoneWallTorchState {
    facing: HorizontalFacing,
    lit: bool,
}
impl RedstoneWallTorchState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for RedstoneWallTorchState {
    fn default() -> Self {
        RedstoneWallTorchState {
            facing: HorizontalFacing::North,
            lit: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StoneButtonState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl StoneButtonState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for StoneButtonState {
    fn default() -> Self {
        StoneButtonState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SnowState {
    layers: i32,
}
impl SnowState {
    #[doc = "This is a value between 1 and 8 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_layers(&mut self, layers: i32) -> &mut Self {
        self.layers = layers - 1;
        self
    }
    pub fn layers(&self) -> i32 {
        self.layers + 1
    }
}
impl Default for SnowState {
    fn default() -> Self {
        SnowState { layers: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CactusState {
    age: i32,
}
impl CactusState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for CactusState {
    fn default() -> Self {
        CactusState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SugarCaneState {
    age: i32,
}
impl SugarCaneState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for SugarCaneState {
    fn default() -> Self {
        SugarCaneState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JukeboxState {
    has_record: bool,
}
impl JukeboxState {
    pub fn with_has_record(&mut self, has_record: bool) -> &mut Self {
        self.has_record = has_record;
        self
    }
    pub fn has_record(&self) -> bool {
        self.has_record
    }
}
impl Default for JukeboxState {
    fn default() -> Self {
        JukeboxState { has_record: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakFenceState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl OakFenceState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for OakFenceState {
    fn default() -> Self {
        OakFenceState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BasaltState {
    axis: Axis,
}
impl BasaltState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for BasaltState {
    fn default() -> Self {
        BasaltState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedBasaltState {
    axis: Axis,
}
impl PolishedBasaltState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for PolishedBasaltState {
    fn default() -> Self {
        PolishedBasaltState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SoulWallTorchState {
    facing: HorizontalFacing,
}
impl SoulWallTorchState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for SoulWallTorchState {
    fn default() -> Self {
        SoulWallTorchState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct NetherPortalState {
    axis: PortalAxis,
}
impl NetherPortalState {
    pub fn with_axis(&mut self, axis: PortalAxis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> PortalAxis {
        self.axis
    }
}
impl Default for NetherPortalState {
    fn default() -> Self {
        NetherPortalState {
            axis: PortalAxis::X,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CarvedPumpkinState {
    facing: HorizontalFacing,
}
impl CarvedPumpkinState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for CarvedPumpkinState {
    fn default() -> Self {
        CarvedPumpkinState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JackOLanternState {
    facing: HorizontalFacing,
}
impl JackOLanternState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for JackOLanternState {
    fn default() -> Self {
        JackOLanternState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CakeState {
    bites: i32,
}
impl CakeState {
    #[doc = "This is a value between 0 and 6 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_bites(&mut self, bites: i32) -> &mut Self {
        self.bites = bites;
        self
    }
    pub fn bites(&self) -> i32 {
        self.bites
    }
}
impl Default for CakeState {
    fn default() -> Self {
        CakeState { bites: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RepeaterState {
    delay: i32,
    facing: HorizontalFacing,
    locked: bool,
    powered: bool,
}
impl RepeaterState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_delay(&mut self, delay: i32) -> &mut Self {
        self.delay = delay - 1;
        self
    }
    pub fn delay(&self) -> i32 {
        self.delay + 1
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_locked(&mut self, locked: bool) -> &mut Self {
        self.locked = locked;
        self
    }
    pub fn locked(&self) -> bool {
        self.locked
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for RepeaterState {
    fn default() -> Self {
        RepeaterState {
            delay: 0i32,
            facing: HorizontalFacing::North,
            locked: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakTrapdoorState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    open: bool,
    powered: bool,
    waterlogged: bool,
}
impl OakTrapdoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for OakTrapdoorState {
    fn default() -> Self {
        OakTrapdoorState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            open: false,
            powered: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceTrapdoorState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    open: bool,
    powered: bool,
    waterlogged: bool,
}
impl SpruceTrapdoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SpruceTrapdoorState {
    fn default() -> Self {
        SpruceTrapdoorState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            open: false,
            powered: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchTrapdoorState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    open: bool,
    powered: bool,
    waterlogged: bool,
}
impl BirchTrapdoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BirchTrapdoorState {
    fn default() -> Self {
        BirchTrapdoorState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            open: false,
            powered: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleTrapdoorState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    open: bool,
    powered: bool,
    waterlogged: bool,
}
impl JungleTrapdoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for JungleTrapdoorState {
    fn default() -> Self {
        JungleTrapdoorState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            open: false,
            powered: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaTrapdoorState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    open: bool,
    powered: bool,
    waterlogged: bool,
}
impl AcaciaTrapdoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for AcaciaTrapdoorState {
    fn default() -> Self {
        AcaciaTrapdoorState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            open: false,
            powered: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakTrapdoorState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    open: bool,
    powered: bool,
    waterlogged: bool,
}
impl DarkOakTrapdoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DarkOakTrapdoorState {
    fn default() -> Self {
        DarkOakTrapdoorState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            open: false,
            powered: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrownMushroomBlockState {
    down: bool,
    east: bool,
    north: bool,
    south: bool,
    up: bool,
    west: bool,
}
impl BrownMushroomBlockState {
    pub fn with_down(&mut self, down: bool) -> &mut Self {
        self.down = down;
        self
    }
    pub fn down(&self) -> bool {
        self.down
    }
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for BrownMushroomBlockState {
    fn default() -> Self {
        BrownMushroomBlockState {
            down: true,
            east: true,
            north: true,
            south: true,
            up: true,
            west: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedMushroomBlockState {
    down: bool,
    east: bool,
    north: bool,
    south: bool,
    up: bool,
    west: bool,
}
impl RedMushroomBlockState {
    pub fn with_down(&mut self, down: bool) -> &mut Self {
        self.down = down;
        self
    }
    pub fn down(&self) -> bool {
        self.down
    }
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for RedMushroomBlockState {
    fn default() -> Self {
        RedMushroomBlockState {
            down: true,
            east: true,
            north: true,
            south: true,
            up: true,
            west: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MushroomStemState {
    down: bool,
    east: bool,
    north: bool,
    south: bool,
    up: bool,
    west: bool,
}
impl MushroomStemState {
    pub fn with_down(&mut self, down: bool) -> &mut Self {
        self.down = down;
        self
    }
    pub fn down(&self) -> bool {
        self.down
    }
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for MushroomStemState {
    fn default() -> Self {
        MushroomStemState {
            down: true,
            east: true,
            north: true,
            south: true,
            up: true,
            west: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct IronBarsState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl IronBarsState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for IronBarsState {
    fn default() -> Self {
        IronBarsState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ChainState {
    axis: Axis,
    waterlogged: bool,
}
impl ChainState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for ChainState {
    fn default() -> Self {
        ChainState {
            axis: Axis::Y,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl GlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for GlassPaneState {
    fn default() -> Self {
        GlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AttachedPumpkinStemState {
    facing: HorizontalFacing,
}
impl AttachedPumpkinStemState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for AttachedPumpkinStemState {
    fn default() -> Self {
        AttachedPumpkinStemState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AttachedMelonStemState {
    facing: HorizontalFacing,
}
impl AttachedMelonStemState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for AttachedMelonStemState {
    fn default() -> Self {
        AttachedMelonStemState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PumpkinStemState {
    age: i32,
}
impl PumpkinStemState {
    #[doc = "This is a value between 0 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for PumpkinStemState {
    fn default() -> Self {
        PumpkinStemState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MelonStemState {
    age: i32,
}
impl MelonStemState {
    #[doc = "This is a value between 0 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for MelonStemState {
    fn default() -> Self {
        MelonStemState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct VineState {
    east: bool,
    north: bool,
    south: bool,
    up: bool,
    west: bool,
}
impl VineState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for VineState {
    fn default() -> Self {
        VineState {
            east: false,
            north: false,
            south: false,
            up: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GlowLichenState {
    down: bool,
    east: bool,
    north: bool,
    south: bool,
    up: bool,
    waterlogged: bool,
    west: bool,
}
impl GlowLichenState {
    pub fn with_down(&mut self, down: bool) -> &mut Self {
        self.down = down;
        self
    }
    pub fn down(&self) -> bool {
        self.down
    }
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for GlowLichenState {
    fn default() -> Self {
        GlowLichenState {
            down: false,
            east: false,
            north: false,
            south: false,
            up: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakFenceGateState {
    facing: HorizontalFacing,
    in_wall: bool,
    open: bool,
    powered: bool,
}
impl OakFenceGateState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_in_wall(&mut self, in_wall: bool) -> &mut Self {
        self.in_wall = in_wall;
        self
    }
    pub fn in_wall(&self) -> bool {
        self.in_wall
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for OakFenceGateState {
    fn default() -> Self {
        OakFenceGateState {
            facing: HorizontalFacing::North,
            in_wall: false,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrickStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl BrickStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BrickStairsState {
    fn default() -> Self {
        BrickStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StoneBrickStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl StoneBrickStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for StoneBrickStairsState {
    fn default() -> Self {
        StoneBrickStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MyceliumState {
    snowy: bool,
}
impl MyceliumState {
    pub fn with_snowy(&mut self, snowy: bool) -> &mut Self {
        self.snowy = snowy;
        self
    }
    pub fn snowy(&self) -> bool {
        self.snowy
    }
}
impl Default for MyceliumState {
    fn default() -> Self {
        MyceliumState { snowy: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct NetherBrickFenceState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl NetherBrickFenceState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for NetherBrickFenceState {
    fn default() -> Self {
        NetherBrickFenceState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct NetherBrickStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl NetherBrickStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for NetherBrickStairsState {
    fn default() -> Self {
        NetherBrickStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct NetherWartState {
    age: i32,
}
impl NetherWartState {
    #[doc = "This is a value between 0 and 3 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for NetherWartState {
    fn default() -> Self {
        NetherWartState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrewingStandState {
    has_bottle_0: bool,
    has_bottle_1: bool,
    has_bottle_2: bool,
}
impl BrewingStandState {
    pub fn with_has_bottle_0(&mut self, has_bottle_0: bool) -> &mut Self {
        self.has_bottle_0 = has_bottle_0;
        self
    }
    pub fn has_bottle_0(&self) -> bool {
        self.has_bottle_0
    }
    pub fn with_has_bottle_1(&mut self, has_bottle_1: bool) -> &mut Self {
        self.has_bottle_1 = has_bottle_1;
        self
    }
    pub fn has_bottle_1(&self) -> bool {
        self.has_bottle_1
    }
    pub fn with_has_bottle_2(&mut self, has_bottle_2: bool) -> &mut Self {
        self.has_bottle_2 = has_bottle_2;
        self
    }
    pub fn has_bottle_2(&self) -> bool {
        self.has_bottle_2
    }
}
impl Default for BrewingStandState {
    fn default() -> Self {
        BrewingStandState {
            has_bottle_0: false,
            has_bottle_1: false,
            has_bottle_2: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WaterCauldronState {
    level: i32,
}
impl WaterCauldronState {
    #[doc = "This is a value between 1 and 3 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_level(&mut self, level: i32) -> &mut Self {
        self.level = level - 1;
        self
    }
    pub fn level(&self) -> i32 {
        self.level + 1
    }
}
impl Default for WaterCauldronState {
    fn default() -> Self {
        WaterCauldronState { level: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PowderSnowCauldronState {
    level: i32,
}
impl PowderSnowCauldronState {
    #[doc = "This is a value between 1 and 3 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_level(&mut self, level: i32) -> &mut Self {
        self.level = level - 1;
        self
    }
    pub fn level(&self) -> i32 {
        self.level + 1
    }
}
impl Default for PowderSnowCauldronState {
    fn default() -> Self {
        PowderSnowCauldronState { level: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct EndPortalFrameState {
    eye: bool,
    facing: HorizontalFacing,
}
impl EndPortalFrameState {
    pub fn with_eye(&mut self, eye: bool) -> &mut Self {
        self.eye = eye;
        self
    }
    pub fn eye(&self) -> bool {
        self.eye
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for EndPortalFrameState {
    fn default() -> Self {
        EndPortalFrameState {
            eye: false,
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedstoneLampState {
    lit: bool,
}
impl RedstoneLampState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for RedstoneLampState {
    fn default() -> Self {
        RedstoneLampState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CocoaState {
    age: i32,
    facing: HorizontalFacing,
}
impl CocoaState {
    #[doc = "This is a value between 0 and 2 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for CocoaState {
    fn default() -> Self {
        CocoaState {
            age: 0i32,
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SandstoneStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl SandstoneStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SandstoneStairsState {
    fn default() -> Self {
        SandstoneStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct EnderChestState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl EnderChestState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for EnderChestState {
    fn default() -> Self {
        EnderChestState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TripwireHookState {
    attached: bool,
    facing: HorizontalFacing,
    powered: bool,
}
impl TripwireHookState {
    pub fn with_attached(&mut self, attached: bool) -> &mut Self {
        self.attached = attached;
        self
    }
    pub fn attached(&self) -> bool {
        self.attached
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for TripwireHookState {
    fn default() -> Self {
        TripwireHookState {
            attached: false,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TripwireState {
    attached: bool,
    disarmed: bool,
    east: bool,
    north: bool,
    powered: bool,
    south: bool,
    west: bool,
}
impl TripwireState {
    pub fn with_attached(&mut self, attached: bool) -> &mut Self {
        self.attached = attached;
        self
    }
    pub fn attached(&self) -> bool {
        self.attached
    }
    pub fn with_disarmed(&mut self, disarmed: bool) -> &mut Self {
        self.disarmed = disarmed;
        self
    }
    pub fn disarmed(&self) -> bool {
        self.disarmed
    }
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for TripwireState {
    fn default() -> Self {
        TripwireState {
            attached: false,
            disarmed: false,
            east: false,
            north: false,
            powered: false,
            south: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl SpruceStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SpruceStairsState {
    fn default() -> Self {
        SpruceStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl BirchStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BirchStairsState {
    fn default() -> Self {
        BirchStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl JungleStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for JungleStairsState {
    fn default() -> Self {
        JungleStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CommandBlockState {
    conditional: bool,
    facing: AllFacing,
}
impl CommandBlockState {
    pub fn with_conditional(&mut self, conditional: bool) -> &mut Self {
        self.conditional = conditional;
        self
    }
    pub fn conditional(&self) -> bool {
        self.conditional
    }
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for CommandBlockState {
    fn default() -> Self {
        CommandBlockState {
            conditional: false,
            facing: AllFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CobblestoneWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl CobblestoneWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for CobblestoneWallState {
    fn default() -> Self {
        CobblestoneWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MossyCobblestoneWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl MossyCobblestoneWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for MossyCobblestoneWallState {
    fn default() -> Self {
        MossyCobblestoneWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CarrotsState {
    age: i32,
}
impl CarrotsState {
    #[doc = "This is a value between 0 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for CarrotsState {
    fn default() -> Self {
        CarrotsState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PotatoesState {
    age: i32,
}
impl PotatoesState {
    #[doc = "This is a value between 0 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for PotatoesState {
    fn default() -> Self {
        PotatoesState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakButtonState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl OakButtonState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for OakButtonState {
    fn default() -> Self {
        OakButtonState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceButtonState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl SpruceButtonState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for SpruceButtonState {
    fn default() -> Self {
        SpruceButtonState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchButtonState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl BirchButtonState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for BirchButtonState {
    fn default() -> Self {
        BirchButtonState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleButtonState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl JungleButtonState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for JungleButtonState {
    fn default() -> Self {
        JungleButtonState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaButtonState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl AcaciaButtonState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for AcaciaButtonState {
    fn default() -> Self {
        AcaciaButtonState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakButtonState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl DarkOakButtonState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for DarkOakButtonState {
    fn default() -> Self {
        DarkOakButtonState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SkeletonSkullState {
    rotation: i32,
}
impl SkeletonSkullState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for SkeletonSkullState {
    fn default() -> Self {
        SkeletonSkullState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SkeletonWallSkullState {
    facing: HorizontalFacing,
}
impl SkeletonWallSkullState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for SkeletonWallSkullState {
    fn default() -> Self {
        SkeletonWallSkullState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WitherSkeletonSkullState {
    rotation: i32,
}
impl WitherSkeletonSkullState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for WitherSkeletonSkullState {
    fn default() -> Self {
        WitherSkeletonSkullState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WitherSkeletonWallSkullState {
    facing: HorizontalFacing,
}
impl WitherSkeletonWallSkullState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for WitherSkeletonWallSkullState {
    fn default() -> Self {
        WitherSkeletonWallSkullState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ZombieHeadState {
    rotation: i32,
}
impl ZombieHeadState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for ZombieHeadState {
    fn default() -> Self {
        ZombieHeadState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ZombieWallHeadState {
    facing: HorizontalFacing,
}
impl ZombieWallHeadState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for ZombieWallHeadState {
    fn default() -> Self {
        ZombieWallHeadState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PlayerHeadState {
    rotation: i32,
}
impl PlayerHeadState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for PlayerHeadState {
    fn default() -> Self {
        PlayerHeadState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PlayerWallHeadState {
    facing: HorizontalFacing,
}
impl PlayerWallHeadState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for PlayerWallHeadState {
    fn default() -> Self {
        PlayerWallHeadState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CreeperHeadState {
    rotation: i32,
}
impl CreeperHeadState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for CreeperHeadState {
    fn default() -> Self {
        CreeperHeadState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CreeperWallHeadState {
    facing: HorizontalFacing,
}
impl CreeperWallHeadState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for CreeperWallHeadState {
    fn default() -> Self {
        CreeperWallHeadState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DragonHeadState {
    rotation: i32,
}
impl DragonHeadState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for DragonHeadState {
    fn default() -> Self {
        DragonHeadState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DragonWallHeadState {
    facing: HorizontalFacing,
}
impl DragonWallHeadState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for DragonWallHeadState {
    fn default() -> Self {
        DragonWallHeadState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AnvilState {
    facing: HorizontalFacing,
}
impl AnvilState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for AnvilState {
    fn default() -> Self {
        AnvilState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ChippedAnvilState {
    facing: HorizontalFacing,
}
impl ChippedAnvilState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for ChippedAnvilState {
    fn default() -> Self {
        ChippedAnvilState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DamagedAnvilState {
    facing: HorizontalFacing,
}
impl DamagedAnvilState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for DamagedAnvilState {
    fn default() -> Self {
        DamagedAnvilState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TrappedChestState {
    facing: HorizontalFacing,
    typed: ChestType,
    waterlogged: bool,
}
impl TrappedChestState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_typed(&mut self, typed: ChestType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> ChestType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for TrappedChestState {
    fn default() -> Self {
        TrappedChestState {
            facing: HorizontalFacing::North,
            typed: ChestType::Single,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightWeightedPressurePlateState {
    power: i32,
}
impl LightWeightedPressurePlateState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_power(&mut self, power: i32) -> &mut Self {
        self.power = power;
        self
    }
    pub fn power(&self) -> i32 {
        self.power
    }
}
impl Default for LightWeightedPressurePlateState {
    fn default() -> Self {
        LightWeightedPressurePlateState { power: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct HeavyWeightedPressurePlateState {
    power: i32,
}
impl HeavyWeightedPressurePlateState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_power(&mut self, power: i32) -> &mut Self {
        self.power = power;
        self
    }
    pub fn power(&self) -> i32 {
        self.power
    }
}
impl Default for HeavyWeightedPressurePlateState {
    fn default() -> Self {
        HeavyWeightedPressurePlateState { power: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ComparatorState {
    facing: HorizontalFacing,
    mode: ComparatorMode,
    powered: bool,
}
impl ComparatorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_mode(&mut self, mode: ComparatorMode) -> &mut Self {
        self.mode = mode;
        self
    }
    pub fn mode(&self) -> ComparatorMode {
        self.mode
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for ComparatorState {
    fn default() -> Self {
        ComparatorState {
            facing: HorizontalFacing::North,
            mode: ComparatorMode::Compare,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DaylightDetectorState {
    inverted: bool,
    power: i32,
}
impl DaylightDetectorState {
    pub fn with_inverted(&mut self, inverted: bool) -> &mut Self {
        self.inverted = inverted;
        self
    }
    pub fn inverted(&self) -> bool {
        self.inverted
    }
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_power(&mut self, power: i32) -> &mut Self {
        self.power = power;
        self
    }
    pub fn power(&self) -> i32 {
        self.power
    }
}
impl Default for DaylightDetectorState {
    fn default() -> Self {
        DaylightDetectorState {
            inverted: false,
            power: 0i32,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct HopperState {
    enabled: bool,
    facing: HopperFacing,
}
impl HopperState {
    pub fn with_enabled(&mut self, enabled: bool) -> &mut Self {
        self.enabled = enabled;
        self
    }
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    pub fn with_facing(&mut self, facing: HopperFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HopperFacing {
        self.facing
    }
}
impl Default for HopperState {
    fn default() -> Self {
        HopperState {
            enabled: true,
            facing: HopperFacing::Down,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct QuartzPillarState {
    axis: Axis,
}
impl QuartzPillarState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for QuartzPillarState {
    fn default() -> Self {
        QuartzPillarState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct QuartzStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl QuartzStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for QuartzStairsState {
    fn default() -> Self {
        QuartzStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ActivatorRailState {
    powered: bool,
    shape: StraightRailShape,
    waterlogged: bool,
}
impl ActivatorRailState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_shape(&mut self, shape: StraightRailShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StraightRailShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for ActivatorRailState {
    fn default() -> Self {
        ActivatorRailState {
            powered: false,
            shape: StraightRailShape::NorthSouth,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DropperState {
    facing: AllFacing,
    triggered: bool,
}
impl DropperState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_triggered(&mut self, triggered: bool) -> &mut Self {
        self.triggered = triggered;
        self
    }
    pub fn triggered(&self) -> bool {
        self.triggered
    }
}
impl Default for DropperState {
    fn default() -> Self {
        DropperState {
            facing: AllFacing::North,
            triggered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WhiteStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl WhiteStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for WhiteStainedGlassPaneState {
    fn default() -> Self {
        WhiteStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OrangeStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl OrangeStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for OrangeStainedGlassPaneState {
    fn default() -> Self {
        OrangeStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MagentaStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl MagentaStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for MagentaStainedGlassPaneState {
    fn default() -> Self {
        MagentaStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightBlueStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl LightBlueStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for LightBlueStainedGlassPaneState {
    fn default() -> Self {
        LightBlueStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct YellowStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl YellowStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for YellowStainedGlassPaneState {
    fn default() -> Self {
        YellowStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LimeStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl LimeStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for LimeStainedGlassPaneState {
    fn default() -> Self {
        LimeStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PinkStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl PinkStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for PinkStainedGlassPaneState {
    fn default() -> Self {
        PinkStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GrayStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl GrayStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for GrayStainedGlassPaneState {
    fn default() -> Self {
        GrayStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightGrayStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl LightGrayStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for LightGrayStainedGlassPaneState {
    fn default() -> Self {
        LightGrayStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CyanStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl CyanStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for CyanStainedGlassPaneState {
    fn default() -> Self {
        CyanStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpleStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl PurpleStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for PurpleStainedGlassPaneState {
    fn default() -> Self {
        PurpleStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlueStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl BlueStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for BlueStainedGlassPaneState {
    fn default() -> Self {
        BlueStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrownStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl BrownStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for BrownStainedGlassPaneState {
    fn default() -> Self {
        BrownStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GreenStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl GreenStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for GreenStainedGlassPaneState {
    fn default() -> Self {
        GreenStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl RedStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for RedStainedGlassPaneState {
    fn default() -> Self {
        RedStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackStainedGlassPaneState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl BlackStainedGlassPaneState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for BlackStainedGlassPaneState {
    fn default() -> Self {
        BlackStainedGlassPaneState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl AcaciaStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for AcaciaStairsState {
    fn default() -> Self {
        AcaciaStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl DarkOakStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DarkOakStairsState {
    fn default() -> Self {
        DarkOakStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightState {
    level: i32,
    waterlogged: bool,
}
impl LightState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_level(&mut self, level: i32) -> &mut Self {
        self.level = level;
        self
    }
    pub fn level(&self) -> i32 {
        self.level
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for LightState {
    fn default() -> Self {
        LightState {
            level: 15i32,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct IronTrapdoorState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    open: bool,
    powered: bool,
    waterlogged: bool,
}
impl IronTrapdoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for IronTrapdoorState {
    fn default() -> Self {
        IronTrapdoorState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            open: false,
            powered: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PrismarineStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl PrismarineStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PrismarineStairsState {
    fn default() -> Self {
        PrismarineStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PrismarineBrickStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl PrismarineBrickStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PrismarineBrickStairsState {
    fn default() -> Self {
        PrismarineBrickStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkPrismarineStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl DarkPrismarineStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DarkPrismarineStairsState {
    fn default() -> Self {
        DarkPrismarineStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PrismarineSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl PrismarineSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PrismarineSlabState {
    fn default() -> Self {
        PrismarineSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PrismarineBrickSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl PrismarineBrickSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PrismarineBrickSlabState {
    fn default() -> Self {
        PrismarineBrickSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkPrismarineSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl DarkPrismarineSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DarkPrismarineSlabState {
    fn default() -> Self {
        DarkPrismarineSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct HayBlockState {
    axis: Axis,
}
impl HayBlockState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for HayBlockState {
    fn default() -> Self {
        HayBlockState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SunflowerState {
    half: DoubleBlockHalf,
}
impl SunflowerState {
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
}
impl Default for SunflowerState {
    fn default() -> Self {
        SunflowerState {
            half: DoubleBlockHalf::Lower,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LilacState {
    half: DoubleBlockHalf,
}
impl LilacState {
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
}
impl Default for LilacState {
    fn default() -> Self {
        LilacState {
            half: DoubleBlockHalf::Lower,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RoseBushState {
    half: DoubleBlockHalf,
}
impl RoseBushState {
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
}
impl Default for RoseBushState {
    fn default() -> Self {
        RoseBushState {
            half: DoubleBlockHalf::Lower,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PeonyState {
    half: DoubleBlockHalf,
}
impl PeonyState {
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
}
impl Default for PeonyState {
    fn default() -> Self {
        PeonyState {
            half: DoubleBlockHalf::Lower,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TallGrassState {
    half: DoubleBlockHalf,
}
impl TallGrassState {
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
}
impl Default for TallGrassState {
    fn default() -> Self {
        TallGrassState {
            half: DoubleBlockHalf::Lower,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LargeFernState {
    half: DoubleBlockHalf,
}
impl LargeFernState {
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
}
impl Default for LargeFernState {
    fn default() -> Self {
        LargeFernState {
            half: DoubleBlockHalf::Lower,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WhiteBannerState {
    rotation: i32,
}
impl WhiteBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for WhiteBannerState {
    fn default() -> Self {
        WhiteBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OrangeBannerState {
    rotation: i32,
}
impl OrangeBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for OrangeBannerState {
    fn default() -> Self {
        OrangeBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MagentaBannerState {
    rotation: i32,
}
impl MagentaBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for MagentaBannerState {
    fn default() -> Self {
        MagentaBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightBlueBannerState {
    rotation: i32,
}
impl LightBlueBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for LightBlueBannerState {
    fn default() -> Self {
        LightBlueBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct YellowBannerState {
    rotation: i32,
}
impl YellowBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for YellowBannerState {
    fn default() -> Self {
        YellowBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LimeBannerState {
    rotation: i32,
}
impl LimeBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for LimeBannerState {
    fn default() -> Self {
        LimeBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PinkBannerState {
    rotation: i32,
}
impl PinkBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for PinkBannerState {
    fn default() -> Self {
        PinkBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GrayBannerState {
    rotation: i32,
}
impl GrayBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for GrayBannerState {
    fn default() -> Self {
        GrayBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightGrayBannerState {
    rotation: i32,
}
impl LightGrayBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for LightGrayBannerState {
    fn default() -> Self {
        LightGrayBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CyanBannerState {
    rotation: i32,
}
impl CyanBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for CyanBannerState {
    fn default() -> Self {
        CyanBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpleBannerState {
    rotation: i32,
}
impl PurpleBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for PurpleBannerState {
    fn default() -> Self {
        PurpleBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlueBannerState {
    rotation: i32,
}
impl BlueBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for BlueBannerState {
    fn default() -> Self {
        BlueBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrownBannerState {
    rotation: i32,
}
impl BrownBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for BrownBannerState {
    fn default() -> Self {
        BrownBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GreenBannerState {
    rotation: i32,
}
impl GreenBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for GreenBannerState {
    fn default() -> Self {
        GreenBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedBannerState {
    rotation: i32,
}
impl RedBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for RedBannerState {
    fn default() -> Self {
        RedBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackBannerState {
    rotation: i32,
}
impl BlackBannerState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
}
impl Default for BlackBannerState {
    fn default() -> Self {
        BlackBannerState { rotation: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WhiteWallBannerState {
    facing: HorizontalFacing,
}
impl WhiteWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for WhiteWallBannerState {
    fn default() -> Self {
        WhiteWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OrangeWallBannerState {
    facing: HorizontalFacing,
}
impl OrangeWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for OrangeWallBannerState {
    fn default() -> Self {
        OrangeWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MagentaWallBannerState {
    facing: HorizontalFacing,
}
impl MagentaWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for MagentaWallBannerState {
    fn default() -> Self {
        MagentaWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightBlueWallBannerState {
    facing: HorizontalFacing,
}
impl LightBlueWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for LightBlueWallBannerState {
    fn default() -> Self {
        LightBlueWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct YellowWallBannerState {
    facing: HorizontalFacing,
}
impl YellowWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for YellowWallBannerState {
    fn default() -> Self {
        YellowWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LimeWallBannerState {
    facing: HorizontalFacing,
}
impl LimeWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for LimeWallBannerState {
    fn default() -> Self {
        LimeWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PinkWallBannerState {
    facing: HorizontalFacing,
}
impl PinkWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for PinkWallBannerState {
    fn default() -> Self {
        PinkWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GrayWallBannerState {
    facing: HorizontalFacing,
}
impl GrayWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for GrayWallBannerState {
    fn default() -> Self {
        GrayWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightGrayWallBannerState {
    facing: HorizontalFacing,
}
impl LightGrayWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for LightGrayWallBannerState {
    fn default() -> Self {
        LightGrayWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CyanWallBannerState {
    facing: HorizontalFacing,
}
impl CyanWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for CyanWallBannerState {
    fn default() -> Self {
        CyanWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpleWallBannerState {
    facing: HorizontalFacing,
}
impl PurpleWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for PurpleWallBannerState {
    fn default() -> Self {
        PurpleWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlueWallBannerState {
    facing: HorizontalFacing,
}
impl BlueWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for BlueWallBannerState {
    fn default() -> Self {
        BlueWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrownWallBannerState {
    facing: HorizontalFacing,
}
impl BrownWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for BrownWallBannerState {
    fn default() -> Self {
        BrownWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GreenWallBannerState {
    facing: HorizontalFacing,
}
impl GreenWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for GreenWallBannerState {
    fn default() -> Self {
        GreenWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedWallBannerState {
    facing: HorizontalFacing,
}
impl RedWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for RedWallBannerState {
    fn default() -> Self {
        RedWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackWallBannerState {
    facing: HorizontalFacing,
}
impl BlackWallBannerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for BlackWallBannerState {
    fn default() -> Self {
        BlackWallBannerState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedSandstoneStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl RedSandstoneStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for RedSandstoneStairsState {
    fn default() -> Self {
        RedSandstoneStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OakSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl OakSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for OakSlabState {
    fn default() -> Self {
        OakSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl SpruceSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SpruceSlabState {
    fn default() -> Self {
        SpruceSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl BirchSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BirchSlabState {
    fn default() -> Self {
        BirchSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl JungleSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for JungleSlabState {
    fn default() -> Self {
        JungleSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl AcaciaSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for AcaciaSlabState {
    fn default() -> Self {
        AcaciaSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl DarkOakSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DarkOakSlabState {
    fn default() -> Self {
        DarkOakSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl StoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for StoneSlabState {
    fn default() -> Self {
        StoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SmoothStoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl SmoothStoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SmoothStoneSlabState {
    fn default() -> Self {
        SmoothStoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SandstoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl SandstoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SandstoneSlabState {
    fn default() -> Self {
        SandstoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CutSandstoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl CutSandstoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CutSandstoneSlabState {
    fn default() -> Self {
        CutSandstoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PetrifiedOakSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl PetrifiedOakSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PetrifiedOakSlabState {
    fn default() -> Self {
        PetrifiedOakSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CobblestoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl CobblestoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CobblestoneSlabState {
    fn default() -> Self {
        CobblestoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrickSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl BrickSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BrickSlabState {
    fn default() -> Self {
        BrickSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StoneBrickSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl StoneBrickSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for StoneBrickSlabState {
    fn default() -> Self {
        StoneBrickSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct NetherBrickSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl NetherBrickSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for NetherBrickSlabState {
    fn default() -> Self {
        NetherBrickSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct QuartzSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl QuartzSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for QuartzSlabState {
    fn default() -> Self {
        QuartzSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedSandstoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl RedSandstoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for RedSandstoneSlabState {
    fn default() -> Self {
        RedSandstoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CutRedSandstoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl CutRedSandstoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CutRedSandstoneSlabState {
    fn default() -> Self {
        CutRedSandstoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpurSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl PurpurSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PurpurSlabState {
    fn default() -> Self {
        PurpurSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceFenceGateState {
    facing: HorizontalFacing,
    in_wall: bool,
    open: bool,
    powered: bool,
}
impl SpruceFenceGateState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_in_wall(&mut self, in_wall: bool) -> &mut Self {
        self.in_wall = in_wall;
        self
    }
    pub fn in_wall(&self) -> bool {
        self.in_wall
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for SpruceFenceGateState {
    fn default() -> Self {
        SpruceFenceGateState {
            facing: HorizontalFacing::North,
            in_wall: false,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchFenceGateState {
    facing: HorizontalFacing,
    in_wall: bool,
    open: bool,
    powered: bool,
}
impl BirchFenceGateState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_in_wall(&mut self, in_wall: bool) -> &mut Self {
        self.in_wall = in_wall;
        self
    }
    pub fn in_wall(&self) -> bool {
        self.in_wall
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for BirchFenceGateState {
    fn default() -> Self {
        BirchFenceGateState {
            facing: HorizontalFacing::North,
            in_wall: false,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleFenceGateState {
    facing: HorizontalFacing,
    in_wall: bool,
    open: bool,
    powered: bool,
}
impl JungleFenceGateState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_in_wall(&mut self, in_wall: bool) -> &mut Self {
        self.in_wall = in_wall;
        self
    }
    pub fn in_wall(&self) -> bool {
        self.in_wall
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for JungleFenceGateState {
    fn default() -> Self {
        JungleFenceGateState {
            facing: HorizontalFacing::North,
            in_wall: false,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaFenceGateState {
    facing: HorizontalFacing,
    in_wall: bool,
    open: bool,
    powered: bool,
}
impl AcaciaFenceGateState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_in_wall(&mut self, in_wall: bool) -> &mut Self {
        self.in_wall = in_wall;
        self
    }
    pub fn in_wall(&self) -> bool {
        self.in_wall
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for AcaciaFenceGateState {
    fn default() -> Self {
        AcaciaFenceGateState {
            facing: HorizontalFacing::North,
            in_wall: false,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakFenceGateState {
    facing: HorizontalFacing,
    in_wall: bool,
    open: bool,
    powered: bool,
}
impl DarkOakFenceGateState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_in_wall(&mut self, in_wall: bool) -> &mut Self {
        self.in_wall = in_wall;
        self
    }
    pub fn in_wall(&self) -> bool {
        self.in_wall
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for DarkOakFenceGateState {
    fn default() -> Self {
        DarkOakFenceGateState {
            facing: HorizontalFacing::North,
            in_wall: false,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceFenceState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl SpruceFenceState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for SpruceFenceState {
    fn default() -> Self {
        SpruceFenceState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchFenceState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl BirchFenceState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for BirchFenceState {
    fn default() -> Self {
        BirchFenceState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleFenceState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl JungleFenceState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for JungleFenceState {
    fn default() -> Self {
        JungleFenceState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaFenceState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl AcaciaFenceState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for AcaciaFenceState {
    fn default() -> Self {
        AcaciaFenceState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakFenceState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl DarkOakFenceState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for DarkOakFenceState {
    fn default() -> Self {
        DarkOakFenceState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SpruceDoorState {
    facing: HorizontalFacing,
    half: DoubleBlockHalf,
    hinge: Hinge,
    open: bool,
    powered: bool,
}
impl SpruceDoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
    pub fn with_hinge(&mut self, hinge: Hinge) -> &mut Self {
        self.hinge = hinge;
        self
    }
    pub fn hinge(&self) -> Hinge {
        self.hinge
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for SpruceDoorState {
    fn default() -> Self {
        SpruceDoorState {
            facing: HorizontalFacing::North,
            half: DoubleBlockHalf::Lower,
            hinge: Hinge::Left,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BirchDoorState {
    facing: HorizontalFacing,
    half: DoubleBlockHalf,
    hinge: Hinge,
    open: bool,
    powered: bool,
}
impl BirchDoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
    pub fn with_hinge(&mut self, hinge: Hinge) -> &mut Self {
        self.hinge = hinge;
        self
    }
    pub fn hinge(&self) -> Hinge {
        self.hinge
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for BirchDoorState {
    fn default() -> Self {
        BirchDoorState {
            facing: HorizontalFacing::North,
            half: DoubleBlockHalf::Lower,
            hinge: Hinge::Left,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JungleDoorState {
    facing: HorizontalFacing,
    half: DoubleBlockHalf,
    hinge: Hinge,
    open: bool,
    powered: bool,
}
impl JungleDoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
    pub fn with_hinge(&mut self, hinge: Hinge) -> &mut Self {
        self.hinge = hinge;
        self
    }
    pub fn hinge(&self) -> Hinge {
        self.hinge
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for JungleDoorState {
    fn default() -> Self {
        JungleDoorState {
            facing: HorizontalFacing::North,
            half: DoubleBlockHalf::Lower,
            hinge: Hinge::Left,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AcaciaDoorState {
    facing: HorizontalFacing,
    half: DoubleBlockHalf,
    hinge: Hinge,
    open: bool,
    powered: bool,
}
impl AcaciaDoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
    pub fn with_hinge(&mut self, hinge: Hinge) -> &mut Self {
        self.hinge = hinge;
        self
    }
    pub fn hinge(&self) -> Hinge {
        self.hinge
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for AcaciaDoorState {
    fn default() -> Self {
        AcaciaDoorState {
            facing: HorizontalFacing::North,
            half: DoubleBlockHalf::Lower,
            hinge: Hinge::Left,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DarkOakDoorState {
    facing: HorizontalFacing,
    half: DoubleBlockHalf,
    hinge: Hinge,
    open: bool,
    powered: bool,
}
impl DarkOakDoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
    pub fn with_hinge(&mut self, hinge: Hinge) -> &mut Self {
        self.hinge = hinge;
        self
    }
    pub fn hinge(&self) -> Hinge {
        self.hinge
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for DarkOakDoorState {
    fn default() -> Self {
        DarkOakDoorState {
            facing: HorizontalFacing::North,
            half: DoubleBlockHalf::Lower,
            hinge: Hinge::Left,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct EndRodState {
    facing: AllFacing,
}
impl EndRodState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for EndRodState {
    fn default() -> Self {
        EndRodState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ChorusPlantState {
    down: bool,
    east: bool,
    north: bool,
    south: bool,
    up: bool,
    west: bool,
}
impl ChorusPlantState {
    pub fn with_down(&mut self, down: bool) -> &mut Self {
        self.down = down;
        self
    }
    pub fn down(&self) -> bool {
        self.down
    }
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for ChorusPlantState {
    fn default() -> Self {
        ChorusPlantState {
            down: false,
            east: false,
            north: false,
            south: false,
            up: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ChorusFlowerState {
    age: i32,
}
impl ChorusFlowerState {
    #[doc = "This is a value between 0 and 5 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for ChorusFlowerState {
    fn default() -> Self {
        ChorusFlowerState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpurPillarState {
    axis: Axis,
}
impl PurpurPillarState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for PurpurPillarState {
    fn default() -> Self {
        PurpurPillarState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpurStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl PurpurStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PurpurStairsState {
    fn default() -> Self {
        PurpurStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BeetrootsState {
    age: i32,
}
impl BeetrootsState {
    #[doc = "This is a value between 0 and 3 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for BeetrootsState {
    fn default() -> Self {
        BeetrootsState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RepeatingCommandBlockState {
    conditional: bool,
    facing: AllFacing,
}
impl RepeatingCommandBlockState {
    pub fn with_conditional(&mut self, conditional: bool) -> &mut Self {
        self.conditional = conditional;
        self
    }
    pub fn conditional(&self) -> bool {
        self.conditional
    }
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for RepeatingCommandBlockState {
    fn default() -> Self {
        RepeatingCommandBlockState {
            conditional: false,
            facing: AllFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ChainCommandBlockState {
    conditional: bool,
    facing: AllFacing,
}
impl ChainCommandBlockState {
    pub fn with_conditional(&mut self, conditional: bool) -> &mut Self {
        self.conditional = conditional;
        self
    }
    pub fn conditional(&self) -> bool {
        self.conditional
    }
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for ChainCommandBlockState {
    fn default() -> Self {
        ChainCommandBlockState {
            conditional: false,
            facing: AllFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct FrostedIceState {
    age: i32,
}
impl FrostedIceState {
    #[doc = "This is a value between 0 and 3 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for FrostedIceState {
    fn default() -> Self {
        FrostedIceState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BoneBlockState {
    axis: Axis,
}
impl BoneBlockState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for BoneBlockState {
    fn default() -> Self {
        BoneBlockState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ObserverState {
    facing: AllFacing,
    powered: bool,
}
impl ObserverState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for ObserverState {
    fn default() -> Self {
        ObserverState {
            facing: AllFacing::South,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ShulkerBoxState {
    facing: AllFacing,
}
impl ShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for ShulkerBoxState {
    fn default() -> Self {
        ShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WhiteShulkerBoxState {
    facing: AllFacing,
}
impl WhiteShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for WhiteShulkerBoxState {
    fn default() -> Self {
        WhiteShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OrangeShulkerBoxState {
    facing: AllFacing,
}
impl OrangeShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for OrangeShulkerBoxState {
    fn default() -> Self {
        OrangeShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MagentaShulkerBoxState {
    facing: AllFacing,
}
impl MagentaShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for MagentaShulkerBoxState {
    fn default() -> Self {
        MagentaShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightBlueShulkerBoxState {
    facing: AllFacing,
}
impl LightBlueShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for LightBlueShulkerBoxState {
    fn default() -> Self {
        LightBlueShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct YellowShulkerBoxState {
    facing: AllFacing,
}
impl YellowShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for YellowShulkerBoxState {
    fn default() -> Self {
        YellowShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LimeShulkerBoxState {
    facing: AllFacing,
}
impl LimeShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for LimeShulkerBoxState {
    fn default() -> Self {
        LimeShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PinkShulkerBoxState {
    facing: AllFacing,
}
impl PinkShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for PinkShulkerBoxState {
    fn default() -> Self {
        PinkShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GrayShulkerBoxState {
    facing: AllFacing,
}
impl GrayShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for GrayShulkerBoxState {
    fn default() -> Self {
        GrayShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightGrayShulkerBoxState {
    facing: AllFacing,
}
impl LightGrayShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for LightGrayShulkerBoxState {
    fn default() -> Self {
        LightGrayShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CyanShulkerBoxState {
    facing: AllFacing,
}
impl CyanShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for CyanShulkerBoxState {
    fn default() -> Self {
        CyanShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpleShulkerBoxState {
    facing: AllFacing,
}
impl PurpleShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for PurpleShulkerBoxState {
    fn default() -> Self {
        PurpleShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlueShulkerBoxState {
    facing: AllFacing,
}
impl BlueShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for BlueShulkerBoxState {
    fn default() -> Self {
        BlueShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrownShulkerBoxState {
    facing: AllFacing,
}
impl BrownShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for BrownShulkerBoxState {
    fn default() -> Self {
        BrownShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GreenShulkerBoxState {
    facing: AllFacing,
}
impl GreenShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for GreenShulkerBoxState {
    fn default() -> Self {
        GreenShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedShulkerBoxState {
    facing: AllFacing,
}
impl RedShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for RedShulkerBoxState {
    fn default() -> Self {
        RedShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackShulkerBoxState {
    facing: AllFacing,
}
impl BlackShulkerBoxState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
}
impl Default for BlackShulkerBoxState {
    fn default() -> Self {
        BlackShulkerBoxState {
            facing: AllFacing::Up,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WhiteGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl WhiteGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for WhiteGlazedTerracottaState {
    fn default() -> Self {
        WhiteGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OrangeGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl OrangeGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for OrangeGlazedTerracottaState {
    fn default() -> Self {
        OrangeGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MagentaGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl MagentaGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for MagentaGlazedTerracottaState {
    fn default() -> Self {
        MagentaGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightBlueGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl LightBlueGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for LightBlueGlazedTerracottaState {
    fn default() -> Self {
        LightBlueGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct YellowGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl YellowGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for YellowGlazedTerracottaState {
    fn default() -> Self {
        YellowGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LimeGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl LimeGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for LimeGlazedTerracottaState {
    fn default() -> Self {
        LimeGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PinkGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl PinkGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for PinkGlazedTerracottaState {
    fn default() -> Self {
        PinkGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GrayGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl GrayGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for GrayGlazedTerracottaState {
    fn default() -> Self {
        GrayGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightGrayGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl LightGrayGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for LightGrayGlazedTerracottaState {
    fn default() -> Self {
        LightGrayGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CyanGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl CyanGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for CyanGlazedTerracottaState {
    fn default() -> Self {
        CyanGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpleGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl PurpleGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for PurpleGlazedTerracottaState {
    fn default() -> Self {
        PurpleGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlueGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl BlueGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for BlueGlazedTerracottaState {
    fn default() -> Self {
        BlueGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrownGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl BrownGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for BrownGlazedTerracottaState {
    fn default() -> Self {
        BrownGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GreenGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl GreenGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for GreenGlazedTerracottaState {
    fn default() -> Self {
        GreenGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl RedGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for RedGlazedTerracottaState {
    fn default() -> Self {
        RedGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackGlazedTerracottaState {
    facing: HorizontalFacing,
}
impl BlackGlazedTerracottaState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for BlackGlazedTerracottaState {
    fn default() -> Self {
        BlackGlazedTerracottaState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct KelpState {
    age: i32,
}
impl KelpState {
    #[doc = "This is a value between 0 and 25 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for KelpState {
    fn default() -> Self {
        KelpState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TurtleEggState {
    eggs: i32,
    hatch: i32,
}
impl TurtleEggState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_eggs(&mut self, eggs: i32) -> &mut Self {
        self.eggs = eggs - 1;
        self
    }
    pub fn eggs(&self) -> i32 {
        self.eggs + 1
    }
    #[doc = "This is a value between 0 and 2 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_hatch(&mut self, hatch: i32) -> &mut Self {
        self.hatch = hatch;
        self
    }
    pub fn hatch(&self) -> i32 {
        self.hatch
    }
}
impl Default for TurtleEggState {
    fn default() -> Self {
        TurtleEggState {
            eggs: 0i32,
            hatch: 0i32,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadTubeCoralState {
    waterlogged: bool,
}
impl DeadTubeCoralState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadTubeCoralState {
    fn default() -> Self {
        DeadTubeCoralState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadBrainCoralState {
    waterlogged: bool,
}
impl DeadBrainCoralState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadBrainCoralState {
    fn default() -> Self {
        DeadBrainCoralState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadBubbleCoralState {
    waterlogged: bool,
}
impl DeadBubbleCoralState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadBubbleCoralState {
    fn default() -> Self {
        DeadBubbleCoralState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadFireCoralState {
    waterlogged: bool,
}
impl DeadFireCoralState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadFireCoralState {
    fn default() -> Self {
        DeadFireCoralState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadHornCoralState {
    waterlogged: bool,
}
impl DeadHornCoralState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadHornCoralState {
    fn default() -> Self {
        DeadHornCoralState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TubeCoralState {
    waterlogged: bool,
}
impl TubeCoralState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for TubeCoralState {
    fn default() -> Self {
        TubeCoralState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrainCoralState {
    waterlogged: bool,
}
impl BrainCoralState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BrainCoralState {
    fn default() -> Self {
        BrainCoralState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BubbleCoralState {
    waterlogged: bool,
}
impl BubbleCoralState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BubbleCoralState {
    fn default() -> Self {
        BubbleCoralState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct FireCoralState {
    waterlogged: bool,
}
impl FireCoralState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for FireCoralState {
    fn default() -> Self {
        FireCoralState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct HornCoralState {
    waterlogged: bool,
}
impl HornCoralState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for HornCoralState {
    fn default() -> Self {
        HornCoralState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadTubeCoralFanState {
    waterlogged: bool,
}
impl DeadTubeCoralFanState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadTubeCoralFanState {
    fn default() -> Self {
        DeadTubeCoralFanState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadBrainCoralFanState {
    waterlogged: bool,
}
impl DeadBrainCoralFanState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadBrainCoralFanState {
    fn default() -> Self {
        DeadBrainCoralFanState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadBubbleCoralFanState {
    waterlogged: bool,
}
impl DeadBubbleCoralFanState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadBubbleCoralFanState {
    fn default() -> Self {
        DeadBubbleCoralFanState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadFireCoralFanState {
    waterlogged: bool,
}
impl DeadFireCoralFanState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadFireCoralFanState {
    fn default() -> Self {
        DeadFireCoralFanState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadHornCoralFanState {
    waterlogged: bool,
}
impl DeadHornCoralFanState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadHornCoralFanState {
    fn default() -> Self {
        DeadHornCoralFanState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TubeCoralFanState {
    waterlogged: bool,
}
impl TubeCoralFanState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for TubeCoralFanState {
    fn default() -> Self {
        TubeCoralFanState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrainCoralFanState {
    waterlogged: bool,
}
impl BrainCoralFanState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BrainCoralFanState {
    fn default() -> Self {
        BrainCoralFanState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BubbleCoralFanState {
    waterlogged: bool,
}
impl BubbleCoralFanState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BubbleCoralFanState {
    fn default() -> Self {
        BubbleCoralFanState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct FireCoralFanState {
    waterlogged: bool,
}
impl FireCoralFanState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for FireCoralFanState {
    fn default() -> Self {
        FireCoralFanState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct HornCoralFanState {
    waterlogged: bool,
}
impl HornCoralFanState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for HornCoralFanState {
    fn default() -> Self {
        HornCoralFanState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadTubeCoralWallFanState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl DeadTubeCoralWallFanState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadTubeCoralWallFanState {
    fn default() -> Self {
        DeadTubeCoralWallFanState {
            facing: HorizontalFacing::North,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadBrainCoralWallFanState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl DeadBrainCoralWallFanState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadBrainCoralWallFanState {
    fn default() -> Self {
        DeadBrainCoralWallFanState {
            facing: HorizontalFacing::North,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadBubbleCoralWallFanState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl DeadBubbleCoralWallFanState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadBubbleCoralWallFanState {
    fn default() -> Self {
        DeadBubbleCoralWallFanState {
            facing: HorizontalFacing::North,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadFireCoralWallFanState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl DeadFireCoralWallFanState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadFireCoralWallFanState {
    fn default() -> Self {
        DeadFireCoralWallFanState {
            facing: HorizontalFacing::North,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeadHornCoralWallFanState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl DeadHornCoralWallFanState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeadHornCoralWallFanState {
    fn default() -> Self {
        DeadHornCoralWallFanState {
            facing: HorizontalFacing::North,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TubeCoralWallFanState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl TubeCoralWallFanState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for TubeCoralWallFanState {
    fn default() -> Self {
        TubeCoralWallFanState {
            facing: HorizontalFacing::North,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrainCoralWallFanState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl BrainCoralWallFanState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BrainCoralWallFanState {
    fn default() -> Self {
        BrainCoralWallFanState {
            facing: HorizontalFacing::North,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BubbleCoralWallFanState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl BubbleCoralWallFanState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BubbleCoralWallFanState {
    fn default() -> Self {
        BubbleCoralWallFanState {
            facing: HorizontalFacing::North,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct FireCoralWallFanState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl FireCoralWallFanState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for FireCoralWallFanState {
    fn default() -> Self {
        FireCoralWallFanState {
            facing: HorizontalFacing::North,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct HornCoralWallFanState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl HornCoralWallFanState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for HornCoralWallFanState {
    fn default() -> Self {
        HornCoralWallFanState {
            facing: HorizontalFacing::North,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SeaPickleState {
    pickles: i32,
    waterlogged: bool,
}
impl SeaPickleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_pickles(&mut self, pickles: i32) -> &mut Self {
        self.pickles = pickles - 1;
        self
    }
    pub fn pickles(&self) -> i32 {
        self.pickles + 1
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SeaPickleState {
    fn default() -> Self {
        SeaPickleState {
            pickles: 0i32,
            waterlogged: true,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ConduitState {
    waterlogged: bool,
}
impl ConduitState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for ConduitState {
    fn default() -> Self {
        ConduitState { waterlogged: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BambooState {
    age: i32,
    leaves: Leaves,
    stage: i32,
}
impl BambooState {
    #[doc = "This is a value between 0 and 1 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
    pub fn with_leaves(&mut self, leaves: Leaves) -> &mut Self {
        self.leaves = leaves;
        self
    }
    pub fn leaves(&self) -> Leaves {
        self.leaves
    }
    #[doc = "This is a value between 0 and 1 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_stage(&mut self, stage: i32) -> &mut Self {
        self.stage = stage;
        self
    }
    pub fn stage(&self) -> i32 {
        self.stage
    }
}
impl Default for BambooState {
    fn default() -> Self {
        BambooState {
            age: 0i32,
            leaves: Leaves::None,
            stage: 0i32,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BubbleColumnState {
    drag: bool,
}
impl BubbleColumnState {
    pub fn with_drag(&mut self, drag: bool) -> &mut Self {
        self.drag = drag;
        self
    }
    pub fn drag(&self) -> bool {
        self.drag
    }
}
impl Default for BubbleColumnState {
    fn default() -> Self {
        BubbleColumnState { drag: true }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedGraniteStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl PolishedGraniteStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedGraniteStairsState {
    fn default() -> Self {
        PolishedGraniteStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SmoothRedSandstoneStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl SmoothRedSandstoneStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SmoothRedSandstoneStairsState {
    fn default() -> Self {
        SmoothRedSandstoneStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MossyStoneBrickStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl MossyStoneBrickStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for MossyStoneBrickStairsState {
    fn default() -> Self {
        MossyStoneBrickStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedDioriteStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl PolishedDioriteStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedDioriteStairsState {
    fn default() -> Self {
        PolishedDioriteStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MossyCobblestoneStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl MossyCobblestoneStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for MossyCobblestoneStairsState {
    fn default() -> Self {
        MossyCobblestoneStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct EndStoneBrickStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl EndStoneBrickStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for EndStoneBrickStairsState {
    fn default() -> Self {
        EndStoneBrickStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StoneStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl StoneStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for StoneStairsState {
    fn default() -> Self {
        StoneStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SmoothSandstoneStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl SmoothSandstoneStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SmoothSandstoneStairsState {
    fn default() -> Self {
        SmoothSandstoneStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SmoothQuartzStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl SmoothQuartzStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SmoothQuartzStairsState {
    fn default() -> Self {
        SmoothQuartzStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GraniteStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl GraniteStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for GraniteStairsState {
    fn default() -> Self {
        GraniteStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AndesiteStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl AndesiteStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for AndesiteStairsState {
    fn default() -> Self {
        AndesiteStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedNetherBrickStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl RedNetherBrickStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for RedNetherBrickStairsState {
    fn default() -> Self {
        RedNetherBrickStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedAndesiteStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl PolishedAndesiteStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedAndesiteStairsState {
    fn default() -> Self {
        PolishedAndesiteStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DioriteStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl DioriteStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DioriteStairsState {
    fn default() -> Self {
        DioriteStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedGraniteSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl PolishedGraniteSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedGraniteSlabState {
    fn default() -> Self {
        PolishedGraniteSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SmoothRedSandstoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl SmoothRedSandstoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SmoothRedSandstoneSlabState {
    fn default() -> Self {
        SmoothRedSandstoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MossyStoneBrickSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl MossyStoneBrickSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for MossyStoneBrickSlabState {
    fn default() -> Self {
        MossyStoneBrickSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedDioriteSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl PolishedDioriteSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedDioriteSlabState {
    fn default() -> Self {
        PolishedDioriteSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MossyCobblestoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl MossyCobblestoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for MossyCobblestoneSlabState {
    fn default() -> Self {
        MossyCobblestoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct EndStoneBrickSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl EndStoneBrickSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for EndStoneBrickSlabState {
    fn default() -> Self {
        EndStoneBrickSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SmoothSandstoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl SmoothSandstoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SmoothSandstoneSlabState {
    fn default() -> Self {
        SmoothSandstoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SmoothQuartzSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl SmoothQuartzSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SmoothQuartzSlabState {
    fn default() -> Self {
        SmoothQuartzSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GraniteSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl GraniteSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for GraniteSlabState {
    fn default() -> Self {
        GraniteSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AndesiteSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl AndesiteSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for AndesiteSlabState {
    fn default() -> Self {
        AndesiteSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedNetherBrickSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl RedNetherBrickSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for RedNetherBrickSlabState {
    fn default() -> Self {
        RedNetherBrickSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedAndesiteSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl PolishedAndesiteSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedAndesiteSlabState {
    fn default() -> Self {
        PolishedAndesiteSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DioriteSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl DioriteSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DioriteSlabState {
    fn default() -> Self {
        DioriteSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrickWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl BrickWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for BrickWallState {
    fn default() -> Self {
        BrickWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PrismarineWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl PrismarineWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for PrismarineWallState {
    fn default() -> Self {
        PrismarineWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedSandstoneWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl RedSandstoneWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for RedSandstoneWallState {
    fn default() -> Self {
        RedSandstoneWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MossyStoneBrickWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl MossyStoneBrickWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for MossyStoneBrickWallState {
    fn default() -> Self {
        MossyStoneBrickWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GraniteWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl GraniteWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for GraniteWallState {
    fn default() -> Self {
        GraniteWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StoneBrickWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl StoneBrickWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for StoneBrickWallState {
    fn default() -> Self {
        StoneBrickWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct NetherBrickWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl NetherBrickWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for NetherBrickWallState {
    fn default() -> Self {
        NetherBrickWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AndesiteWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl AndesiteWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for AndesiteWallState {
    fn default() -> Self {
        AndesiteWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedNetherBrickWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl RedNetherBrickWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for RedNetherBrickWallState {
    fn default() -> Self {
        RedNetherBrickWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SandstoneWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl SandstoneWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for SandstoneWallState {
    fn default() -> Self {
        SandstoneWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct EndStoneBrickWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl EndStoneBrickWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for EndStoneBrickWallState {
    fn default() -> Self {
        EndStoneBrickWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DioriteWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl DioriteWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for DioriteWallState {
    fn default() -> Self {
        DioriteWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ScaffoldingState {
    bottom: bool,
    distance: i32,
    waterlogged: bool,
}
impl ScaffoldingState {
    pub fn with_bottom(&mut self, bottom: bool) -> &mut Self {
        self.bottom = bottom;
        self
    }
    pub fn bottom(&self) -> bool {
        self.bottom
    }
    #[doc = "This is a value between 0 and 7 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_distance(&mut self, distance: i32) -> &mut Self {
        self.distance = distance;
        self
    }
    pub fn distance(&self) -> i32 {
        self.distance
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for ScaffoldingState {
    fn default() -> Self {
        ScaffoldingState {
            bottom: false,
            distance: 7i32,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LoomState {
    facing: HorizontalFacing,
}
impl LoomState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for LoomState {
    fn default() -> Self {
        LoomState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BarrelState {
    facing: AllFacing,
    open: bool,
}
impl BarrelState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
}
impl Default for BarrelState {
    fn default() -> Self {
        BarrelState {
            facing: AllFacing::North,
            open: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SmokerState {
    facing: HorizontalFacing,
    lit: bool,
}
impl SmokerState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for SmokerState {
    fn default() -> Self {
        SmokerState {
            facing: HorizontalFacing::North,
            lit: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlastFurnaceState {
    facing: HorizontalFacing,
    lit: bool,
}
impl BlastFurnaceState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for BlastFurnaceState {
    fn default() -> Self {
        BlastFurnaceState {
            facing: HorizontalFacing::North,
            lit: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GrindstoneState {
    face: Face,
    facing: HorizontalFacing,
}
impl GrindstoneState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for GrindstoneState {
    fn default() -> Self {
        GrindstoneState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LecternState {
    facing: HorizontalFacing,
    has_book: bool,
    powered: bool,
}
impl LecternState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_has_book(&mut self, has_book: bool) -> &mut Self {
        self.has_book = has_book;
        self
    }
    pub fn has_book(&self) -> bool {
        self.has_book
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for LecternState {
    fn default() -> Self {
        LecternState {
            facing: HorizontalFacing::North,
            has_book: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StonecutterState {
    facing: HorizontalFacing,
}
impl StonecutterState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
}
impl Default for StonecutterState {
    fn default() -> Self {
        StonecutterState {
            facing: HorizontalFacing::North,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BellState {
    attachment: Attachment,
    facing: HorizontalFacing,
    powered: bool,
}
impl BellState {
    pub fn with_attachment(&mut self, attachment: Attachment) -> &mut Self {
        self.attachment = attachment;
        self
    }
    pub fn attachment(&self) -> Attachment {
        self.attachment
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for BellState {
    fn default() -> Self {
        BellState {
            attachment: Attachment::Floor,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LanternState {
    hanging: bool,
    waterlogged: bool,
}
impl LanternState {
    pub fn with_hanging(&mut self, hanging: bool) -> &mut Self {
        self.hanging = hanging;
        self
    }
    pub fn hanging(&self) -> bool {
        self.hanging
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for LanternState {
    fn default() -> Self {
        LanternState {
            hanging: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SoulLanternState {
    hanging: bool,
    waterlogged: bool,
}
impl SoulLanternState {
    pub fn with_hanging(&mut self, hanging: bool) -> &mut Self {
        self.hanging = hanging;
        self
    }
    pub fn hanging(&self) -> bool {
        self.hanging
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SoulLanternState {
    fn default() -> Self {
        SoulLanternState {
            hanging: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CampfireState {
    facing: HorizontalFacing,
    lit: bool,
    signal_fire: bool,
    waterlogged: bool,
}
impl CampfireState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_signal_fire(&mut self, signal_fire: bool) -> &mut Self {
        self.signal_fire = signal_fire;
        self
    }
    pub fn signal_fire(&self) -> bool {
        self.signal_fire
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CampfireState {
    fn default() -> Self {
        CampfireState {
            facing: HorizontalFacing::North,
            lit: true,
            signal_fire: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SoulCampfireState {
    facing: HorizontalFacing,
    lit: bool,
    signal_fire: bool,
    waterlogged: bool,
}
impl SoulCampfireState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_signal_fire(&mut self, signal_fire: bool) -> &mut Self {
        self.signal_fire = signal_fire;
        self
    }
    pub fn signal_fire(&self) -> bool {
        self.signal_fire
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SoulCampfireState {
    fn default() -> Self {
        SoulCampfireState {
            facing: HorizontalFacing::North,
            lit: true,
            signal_fire: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SweetBerryBushState {
    age: i32,
}
impl SweetBerryBushState {
    #[doc = "This is a value between 0 and 3 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for SweetBerryBushState {
    fn default() -> Self {
        SweetBerryBushState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedStemState {
    axis: Axis,
}
impl WarpedStemState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for WarpedStemState {
    fn default() -> Self {
        WarpedStemState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedWarpedStemState {
    axis: Axis,
}
impl StrippedWarpedStemState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedWarpedStemState {
    fn default() -> Self {
        StrippedWarpedStemState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedHyphaeState {
    axis: Axis,
}
impl WarpedHyphaeState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for WarpedHyphaeState {
    fn default() -> Self {
        WarpedHyphaeState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedWarpedHyphaeState {
    axis: Axis,
}
impl StrippedWarpedHyphaeState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedWarpedHyphaeState {
    fn default() -> Self {
        StrippedWarpedHyphaeState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonStemState {
    axis: Axis,
}
impl CrimsonStemState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for CrimsonStemState {
    fn default() -> Self {
        CrimsonStemState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedCrimsonStemState {
    axis: Axis,
}
impl StrippedCrimsonStemState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedCrimsonStemState {
    fn default() -> Self {
        StrippedCrimsonStemState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonHyphaeState {
    axis: Axis,
}
impl CrimsonHyphaeState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for CrimsonHyphaeState {
    fn default() -> Self {
        CrimsonHyphaeState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StrippedCrimsonHyphaeState {
    axis: Axis,
}
impl StrippedCrimsonHyphaeState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for StrippedCrimsonHyphaeState {
    fn default() -> Self {
        StrippedCrimsonHyphaeState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WeepingVinesState {
    age: i32,
}
impl WeepingVinesState {
    #[doc = "This is a value between 0 and 25 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for WeepingVinesState {
    fn default() -> Self {
        WeepingVinesState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TwistingVinesState {
    age: i32,
}
impl TwistingVinesState {
    #[doc = "This is a value between 0 and 25 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
}
impl Default for TwistingVinesState {
    fn default() -> Self {
        TwistingVinesState { age: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl CrimsonSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CrimsonSlabState {
    fn default() -> Self {
        CrimsonSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl WarpedSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WarpedSlabState {
    fn default() -> Self {
        WarpedSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonPressurePlateState {
    powered: bool,
}
impl CrimsonPressurePlateState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for CrimsonPressurePlateState {
    fn default() -> Self {
        CrimsonPressurePlateState { powered: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedPressurePlateState {
    powered: bool,
}
impl WarpedPressurePlateState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for WarpedPressurePlateState {
    fn default() -> Self {
        WarpedPressurePlateState { powered: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonFenceState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl CrimsonFenceState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for CrimsonFenceState {
    fn default() -> Self {
        CrimsonFenceState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedFenceState {
    east: bool,
    north: bool,
    south: bool,
    waterlogged: bool,
    west: bool,
}
impl WarpedFenceState {
    pub fn with_east(&mut self, east: bool) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> bool {
        self.east
    }
    pub fn with_north(&mut self, north: bool) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> bool {
        self.north
    }
    pub fn with_south(&mut self, south: bool) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> bool {
        self.south
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: bool) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> bool {
        self.west
    }
}
impl Default for WarpedFenceState {
    fn default() -> Self {
        WarpedFenceState {
            east: false,
            north: false,
            south: false,
            waterlogged: false,
            west: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonTrapdoorState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    open: bool,
    powered: bool,
    waterlogged: bool,
}
impl CrimsonTrapdoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CrimsonTrapdoorState {
    fn default() -> Self {
        CrimsonTrapdoorState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            open: false,
            powered: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedTrapdoorState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    open: bool,
    powered: bool,
    waterlogged: bool,
}
impl WarpedTrapdoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WarpedTrapdoorState {
    fn default() -> Self {
        WarpedTrapdoorState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            open: false,
            powered: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonFenceGateState {
    facing: HorizontalFacing,
    in_wall: bool,
    open: bool,
    powered: bool,
}
impl CrimsonFenceGateState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_in_wall(&mut self, in_wall: bool) -> &mut Self {
        self.in_wall = in_wall;
        self
    }
    pub fn in_wall(&self) -> bool {
        self.in_wall
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for CrimsonFenceGateState {
    fn default() -> Self {
        CrimsonFenceGateState {
            facing: HorizontalFacing::North,
            in_wall: false,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedFenceGateState {
    facing: HorizontalFacing,
    in_wall: bool,
    open: bool,
    powered: bool,
}
impl WarpedFenceGateState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_in_wall(&mut self, in_wall: bool) -> &mut Self {
        self.in_wall = in_wall;
        self
    }
    pub fn in_wall(&self) -> bool {
        self.in_wall
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for WarpedFenceGateState {
    fn default() -> Self {
        WarpedFenceGateState {
            facing: HorizontalFacing::North,
            in_wall: false,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl CrimsonStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CrimsonStairsState {
    fn default() -> Self {
        CrimsonStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl WarpedStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WarpedStairsState {
    fn default() -> Self {
        WarpedStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonButtonState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl CrimsonButtonState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for CrimsonButtonState {
    fn default() -> Self {
        CrimsonButtonState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedButtonState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl WarpedButtonState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for WarpedButtonState {
    fn default() -> Self {
        WarpedButtonState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonDoorState {
    facing: HorizontalFacing,
    half: DoubleBlockHalf,
    hinge: Hinge,
    open: bool,
    powered: bool,
}
impl CrimsonDoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
    pub fn with_hinge(&mut self, hinge: Hinge) -> &mut Self {
        self.hinge = hinge;
        self
    }
    pub fn hinge(&self) -> Hinge {
        self.hinge
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for CrimsonDoorState {
    fn default() -> Self {
        CrimsonDoorState {
            facing: HorizontalFacing::North,
            half: DoubleBlockHalf::Lower,
            hinge: Hinge::Left,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedDoorState {
    facing: HorizontalFacing,
    half: DoubleBlockHalf,
    hinge: Hinge,
    open: bool,
    powered: bool,
}
impl WarpedDoorState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
    pub fn with_hinge(&mut self, hinge: Hinge) -> &mut Self {
        self.hinge = hinge;
        self
    }
    pub fn hinge(&self) -> Hinge {
        self.hinge
    }
    pub fn with_open(&mut self, open: bool) -> &mut Self {
        self.open = open;
        self
    }
    pub fn open(&self) -> bool {
        self.open
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for WarpedDoorState {
    fn default() -> Self {
        WarpedDoorState {
            facing: HorizontalFacing::North,
            half: DoubleBlockHalf::Lower,
            hinge: Hinge::Left,
            open: false,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonSignState {
    rotation: i32,
    waterlogged: bool,
}
impl CrimsonSignState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CrimsonSignState {
    fn default() -> Self {
        CrimsonSignState {
            rotation: 0i32,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedSignState {
    rotation: i32,
    waterlogged: bool,
}
impl WarpedSignState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_rotation(&mut self, rotation: i32) -> &mut Self {
        self.rotation = rotation;
        self
    }
    pub fn rotation(&self) -> i32 {
        self.rotation
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WarpedSignState {
    fn default() -> Self {
        WarpedSignState {
            rotation: 0i32,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CrimsonWallSignState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl CrimsonWallSignState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CrimsonWallSignState {
    fn default() -> Self {
        CrimsonWallSignState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WarpedWallSignState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl WarpedWallSignState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WarpedWallSignState {
    fn default() -> Self {
        WarpedWallSignState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct StructureBlockState {
    mode: StructureBlockMode,
}
impl StructureBlockState {
    pub fn with_mode(&mut self, mode: StructureBlockMode) -> &mut Self {
        self.mode = mode;
        self
    }
    pub fn mode(&self) -> StructureBlockMode {
        self.mode
    }
}
impl Default for StructureBlockState {
    fn default() -> Self {
        StructureBlockState {
            mode: StructureBlockMode::Load,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct JigsawState {
    orientation: Orientation,
}
impl JigsawState {
    pub fn with_orientation(&mut self, orientation: Orientation) -> &mut Self {
        self.orientation = orientation;
        self
    }
    pub fn orientation(&self) -> Orientation {
        self.orientation
    }
}
impl Default for JigsawState {
    fn default() -> Self {
        JigsawState {
            orientation: Orientation::NorthUp,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ComposterState {
    level: i32,
}
impl ComposterState {
    #[doc = "This is a value between 0 and 8 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_level(&mut self, level: i32) -> &mut Self {
        self.level = level;
        self
    }
    pub fn level(&self) -> i32 {
        self.level
    }
}
impl Default for ComposterState {
    fn default() -> Self {
        ComposterState { level: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct TargetState {
    power: i32,
}
impl TargetState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_power(&mut self, power: i32) -> &mut Self {
        self.power = power;
        self
    }
    pub fn power(&self) -> i32 {
        self.power
    }
}
impl Default for TargetState {
    fn default() -> Self {
        TargetState { power: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BeeNestState {
    facing: HorizontalFacing,
    honey_level: i32,
}
impl BeeNestState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    #[doc = "This is a value between 0 and 5 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_honey_level(&mut self, honey_level: i32) -> &mut Self {
        self.honey_level = honey_level;
        self
    }
    pub fn honey_level(&self) -> i32 {
        self.honey_level
    }
}
impl Default for BeeNestState {
    fn default() -> Self {
        BeeNestState {
            facing: HorizontalFacing::North,
            honey_level: 0i32,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BeehiveState {
    facing: HorizontalFacing,
    honey_level: i32,
}
impl BeehiveState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    #[doc = "This is a value between 0 and 5 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_honey_level(&mut self, honey_level: i32) -> &mut Self {
        self.honey_level = honey_level;
        self
    }
    pub fn honey_level(&self) -> i32 {
        self.honey_level
    }
}
impl Default for BeehiveState {
    fn default() -> Self {
        BeehiveState {
            facing: HorizontalFacing::North,
            honey_level: 0i32,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RespawnAnchorState {
    charges: i32,
}
impl RespawnAnchorState {
    #[doc = "This is a value between 0 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_charges(&mut self, charges: i32) -> &mut Self {
        self.charges = charges;
        self
    }
    pub fn charges(&self) -> i32 {
        self.charges
    }
}
impl Default for RespawnAnchorState {
    fn default() -> Self {
        RespawnAnchorState { charges: 0i32 }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackstoneStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl BlackstoneStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BlackstoneStairsState {
    fn default() -> Self {
        BlackstoneStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackstoneWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl BlackstoneWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for BlackstoneWallState {
    fn default() -> Self {
        BlackstoneWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackstoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl BlackstoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BlackstoneSlabState {
    fn default() -> Self {
        BlackstoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedBlackstoneBrickSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl PolishedBlackstoneBrickSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedBlackstoneBrickSlabState {
    fn default() -> Self {
        PolishedBlackstoneBrickSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedBlackstoneBrickStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl PolishedBlackstoneBrickStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedBlackstoneBrickStairsState {
    fn default() -> Self {
        PolishedBlackstoneBrickStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedBlackstoneBrickWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl PolishedBlackstoneBrickWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for PolishedBlackstoneBrickWallState {
    fn default() -> Self {
        PolishedBlackstoneBrickWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedBlackstoneStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl PolishedBlackstoneStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedBlackstoneStairsState {
    fn default() -> Self {
        PolishedBlackstoneStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedBlackstoneSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl PolishedBlackstoneSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedBlackstoneSlabState {
    fn default() -> Self {
        PolishedBlackstoneSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedBlackstonePressurePlateState {
    powered: bool,
}
impl PolishedBlackstonePressurePlateState {
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for PolishedBlackstonePressurePlateState {
    fn default() -> Self {
        PolishedBlackstonePressurePlateState { powered: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedBlackstoneButtonState {
    face: Face,
    facing: HorizontalFacing,
    powered: bool,
}
impl PolishedBlackstoneButtonState {
    pub fn with_face(&mut self, face: Face) -> &mut Self {
        self.face = face;
        self
    }
    pub fn face(&self) -> Face {
        self.face
    }
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
}
impl Default for PolishedBlackstoneButtonState {
    fn default() -> Self {
        PolishedBlackstoneButtonState {
            face: Face::Wall,
            facing: HorizontalFacing::North,
            powered: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedBlackstoneWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl PolishedBlackstoneWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for PolishedBlackstoneWallState {
    fn default() -> Self {
        PolishedBlackstoneWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl CandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CandleState {
    fn default() -> Self {
        CandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WhiteCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl WhiteCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WhiteCandleState {
    fn default() -> Self {
        WhiteCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OrangeCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl OrangeCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for OrangeCandleState {
    fn default() -> Self {
        OrangeCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MagentaCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl MagentaCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for MagentaCandleState {
    fn default() -> Self {
        MagentaCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightBlueCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl LightBlueCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for LightBlueCandleState {
    fn default() -> Self {
        LightBlueCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct YellowCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl YellowCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for YellowCandleState {
    fn default() -> Self {
        YellowCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LimeCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl LimeCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for LimeCandleState {
    fn default() -> Self {
        LimeCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PinkCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl PinkCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PinkCandleState {
    fn default() -> Self {
        PinkCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GrayCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl GrayCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for GrayCandleState {
    fn default() -> Self {
        GrayCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightGrayCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl LightGrayCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for LightGrayCandleState {
    fn default() -> Self {
        LightGrayCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CyanCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl CyanCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CyanCandleState {
    fn default() -> Self {
        CyanCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpleCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl PurpleCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PurpleCandleState {
    fn default() -> Self {
        PurpleCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlueCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl BlueCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BlueCandleState {
    fn default() -> Self {
        BlueCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrownCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl BrownCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BrownCandleState {
    fn default() -> Self {
        BrownCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GreenCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl GreenCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for GreenCandleState {
    fn default() -> Self {
        GreenCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl RedCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for RedCandleState {
    fn default() -> Self {
        RedCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackCandleState {
    candles: i32,
    lit: bool,
    waterlogged: bool,
}
impl BlackCandleState {
    #[doc = "This is a value between 1 and 4 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_candles(&mut self, candles: i32) -> &mut Self {
        self.candles = candles - 1;
        self
    }
    pub fn candles(&self) -> i32 {
        self.candles + 1
    }
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BlackCandleState {
    fn default() -> Self {
        BlackCandleState {
            candles: 0i32,
            lit: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CandleCakeState {
    lit: bool,
}
impl CandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for CandleCakeState {
    fn default() -> Self {
        CandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WhiteCandleCakeState {
    lit: bool,
}
impl WhiteCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for WhiteCandleCakeState {
    fn default() -> Self {
        WhiteCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OrangeCandleCakeState {
    lit: bool,
}
impl OrangeCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for OrangeCandleCakeState {
    fn default() -> Self {
        OrangeCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MagentaCandleCakeState {
    lit: bool,
}
impl MagentaCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for MagentaCandleCakeState {
    fn default() -> Self {
        MagentaCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightBlueCandleCakeState {
    lit: bool,
}
impl LightBlueCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for LightBlueCandleCakeState {
    fn default() -> Self {
        LightBlueCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct YellowCandleCakeState {
    lit: bool,
}
impl YellowCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for YellowCandleCakeState {
    fn default() -> Self {
        YellowCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LimeCandleCakeState {
    lit: bool,
}
impl LimeCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for LimeCandleCakeState {
    fn default() -> Self {
        LimeCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PinkCandleCakeState {
    lit: bool,
}
impl PinkCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for PinkCandleCakeState {
    fn default() -> Self {
        PinkCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GrayCandleCakeState {
    lit: bool,
}
impl GrayCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for GrayCandleCakeState {
    fn default() -> Self {
        GrayCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightGrayCandleCakeState {
    lit: bool,
}
impl LightGrayCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for LightGrayCandleCakeState {
    fn default() -> Self {
        LightGrayCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CyanCandleCakeState {
    lit: bool,
}
impl CyanCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for CyanCandleCakeState {
    fn default() -> Self {
        CyanCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PurpleCandleCakeState {
    lit: bool,
}
impl PurpleCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for PurpleCandleCakeState {
    fn default() -> Self {
        PurpleCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlueCandleCakeState {
    lit: bool,
}
impl BlueCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for BlueCandleCakeState {
    fn default() -> Self {
        BlueCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BrownCandleCakeState {
    lit: bool,
}
impl BrownCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for BrownCandleCakeState {
    fn default() -> Self {
        BrownCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct GreenCandleCakeState {
    lit: bool,
}
impl GreenCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for GreenCandleCakeState {
    fn default() -> Self {
        GreenCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct RedCandleCakeState {
    lit: bool,
}
impl RedCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for RedCandleCakeState {
    fn default() -> Self {
        RedCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BlackCandleCakeState {
    lit: bool,
}
impl BlackCandleCakeState {
    pub fn with_lit(&mut self, lit: bool) -> &mut Self {
        self.lit = lit;
        self
    }
    pub fn lit(&self) -> bool {
        self.lit
    }
}
impl Default for BlackCandleCakeState {
    fn default() -> Self {
        BlackCandleCakeState { lit: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct AmethystClusterState {
    facing: AllFacing,
    waterlogged: bool,
}
impl AmethystClusterState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for AmethystClusterState {
    fn default() -> Self {
        AmethystClusterState {
            facing: AllFacing::Up,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LargeAmethystBudState {
    facing: AllFacing,
    waterlogged: bool,
}
impl LargeAmethystBudState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for LargeAmethystBudState {
    fn default() -> Self {
        LargeAmethystBudState {
            facing: AllFacing::Up,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct MediumAmethystBudState {
    facing: AllFacing,
    waterlogged: bool,
}
impl MediumAmethystBudState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for MediumAmethystBudState {
    fn default() -> Self {
        MediumAmethystBudState {
            facing: AllFacing::Up,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SmallAmethystBudState {
    facing: AllFacing,
    waterlogged: bool,
}
impl SmallAmethystBudState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SmallAmethystBudState {
    fn default() -> Self {
        SmallAmethystBudState {
            facing: AllFacing::Up,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SculkSensorState {
    power: i32,
    sculk_sensor_phase: SculkSensorPhase,
    waterlogged: bool,
}
impl SculkSensorState {
    #[doc = "This is a value between 0 and 15 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_power(&mut self, power: i32) -> &mut Self {
        self.power = power;
        self
    }
    pub fn power(&self) -> i32 {
        self.power
    }
    pub fn with_sculk_sensor_phase(&mut self, sculk_sensor_phase: SculkSensorPhase) -> &mut Self {
        self.sculk_sensor_phase = sculk_sensor_phase;
        self
    }
    pub fn sculk_sensor_phase(&self) -> SculkSensorPhase {
        self.sculk_sensor_phase
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SculkSensorState {
    fn default() -> Self {
        SculkSensorState {
            power: 0i32,
            sculk_sensor_phase: SculkSensorPhase::Inactive,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OxidizedCutCopperStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl OxidizedCutCopperStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for OxidizedCutCopperStairsState {
    fn default() -> Self {
        OxidizedCutCopperStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WeatheredCutCopperStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl WeatheredCutCopperStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WeatheredCutCopperStairsState {
    fn default() -> Self {
        WeatheredCutCopperStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ExposedCutCopperStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl ExposedCutCopperStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for ExposedCutCopperStairsState {
    fn default() -> Self {
        ExposedCutCopperStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CutCopperStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl CutCopperStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CutCopperStairsState {
    fn default() -> Self {
        CutCopperStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct OxidizedCutCopperSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl OxidizedCutCopperSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for OxidizedCutCopperSlabState {
    fn default() -> Self {
        OxidizedCutCopperSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WeatheredCutCopperSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl WeatheredCutCopperSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WeatheredCutCopperSlabState {
    fn default() -> Self {
        WeatheredCutCopperSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct ExposedCutCopperSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl ExposedCutCopperSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for ExposedCutCopperSlabState {
    fn default() -> Self {
        ExposedCutCopperSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CutCopperSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl CutCopperSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CutCopperSlabState {
    fn default() -> Self {
        CutCopperSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WaxedOxidizedCutCopperStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl WaxedOxidizedCutCopperStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WaxedOxidizedCutCopperStairsState {
    fn default() -> Self {
        WaxedOxidizedCutCopperStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WaxedWeatheredCutCopperStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl WaxedWeatheredCutCopperStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WaxedWeatheredCutCopperStairsState {
    fn default() -> Self {
        WaxedWeatheredCutCopperStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WaxedExposedCutCopperStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl WaxedExposedCutCopperStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WaxedExposedCutCopperStairsState {
    fn default() -> Self {
        WaxedExposedCutCopperStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WaxedCutCopperStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl WaxedCutCopperStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WaxedCutCopperStairsState {
    fn default() -> Self {
        WaxedCutCopperStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WaxedOxidizedCutCopperSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl WaxedOxidizedCutCopperSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WaxedOxidizedCutCopperSlabState {
    fn default() -> Self {
        WaxedOxidizedCutCopperSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WaxedWeatheredCutCopperSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl WaxedWeatheredCutCopperSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WaxedWeatheredCutCopperSlabState {
    fn default() -> Self {
        WaxedWeatheredCutCopperSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WaxedExposedCutCopperSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl WaxedExposedCutCopperSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WaxedExposedCutCopperSlabState {
    fn default() -> Self {
        WaxedExposedCutCopperSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct WaxedCutCopperSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl WaxedCutCopperSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for WaxedCutCopperSlabState {
    fn default() -> Self {
        WaxedCutCopperSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct LightningRodState {
    facing: AllFacing,
    powered: bool,
    waterlogged: bool,
}
impl LightningRodState {
    pub fn with_facing(&mut self, facing: AllFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> AllFacing {
        self.facing
    }
    pub fn with_powered(&mut self, powered: bool) -> &mut Self {
        self.powered = powered;
        self
    }
    pub fn powered(&self) -> bool {
        self.powered
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for LightningRodState {
    fn default() -> Self {
        LightningRodState {
            facing: AllFacing::Up,
            powered: false,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PointedDripstoneState {
    thickness: Thickness,
    vertical_direction: VerticalDirection,
    waterlogged: bool,
}
impl PointedDripstoneState {
    pub fn with_thickness(&mut self, thickness: Thickness) -> &mut Self {
        self.thickness = thickness;
        self
    }
    pub fn thickness(&self) -> Thickness {
        self.thickness
    }
    pub fn with_vertical_direction(&mut self, vertical_direction: VerticalDirection) -> &mut Self {
        self.vertical_direction = vertical_direction;
        self
    }
    pub fn vertical_direction(&self) -> VerticalDirection {
        self.vertical_direction
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PointedDripstoneState {
    fn default() -> Self {
        PointedDripstoneState {
            thickness: Thickness::Tip,
            vertical_direction: VerticalDirection::Up,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CaveVinesState {
    age: i32,
    berries: bool,
}
impl CaveVinesState {
    #[doc = "This is a value between 0 and 25 (both ends inclusive)."]
    #[doc = "Developers should be careful to respect these bounds as no checking is done at runtime!!!"]
    pub fn with_age(&mut self, age: i32) -> &mut Self {
        self.age = age;
        self
    }
    pub fn age(&self) -> i32 {
        self.age
    }
    pub fn with_berries(&mut self, berries: bool) -> &mut Self {
        self.berries = berries;
        self
    }
    pub fn berries(&self) -> bool {
        self.berries
    }
}
impl Default for CaveVinesState {
    fn default() -> Self {
        CaveVinesState {
            age: 0i32,
            berries: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CaveVinesPlantState {
    berries: bool,
}
impl CaveVinesPlantState {
    pub fn with_berries(&mut self, berries: bool) -> &mut Self {
        self.berries = berries;
        self
    }
    pub fn berries(&self) -> bool {
        self.berries
    }
}
impl Default for CaveVinesPlantState {
    fn default() -> Self {
        CaveVinesPlantState { berries: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BigDripleafState {
    facing: HorizontalFacing,
    tilt: Tilt,
    waterlogged: bool,
}
impl BigDripleafState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_tilt(&mut self, tilt: Tilt) -> &mut Self {
        self.tilt = tilt;
        self
    }
    pub fn tilt(&self) -> Tilt {
        self.tilt
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BigDripleafState {
    fn default() -> Self {
        BigDripleafState {
            facing: HorizontalFacing::North,
            tilt: Tilt::None,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct BigDripleafStemState {
    facing: HorizontalFacing,
    waterlogged: bool,
}
impl BigDripleafStemState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for BigDripleafStemState {
    fn default() -> Self {
        BigDripleafStemState {
            facing: HorizontalFacing::North,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct SmallDripleafState {
    facing: HorizontalFacing,
    half: DoubleBlockHalf,
    waterlogged: bool,
}
impl SmallDripleafState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: DoubleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> DoubleBlockHalf {
        self.half
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for SmallDripleafState {
    fn default() -> Self {
        SmallDripleafState {
            facing: HorizontalFacing::North,
            half: DoubleBlockHalf::Lower,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct HangingRootsState {
    waterlogged: bool,
}
impl HangingRootsState {
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for HangingRootsState {
    fn default() -> Self {
        HangingRootsState { waterlogged: false }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeepslateState {
    axis: Axis,
}
impl DeepslateState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for DeepslateState {
    fn default() -> Self {
        DeepslateState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CobbledDeepslateStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl CobbledDeepslateStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CobbledDeepslateStairsState {
    fn default() -> Self {
        CobbledDeepslateStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CobbledDeepslateSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl CobbledDeepslateSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for CobbledDeepslateSlabState {
    fn default() -> Self {
        CobbledDeepslateSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct CobbledDeepslateWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl CobbledDeepslateWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for CobbledDeepslateWallState {
    fn default() -> Self {
        CobbledDeepslateWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedDeepslateStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl PolishedDeepslateStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedDeepslateStairsState {
    fn default() -> Self {
        PolishedDeepslateStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedDeepslateSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl PolishedDeepslateSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for PolishedDeepslateSlabState {
    fn default() -> Self {
        PolishedDeepslateSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct PolishedDeepslateWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl PolishedDeepslateWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for PolishedDeepslateWallState {
    fn default() -> Self {
        PolishedDeepslateWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeepslateTileStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl DeepslateTileStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeepslateTileStairsState {
    fn default() -> Self {
        DeepslateTileStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeepslateTileSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl DeepslateTileSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeepslateTileSlabState {
    fn default() -> Self {
        DeepslateTileSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeepslateTileWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl DeepslateTileWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for DeepslateTileWallState {
    fn default() -> Self {
        DeepslateTileWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeepslateBrickStairsState {
    facing: HorizontalFacing,
    half: SingleBlockHalf,
    shape: StairShape,
    waterlogged: bool,
}
impl DeepslateBrickStairsState {
    pub fn with_facing(&mut self, facing: HorizontalFacing) -> &mut Self {
        self.facing = facing;
        self
    }
    pub fn facing(&self) -> HorizontalFacing {
        self.facing
    }
    pub fn with_half(&mut self, half: SingleBlockHalf) -> &mut Self {
        self.half = half;
        self
    }
    pub fn half(&self) -> SingleBlockHalf {
        self.half
    }
    pub fn with_shape(&mut self, shape: StairShape) -> &mut Self {
        self.shape = shape;
        self
    }
    pub fn shape(&self) -> StairShape {
        self.shape
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeepslateBrickStairsState {
    fn default() -> Self {
        DeepslateBrickStairsState {
            facing: HorizontalFacing::North,
            half: SingleBlockHalf::Bottom,
            shape: StairShape::Straight,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeepslateBrickSlabState {
    typed: SlabType,
    waterlogged: bool,
}
impl DeepslateBrickSlabState {
    pub fn with_typed(&mut self, typed: SlabType) -> &mut Self {
        self.typed = typed;
        self
    }
    pub fn typed(&self) -> SlabType {
        self.typed
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
}
impl Default for DeepslateBrickSlabState {
    fn default() -> Self {
        DeepslateBrickSlabState {
            typed: SlabType::Bottom,
            waterlogged: false,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct DeepslateBrickWallState {
    east: WallType,
    north: WallType,
    south: WallType,
    up: bool,
    waterlogged: bool,
    west: WallType,
}
impl DeepslateBrickWallState {
    pub fn with_east(&mut self, east: WallType) -> &mut Self {
        self.east = east;
        self
    }
    pub fn east(&self) -> WallType {
        self.east
    }
    pub fn with_north(&mut self, north: WallType) -> &mut Self {
        self.north = north;
        self
    }
    pub fn north(&self) -> WallType {
        self.north
    }
    pub fn with_south(&mut self, south: WallType) -> &mut Self {
        self.south = south;
        self
    }
    pub fn south(&self) -> WallType {
        self.south
    }
    pub fn with_up(&mut self, up: bool) -> &mut Self {
        self.up = up;
        self
    }
    pub fn up(&self) -> bool {
        self.up
    }
    pub fn with_waterlogged(&mut self, waterlogged: bool) -> &mut Self {
        self.waterlogged = waterlogged;
        self
    }
    pub fn waterlogged(&self) -> bool {
        self.waterlogged
    }
    pub fn with_west(&mut self, west: WallType) -> &mut Self {
        self.west = west;
        self
    }
    pub fn west(&self) -> WallType {
        self.west
    }
}
impl Default for DeepslateBrickWallState {
    fn default() -> Self {
        DeepslateBrickWallState {
            east: WallType::None,
            north: WallType::None,
            south: WallType::None,
            up: true,
            waterlogged: false,
            west: WallType::None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct InfestedDeepslateState {
    axis: Axis,
}
impl InfestedDeepslateState {
    pub fn with_axis(&mut self, axis: Axis) -> &mut Self {
        self.axis = axis;
        self
    }
    pub fn axis(&self) -> Axis {
        self.axis
    }
}
impl Default for InfestedDeepslateState {
    fn default() -> Self {
        InfestedDeepslateState { axis: Axis::Y }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum ParseBlockError {
    UnknownBlock,
    UnknownProperty,
    InvalidProperty,
    InvalidToken,
}
impl ::std::error::Error for ParseBlockError {}
impl ::std::fmt::Display for ParseBlockError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "{:?}", self)
    }
}
impl From<std::str::ParseBoolError> for ParseBlockError {
    fn from(_: std::str::ParseBoolError) -> Self {
        ParseBlockError::InvalidProperty
    }
}
impl From<std::num::ParseIntError> for ParseBlockError {
    fn from(_: std::num::ParseIntError) -> Self {
        ParseBlockError::InvalidProperty
    }
}
impl std::str::FromStr for Blocks {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let (_domain, stripped) = if s.contains(':') {
            s.split_once(':').unwrap()
        } else {
            ("", s)
        };
        let (name, stripped) = if let Some(i) = stripped.rfind(']') {
            let _ = stripped.find('[').ok_or(ParseBlockError::InvalidToken)?;
            stripped.split_at(i).0.split_once('[').unwrap()
        } else {
            (stripped, "")
        };
        let props: ::ahash::AHashMap<&str, &str> = stripped
            .split(',')
            .map(|x| x.split_once('='))
            .flatten()
            .collect();
        Ok(match name {
            "air" => Blocks::Air,
            "stone" => Blocks::Stone,
            "granite" => Blocks::Granite,
            "polished_granite" => Blocks::PolishedGranite,
            "diorite" => Blocks::Diorite,
            "polished_diorite" => Blocks::PolishedDiorite,
            "andesite" => Blocks::Andesite,
            "polished_andesite" => Blocks::PolishedAndesite,
            "grass_block" => {
                let mut state_ident = GrassBlockState::default();
                if let Some(prop) = props.get("snowy") {
                    state_ident.with_snowy(bool::from_str(prop)?);
                }
                Blocks::GrassBlock(state_ident)
            }
            "dirt" => Blocks::Dirt,
            "coarse_dirt" => Blocks::CoarseDirt,
            "podzol" => {
                let mut state_ident = PodzolState::default();
                if let Some(prop) = props.get("snowy") {
                    state_ident.with_snowy(bool::from_str(prop)?);
                }
                Blocks::Podzol(state_ident)
            }
            "cobblestone" => Blocks::Cobblestone,
            "oak_planks" => Blocks::OakPlanks,
            "spruce_planks" => Blocks::SprucePlanks,
            "birch_planks" => Blocks::BirchPlanks,
            "jungle_planks" => Blocks::JunglePlanks,
            "acacia_planks" => Blocks::AcaciaPlanks,
            "dark_oak_planks" => Blocks::DarkOakPlanks,
            "oak_sapling" => {
                let mut state_ident = OakSaplingState::default();
                if let Some(prop) = props.get("stage") {
                    state_ident.with_stage(i32::from_str(prop)?);
                }
                Blocks::OakSapling(state_ident)
            }
            "spruce_sapling" => {
                let mut state_ident = SpruceSaplingState::default();
                if let Some(prop) = props.get("stage") {
                    state_ident.with_stage(i32::from_str(prop)?);
                }
                Blocks::SpruceSapling(state_ident)
            }
            "birch_sapling" => {
                let mut state_ident = BirchSaplingState::default();
                if let Some(prop) = props.get("stage") {
                    state_ident.with_stage(i32::from_str(prop)?);
                }
                Blocks::BirchSapling(state_ident)
            }
            "jungle_sapling" => {
                let mut state_ident = JungleSaplingState::default();
                if let Some(prop) = props.get("stage") {
                    state_ident.with_stage(i32::from_str(prop)?);
                }
                Blocks::JungleSapling(state_ident)
            }
            "acacia_sapling" => {
                let mut state_ident = AcaciaSaplingState::default();
                if let Some(prop) = props.get("stage") {
                    state_ident.with_stage(i32::from_str(prop)?);
                }
                Blocks::AcaciaSapling(state_ident)
            }
            "dark_oak_sapling" => {
                let mut state_ident = DarkOakSaplingState::default();
                if let Some(prop) = props.get("stage") {
                    state_ident.with_stage(i32::from_str(prop)?);
                }
                Blocks::DarkOakSapling(state_ident)
            }
            "bedrock" => Blocks::Bedrock,
            "water" => {
                let mut state_ident = WaterState::default();
                if let Some(prop) = props.get("level") {
                    state_ident.with_level(i32::from_str(prop)?);
                }
                Blocks::Water(state_ident)
            }
            "lava" => {
                let mut state_ident = LavaState::default();
                if let Some(prop) = props.get("level") {
                    state_ident.with_level(i32::from_str(prop)?);
                }
                Blocks::Lava(state_ident)
            }
            "sand" => Blocks::Sand,
            "red_sand" => Blocks::RedSand,
            "gravel" => Blocks::Gravel,
            "gold_ore" => Blocks::GoldOre,
            "deepslate_gold_ore" => Blocks::DeepslateGoldOre,
            "iron_ore" => Blocks::IronOre,
            "deepslate_iron_ore" => Blocks::DeepslateIronOre,
            "coal_ore" => Blocks::CoalOre,
            "deepslate_coal_ore" => Blocks::DeepslateCoalOre,
            "nether_gold_ore" => Blocks::NetherGoldOre,
            "oak_log" => {
                let mut state_ident = OakLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::OakLog(state_ident)
            }
            "spruce_log" => {
                let mut state_ident = SpruceLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::SpruceLog(state_ident)
            }
            "birch_log" => {
                let mut state_ident = BirchLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::BirchLog(state_ident)
            }
            "jungle_log" => {
                let mut state_ident = JungleLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::JungleLog(state_ident)
            }
            "acacia_log" => {
                let mut state_ident = AcaciaLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::AcaciaLog(state_ident)
            }
            "dark_oak_log" => {
                let mut state_ident = DarkOakLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::DarkOakLog(state_ident)
            }
            "stripped_spruce_log" => {
                let mut state_ident = StrippedSpruceLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedSpruceLog(state_ident)
            }
            "stripped_birch_log" => {
                let mut state_ident = StrippedBirchLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedBirchLog(state_ident)
            }
            "stripped_jungle_log" => {
                let mut state_ident = StrippedJungleLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedJungleLog(state_ident)
            }
            "stripped_acacia_log" => {
                let mut state_ident = StrippedAcaciaLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedAcaciaLog(state_ident)
            }
            "stripped_dark_oak_log" => {
                let mut state_ident = StrippedDarkOakLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedDarkOakLog(state_ident)
            }
            "stripped_oak_log" => {
                let mut state_ident = StrippedOakLogState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedOakLog(state_ident)
            }
            "oak_wood" => {
                let mut state_ident = OakWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::OakWood(state_ident)
            }
            "spruce_wood" => {
                let mut state_ident = SpruceWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::SpruceWood(state_ident)
            }
            "birch_wood" => {
                let mut state_ident = BirchWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::BirchWood(state_ident)
            }
            "jungle_wood" => {
                let mut state_ident = JungleWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::JungleWood(state_ident)
            }
            "acacia_wood" => {
                let mut state_ident = AcaciaWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::AcaciaWood(state_ident)
            }
            "dark_oak_wood" => {
                let mut state_ident = DarkOakWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::DarkOakWood(state_ident)
            }
            "stripped_oak_wood" => {
                let mut state_ident = StrippedOakWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedOakWood(state_ident)
            }
            "stripped_spruce_wood" => {
                let mut state_ident = StrippedSpruceWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedSpruceWood(state_ident)
            }
            "stripped_birch_wood" => {
                let mut state_ident = StrippedBirchWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedBirchWood(state_ident)
            }
            "stripped_jungle_wood" => {
                let mut state_ident = StrippedJungleWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedJungleWood(state_ident)
            }
            "stripped_acacia_wood" => {
                let mut state_ident = StrippedAcaciaWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedAcaciaWood(state_ident)
            }
            "stripped_dark_oak_wood" => {
                let mut state_ident = StrippedDarkOakWoodState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedDarkOakWood(state_ident)
            }
            "oak_leaves" => {
                let mut state_ident = OakLeavesState::default();
                if let Some(prop) = props.get("distance") {
                    state_ident.with_distance(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("persistent") {
                    state_ident.with_persistent(bool::from_str(prop)?);
                }
                Blocks::OakLeaves(state_ident)
            }
            "spruce_leaves" => {
                let mut state_ident = SpruceLeavesState::default();
                if let Some(prop) = props.get("distance") {
                    state_ident.with_distance(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("persistent") {
                    state_ident.with_persistent(bool::from_str(prop)?);
                }
                Blocks::SpruceLeaves(state_ident)
            }
            "birch_leaves" => {
                let mut state_ident = BirchLeavesState::default();
                if let Some(prop) = props.get("distance") {
                    state_ident.with_distance(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("persistent") {
                    state_ident.with_persistent(bool::from_str(prop)?);
                }
                Blocks::BirchLeaves(state_ident)
            }
            "jungle_leaves" => {
                let mut state_ident = JungleLeavesState::default();
                if let Some(prop) = props.get("distance") {
                    state_ident.with_distance(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("persistent") {
                    state_ident.with_persistent(bool::from_str(prop)?);
                }
                Blocks::JungleLeaves(state_ident)
            }
            "acacia_leaves" => {
                let mut state_ident = AcaciaLeavesState::default();
                if let Some(prop) = props.get("distance") {
                    state_ident.with_distance(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("persistent") {
                    state_ident.with_persistent(bool::from_str(prop)?);
                }
                Blocks::AcaciaLeaves(state_ident)
            }
            "dark_oak_leaves" => {
                let mut state_ident = DarkOakLeavesState::default();
                if let Some(prop) = props.get("distance") {
                    state_ident.with_distance(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("persistent") {
                    state_ident.with_persistent(bool::from_str(prop)?);
                }
                Blocks::DarkOakLeaves(state_ident)
            }
            "azalea_leaves" => {
                let mut state_ident = AzaleaLeavesState::default();
                if let Some(prop) = props.get("distance") {
                    state_ident.with_distance(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("persistent") {
                    state_ident.with_persistent(bool::from_str(prop)?);
                }
                Blocks::AzaleaLeaves(state_ident)
            }
            "flowering_azalea_leaves" => {
                let mut state_ident = FloweringAzaleaLeavesState::default();
                if let Some(prop) = props.get("distance") {
                    state_ident.with_distance(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("persistent") {
                    state_ident.with_persistent(bool::from_str(prop)?);
                }
                Blocks::FloweringAzaleaLeaves(state_ident)
            }
            "sponge" => Blocks::Sponge,
            "wet_sponge" => Blocks::WetSponge,
            "glass" => Blocks::Glass,
            "lapis_ore" => Blocks::LapisOre,
            "deepslate_lapis_ore" => Blocks::DeepslateLapisOre,
            "lapis_block" => Blocks::LapisBlock,
            "dispenser" => {
                let mut state_ident = DispenserState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("triggered") {
                    state_ident.with_triggered(bool::from_str(prop)?);
                }
                Blocks::Dispenser(state_ident)
            }
            "sandstone" => Blocks::Sandstone,
            "chiseled_sandstone" => Blocks::ChiseledSandstone,
            "cut_sandstone" => Blocks::CutSandstone,
            "note_block" => {
                let mut state_ident = NoteBlockState::default();
                if let Some(prop) = props.get("instrument") {
                    state_ident.with_instrument(Instrument::from_str(prop)?);
                }
                if let Some(prop) = props.get("note") {
                    state_ident.with_note(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::NoteBlock(state_ident)
            }
            "white_bed" => {
                let mut state_ident = WhiteBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::WhiteBed(state_ident)
            }
            "orange_bed" => {
                let mut state_ident = OrangeBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::OrangeBed(state_ident)
            }
            "magenta_bed" => {
                let mut state_ident = MagentaBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::MagentaBed(state_ident)
            }
            "light_blue_bed" => {
                let mut state_ident = LightBlueBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::LightBlueBed(state_ident)
            }
            "yellow_bed" => {
                let mut state_ident = YellowBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::YellowBed(state_ident)
            }
            "lime_bed" => {
                let mut state_ident = LimeBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::LimeBed(state_ident)
            }
            "pink_bed" => {
                let mut state_ident = PinkBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::PinkBed(state_ident)
            }
            "gray_bed" => {
                let mut state_ident = GrayBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::GrayBed(state_ident)
            }
            "light_gray_bed" => {
                let mut state_ident = LightGrayBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::LightGrayBed(state_ident)
            }
            "cyan_bed" => {
                let mut state_ident = CyanBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::CyanBed(state_ident)
            }
            "purple_bed" => {
                let mut state_ident = PurpleBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::PurpleBed(state_ident)
            }
            "blue_bed" => {
                let mut state_ident = BlueBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::BlueBed(state_ident)
            }
            "brown_bed" => {
                let mut state_ident = BrownBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::BrownBed(state_ident)
            }
            "green_bed" => {
                let mut state_ident = GreenBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::GreenBed(state_ident)
            }
            "red_bed" => {
                let mut state_ident = RedBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::RedBed(state_ident)
            }
            "black_bed" => {
                let mut state_ident = BlackBedState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("occupied") {
                    state_ident.with_occupied(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("part") {
                    state_ident.with_part(Part::from_str(prop)?);
                }
                Blocks::BlackBed(state_ident)
            }
            "powered_rail" => {
                let mut state_ident = PoweredRailState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StraightRailShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PoweredRail(state_ident)
            }
            "detector_rail" => {
                let mut state_ident = DetectorRailState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StraightRailShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DetectorRail(state_ident)
            }
            "sticky_piston" => {
                let mut state_ident = StickyPistonState::default();
                if let Some(prop) = props.get("extended") {
                    state_ident.with_extended(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::StickyPiston(state_ident)
            }
            "cobweb" => Blocks::Cobweb,
            "grass" => Blocks::Grass,
            "fern" => Blocks::Fern,
            "dead_bush" => Blocks::DeadBush,
            "seagrass" => Blocks::Seagrass,
            "tall_seagrass" => {
                let mut state_ident = TallSeagrassState::default();
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                Blocks::TallSeagrass(state_ident)
            }
            "piston" => {
                let mut state_ident = PistonState::default();
                if let Some(prop) = props.get("extended") {
                    state_ident.with_extended(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::Piston(state_ident)
            }
            "piston_head" => {
                let mut state_ident = PistonHeadState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("short") {
                    state_ident.with_short(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(PistonType::from_str(prop)?);
                }
                Blocks::PistonHead(state_ident)
            }
            "white_wool" => Blocks::WhiteWool,
            "orange_wool" => Blocks::OrangeWool,
            "magenta_wool" => Blocks::MagentaWool,
            "light_blue_wool" => Blocks::LightBlueWool,
            "yellow_wool" => Blocks::YellowWool,
            "lime_wool" => Blocks::LimeWool,
            "pink_wool" => Blocks::PinkWool,
            "gray_wool" => Blocks::GrayWool,
            "light_gray_wool" => Blocks::LightGrayWool,
            "cyan_wool" => Blocks::CyanWool,
            "purple_wool" => Blocks::PurpleWool,
            "blue_wool" => Blocks::BlueWool,
            "brown_wool" => Blocks::BrownWool,
            "green_wool" => Blocks::GreenWool,
            "red_wool" => Blocks::RedWool,
            "black_wool" => Blocks::BlackWool,
            "moving_piston" => {
                let mut state_ident = MovingPistonState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(PistonType::from_str(prop)?);
                }
                Blocks::MovingPiston(state_ident)
            }
            "dandelion" => Blocks::Dandelion,
            "poppy" => Blocks::Poppy,
            "blue_orchid" => Blocks::BlueOrchid,
            "allium" => Blocks::Allium,
            "azure_bluet" => Blocks::AzureBluet,
            "red_tulip" => Blocks::RedTulip,
            "orange_tulip" => Blocks::OrangeTulip,
            "white_tulip" => Blocks::WhiteTulip,
            "pink_tulip" => Blocks::PinkTulip,
            "oxeye_daisy" => Blocks::OxeyeDaisy,
            "cornflower" => Blocks::Cornflower,
            "wither_rose" => Blocks::WitherRose,
            "lily_of_the_valley" => Blocks::LilyOfTheValley,
            "brown_mushroom" => Blocks::BrownMushroom,
            "red_mushroom" => Blocks::RedMushroom,
            "gold_block" => Blocks::GoldBlock,
            "iron_block" => Blocks::IronBlock,
            "bricks" => Blocks::Bricks,
            "tnt" => {
                let mut state_ident = TntState::default();
                if let Some(prop) = props.get("unstable") {
                    state_ident.with_unstable(bool::from_str(prop)?);
                }
                Blocks::Tnt(state_ident)
            }
            "bookshelf" => Blocks::Bookshelf,
            "mossy_cobblestone" => Blocks::MossyCobblestone,
            "obsidian" => Blocks::Obsidian,
            "torch" => Blocks::Torch,
            "wall_torch" => {
                let mut state_ident = WallTorchState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::WallTorch(state_ident)
            }
            "fire" => {
                let mut state_ident = FireState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::Fire(state_ident)
            }
            "soul_fire" => Blocks::SoulFire,
            "spawner" => Blocks::Spawner,
            "oak_stairs" => {
                let mut state_ident = OakStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::OakStairs(state_ident)
            }
            "chest" => {
                let mut state_ident = ChestState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(ChestType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::Chest(state_ident)
            }
            "redstone_wire" => {
                let mut state_ident = RedstoneWireState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(RedstoneType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(RedstoneType::from_str(prop)?);
                }
                if let Some(prop) = props.get("power") {
                    state_ident.with_power(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(RedstoneType::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(RedstoneType::from_str(prop)?);
                }
                Blocks::RedstoneWire(state_ident)
            }
            "diamond_ore" => Blocks::DiamondOre,
            "deepslate_diamond_ore" => Blocks::DeepslateDiamondOre,
            "diamond_block" => Blocks::DiamondBlock,
            "crafting_table" => Blocks::CraftingTable,
            "wheat" => {
                let mut state_ident = WheatState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::Wheat(state_ident)
            }
            "farmland" => {
                let mut state_ident = FarmlandState::default();
                if let Some(prop) = props.get("moisture") {
                    state_ident.with_moisture(i32::from_str(prop)?);
                }
                Blocks::Farmland(state_ident)
            }
            "furnace" => {
                let mut state_ident = FurnaceState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::Furnace(state_ident)
            }
            "oak_sign" => {
                let mut state_ident = OakSignState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::OakSign(state_ident)
            }
            "spruce_sign" => {
                let mut state_ident = SpruceSignState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SpruceSign(state_ident)
            }
            "birch_sign" => {
                let mut state_ident = BirchSignState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BirchSign(state_ident)
            }
            "acacia_sign" => {
                let mut state_ident = AcaciaSignState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::AcaciaSign(state_ident)
            }
            "jungle_sign" => {
                let mut state_ident = JungleSignState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::JungleSign(state_ident)
            }
            "dark_oak_sign" => {
                let mut state_ident = DarkOakSignState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DarkOakSign(state_ident)
            }
            "oak_door" => {
                let mut state_ident = OakDoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("hinge") {
                    state_ident.with_hinge(Hinge::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::OakDoor(state_ident)
            }
            "ladder" => {
                let mut state_ident = LadderState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::Ladder(state_ident)
            }
            "rail" => {
                let mut state_ident = RailState::default();
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(RailShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::Rail(state_ident)
            }
            "cobblestone_stairs" => {
                let mut state_ident = CobblestoneStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CobblestoneStairs(state_ident)
            }
            "oak_wall_sign" => {
                let mut state_ident = OakWallSignState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::OakWallSign(state_ident)
            }
            "spruce_wall_sign" => {
                let mut state_ident = SpruceWallSignState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SpruceWallSign(state_ident)
            }
            "birch_wall_sign" => {
                let mut state_ident = BirchWallSignState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BirchWallSign(state_ident)
            }
            "acacia_wall_sign" => {
                let mut state_ident = AcaciaWallSignState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::AcaciaWallSign(state_ident)
            }
            "jungle_wall_sign" => {
                let mut state_ident = JungleWallSignState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::JungleWallSign(state_ident)
            }
            "dark_oak_wall_sign" => {
                let mut state_ident = DarkOakWallSignState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DarkOakWallSign(state_ident)
            }
            "lever" => {
                let mut state_ident = LeverState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::Lever(state_ident)
            }
            "stone_pressure_plate" => {
                let mut state_ident = StonePressurePlateState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::StonePressurePlate(state_ident)
            }
            "iron_door" => {
                let mut state_ident = IronDoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("hinge") {
                    state_ident.with_hinge(Hinge::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::IronDoor(state_ident)
            }
            "oak_pressure_plate" => {
                let mut state_ident = OakPressurePlateState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::OakPressurePlate(state_ident)
            }
            "spruce_pressure_plate" => {
                let mut state_ident = SprucePressurePlateState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::SprucePressurePlate(state_ident)
            }
            "birch_pressure_plate" => {
                let mut state_ident = BirchPressurePlateState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::BirchPressurePlate(state_ident)
            }
            "jungle_pressure_plate" => {
                let mut state_ident = JunglePressurePlateState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::JunglePressurePlate(state_ident)
            }
            "acacia_pressure_plate" => {
                let mut state_ident = AcaciaPressurePlateState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::AcaciaPressurePlate(state_ident)
            }
            "dark_oak_pressure_plate" => {
                let mut state_ident = DarkOakPressurePlateState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::DarkOakPressurePlate(state_ident)
            }
            "redstone_ore" => {
                let mut state_ident = RedstoneOreState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::RedstoneOre(state_ident)
            }
            "deepslate_redstone_ore" => {
                let mut state_ident = DeepslateRedstoneOreState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::DeepslateRedstoneOre(state_ident)
            }
            "redstone_torch" => {
                let mut state_ident = RedstoneTorchState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::RedstoneTorch(state_ident)
            }
            "redstone_wall_torch" => {
                let mut state_ident = RedstoneWallTorchState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::RedstoneWallTorch(state_ident)
            }
            "stone_button" => {
                let mut state_ident = StoneButtonState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::StoneButton(state_ident)
            }
            "snow" => {
                let mut state_ident = SnowState::default();
                if let Some(prop) = props.get("layers") {
                    state_ident.with_layers(i32::from_str(prop)?);
                }
                Blocks::Snow(state_ident)
            }
            "ice" => Blocks::Ice,
            "snow_block" => Blocks::SnowBlock,
            "cactus" => {
                let mut state_ident = CactusState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::Cactus(state_ident)
            }
            "clay" => Blocks::Clay,
            "sugar_cane" => {
                let mut state_ident = SugarCaneState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::SugarCane(state_ident)
            }
            "jukebox" => {
                let mut state_ident = JukeboxState::default();
                if let Some(prop) = props.get("has_record") {
                    state_ident.with_has_record(bool::from_str(prop)?);
                }
                Blocks::Jukebox(state_ident)
            }
            "oak_fence" => {
                let mut state_ident = OakFenceState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::OakFence(state_ident)
            }
            "pumpkin" => Blocks::Pumpkin,
            "netherrack" => Blocks::Netherrack,
            "soul_sand" => Blocks::SoulSand,
            "soul_soil" => Blocks::SoulSoil,
            "basalt" => {
                let mut state_ident = BasaltState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::Basalt(state_ident)
            }
            "polished_basalt" => {
                let mut state_ident = PolishedBasaltState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::PolishedBasalt(state_ident)
            }
            "soul_torch" => Blocks::SoulTorch,
            "soul_wall_torch" => {
                let mut state_ident = SoulWallTorchState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::SoulWallTorch(state_ident)
            }
            "glowstone" => Blocks::Glowstone,
            "nether_portal" => {
                let mut state_ident = NetherPortalState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(PortalAxis::from_str(prop)?);
                }
                Blocks::NetherPortal(state_ident)
            }
            "carved_pumpkin" => {
                let mut state_ident = CarvedPumpkinState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::CarvedPumpkin(state_ident)
            }
            "jack_o_lantern" => {
                let mut state_ident = JackOLanternState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::JackOLantern(state_ident)
            }
            "cake" => {
                let mut state_ident = CakeState::default();
                if let Some(prop) = props.get("bites") {
                    state_ident.with_bites(i32::from_str(prop)?);
                }
                Blocks::Cake(state_ident)
            }
            "repeater" => {
                let mut state_ident = RepeaterState::default();
                if let Some(prop) = props.get("delay") {
                    state_ident.with_delay(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("locked") {
                    state_ident.with_locked(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::Repeater(state_ident)
            }
            "white_stained_glass" => Blocks::WhiteStainedGlass,
            "orange_stained_glass" => Blocks::OrangeStainedGlass,
            "magenta_stained_glass" => Blocks::MagentaStainedGlass,
            "light_blue_stained_glass" => Blocks::LightBlueStainedGlass,
            "yellow_stained_glass" => Blocks::YellowStainedGlass,
            "lime_stained_glass" => Blocks::LimeStainedGlass,
            "pink_stained_glass" => Blocks::PinkStainedGlass,
            "gray_stained_glass" => Blocks::GrayStainedGlass,
            "light_gray_stained_glass" => Blocks::LightGrayStainedGlass,
            "cyan_stained_glass" => Blocks::CyanStainedGlass,
            "purple_stained_glass" => Blocks::PurpleStainedGlass,
            "blue_stained_glass" => Blocks::BlueStainedGlass,
            "brown_stained_glass" => Blocks::BrownStainedGlass,
            "green_stained_glass" => Blocks::GreenStainedGlass,
            "red_stained_glass" => Blocks::RedStainedGlass,
            "black_stained_glass" => Blocks::BlackStainedGlass,
            "oak_trapdoor" => {
                let mut state_ident = OakTrapdoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::OakTrapdoor(state_ident)
            }
            "spruce_trapdoor" => {
                let mut state_ident = SpruceTrapdoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SpruceTrapdoor(state_ident)
            }
            "birch_trapdoor" => {
                let mut state_ident = BirchTrapdoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BirchTrapdoor(state_ident)
            }
            "jungle_trapdoor" => {
                let mut state_ident = JungleTrapdoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::JungleTrapdoor(state_ident)
            }
            "acacia_trapdoor" => {
                let mut state_ident = AcaciaTrapdoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::AcaciaTrapdoor(state_ident)
            }
            "dark_oak_trapdoor" => {
                let mut state_ident = DarkOakTrapdoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DarkOakTrapdoor(state_ident)
            }
            "stone_bricks" => Blocks::StoneBricks,
            "mossy_stone_bricks" => Blocks::MossyStoneBricks,
            "cracked_stone_bricks" => Blocks::CrackedStoneBricks,
            "chiseled_stone_bricks" => Blocks::ChiseledStoneBricks,
            "infested_stone" => Blocks::InfestedStone,
            "infested_cobblestone" => Blocks::InfestedCobblestone,
            "infested_stone_bricks" => Blocks::InfestedStoneBricks,
            "infested_mossy_stone_bricks" => Blocks::InfestedMossyStoneBricks,
            "infested_cracked_stone_bricks" => Blocks::InfestedCrackedStoneBricks,
            "infested_chiseled_stone_bricks" => Blocks::InfestedChiseledStoneBricks,
            "brown_mushroom_block" => {
                let mut state_ident = BrownMushroomBlockState::default();
                if let Some(prop) = props.get("down") {
                    state_ident.with_down(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::BrownMushroomBlock(state_ident)
            }
            "red_mushroom_block" => {
                let mut state_ident = RedMushroomBlockState::default();
                if let Some(prop) = props.get("down") {
                    state_ident.with_down(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::RedMushroomBlock(state_ident)
            }
            "mushroom_stem" => {
                let mut state_ident = MushroomStemState::default();
                if let Some(prop) = props.get("down") {
                    state_ident.with_down(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::MushroomStem(state_ident)
            }
            "iron_bars" => {
                let mut state_ident = IronBarsState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::IronBars(state_ident)
            }
            "chain" => {
                let mut state_ident = ChainState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::Chain(state_ident)
            }
            "glass_pane" => {
                let mut state_ident = GlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::GlassPane(state_ident)
            }
            "melon" => Blocks::Melon,
            "attached_pumpkin_stem" => {
                let mut state_ident = AttachedPumpkinStemState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::AttachedPumpkinStem(state_ident)
            }
            "attached_melon_stem" => {
                let mut state_ident = AttachedMelonStemState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::AttachedMelonStem(state_ident)
            }
            "pumpkin_stem" => {
                let mut state_ident = PumpkinStemState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::PumpkinStem(state_ident)
            }
            "melon_stem" => {
                let mut state_ident = MelonStemState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::MelonStem(state_ident)
            }
            "vine" => {
                let mut state_ident = VineState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::Vine(state_ident)
            }
            "glow_lichen" => {
                let mut state_ident = GlowLichenState::default();
                if let Some(prop) = props.get("down") {
                    state_ident.with_down(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::GlowLichen(state_ident)
            }
            "oak_fence_gate" => {
                let mut state_ident = OakFenceGateState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("in_wall") {
                    state_ident.with_in_wall(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::OakFenceGate(state_ident)
            }
            "brick_stairs" => {
                let mut state_ident = BrickStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BrickStairs(state_ident)
            }
            "stone_brick_stairs" => {
                let mut state_ident = StoneBrickStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::StoneBrickStairs(state_ident)
            }
            "mycelium" => {
                let mut state_ident = MyceliumState::default();
                if let Some(prop) = props.get("snowy") {
                    state_ident.with_snowy(bool::from_str(prop)?);
                }
                Blocks::Mycelium(state_ident)
            }
            "lily_pad" => Blocks::LilyPad,
            "nether_bricks" => Blocks::NetherBricks,
            "nether_brick_fence" => {
                let mut state_ident = NetherBrickFenceState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::NetherBrickFence(state_ident)
            }
            "nether_brick_stairs" => {
                let mut state_ident = NetherBrickStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::NetherBrickStairs(state_ident)
            }
            "nether_wart" => {
                let mut state_ident = NetherWartState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::NetherWart(state_ident)
            }
            "enchanting_table" => Blocks::EnchantingTable,
            "brewing_stand" => {
                let mut state_ident = BrewingStandState::default();
                if let Some(prop) = props.get("has_bottle_0") {
                    state_ident.with_has_bottle_0(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("has_bottle_1") {
                    state_ident.with_has_bottle_1(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("has_bottle_2") {
                    state_ident.with_has_bottle_2(bool::from_str(prop)?);
                }
                Blocks::BrewingStand(state_ident)
            }
            "cauldron" => Blocks::Cauldron,
            "water_cauldron" => {
                let mut state_ident = WaterCauldronState::default();
                if let Some(prop) = props.get("level") {
                    state_ident.with_level(i32::from_str(prop)?);
                }
                Blocks::WaterCauldron(state_ident)
            }
            "lava_cauldron" => Blocks::LavaCauldron,
            "powder_snow_cauldron" => {
                let mut state_ident = PowderSnowCauldronState::default();
                if let Some(prop) = props.get("level") {
                    state_ident.with_level(i32::from_str(prop)?);
                }
                Blocks::PowderSnowCauldron(state_ident)
            }
            "end_portal" => Blocks::EndPortal,
            "end_portal_frame" => {
                let mut state_ident = EndPortalFrameState::default();
                if let Some(prop) = props.get("eye") {
                    state_ident.with_eye(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::EndPortalFrame(state_ident)
            }
            "end_stone" => Blocks::EndStone,
            "dragon_egg" => Blocks::DragonEgg,
            "redstone_lamp" => {
                let mut state_ident = RedstoneLampState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::RedstoneLamp(state_ident)
            }
            "cocoa" => {
                let mut state_ident = CocoaState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::Cocoa(state_ident)
            }
            "sandstone_stairs" => {
                let mut state_ident = SandstoneStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SandstoneStairs(state_ident)
            }
            "emerald_ore" => Blocks::EmeraldOre,
            "deepslate_emerald_ore" => Blocks::DeepslateEmeraldOre,
            "ender_chest" => {
                let mut state_ident = EnderChestState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::EnderChest(state_ident)
            }
            "tripwire_hook" => {
                let mut state_ident = TripwireHookState::default();
                if let Some(prop) = props.get("attached") {
                    state_ident.with_attached(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::TripwireHook(state_ident)
            }
            "tripwire" => {
                let mut state_ident = TripwireState::default();
                if let Some(prop) = props.get("attached") {
                    state_ident.with_attached(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("disarmed") {
                    state_ident.with_disarmed(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::Tripwire(state_ident)
            }
            "emerald_block" => Blocks::EmeraldBlock,
            "spruce_stairs" => {
                let mut state_ident = SpruceStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SpruceStairs(state_ident)
            }
            "birch_stairs" => {
                let mut state_ident = BirchStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BirchStairs(state_ident)
            }
            "jungle_stairs" => {
                let mut state_ident = JungleStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::JungleStairs(state_ident)
            }
            "command_block" => {
                let mut state_ident = CommandBlockState::default();
                if let Some(prop) = props.get("conditional") {
                    state_ident.with_conditional(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::CommandBlock(state_ident)
            }
            "beacon" => Blocks::Beacon,
            "cobblestone_wall" => {
                let mut state_ident = CobblestoneWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::CobblestoneWall(state_ident)
            }
            "mossy_cobblestone_wall" => {
                let mut state_ident = MossyCobblestoneWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::MossyCobblestoneWall(state_ident)
            }
            "flower_pot" => Blocks::FlowerPot,
            "potted_oak_sapling" => Blocks::PottedOakSapling,
            "potted_spruce_sapling" => Blocks::PottedSpruceSapling,
            "potted_birch_sapling" => Blocks::PottedBirchSapling,
            "potted_jungle_sapling" => Blocks::PottedJungleSapling,
            "potted_acacia_sapling" => Blocks::PottedAcaciaSapling,
            "potted_dark_oak_sapling" => Blocks::PottedDarkOakSapling,
            "potted_fern" => Blocks::PottedFern,
            "potted_dandelion" => Blocks::PottedDandelion,
            "potted_poppy" => Blocks::PottedPoppy,
            "potted_blue_orchid" => Blocks::PottedBlueOrchid,
            "potted_allium" => Blocks::PottedAllium,
            "potted_azure_bluet" => Blocks::PottedAzureBluet,
            "potted_red_tulip" => Blocks::PottedRedTulip,
            "potted_orange_tulip" => Blocks::PottedOrangeTulip,
            "potted_white_tulip" => Blocks::PottedWhiteTulip,
            "potted_pink_tulip" => Blocks::PottedPinkTulip,
            "potted_oxeye_daisy" => Blocks::PottedOxeyeDaisy,
            "potted_cornflower" => Blocks::PottedCornflower,
            "potted_lily_of_the_valley" => Blocks::PottedLilyOfTheValley,
            "potted_wither_rose" => Blocks::PottedWitherRose,
            "potted_red_mushroom" => Blocks::PottedRedMushroom,
            "potted_brown_mushroom" => Blocks::PottedBrownMushroom,
            "potted_dead_bush" => Blocks::PottedDeadBush,
            "potted_cactus" => Blocks::PottedCactus,
            "carrots" => {
                let mut state_ident = CarrotsState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::Carrots(state_ident)
            }
            "potatoes" => {
                let mut state_ident = PotatoesState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::Potatoes(state_ident)
            }
            "oak_button" => {
                let mut state_ident = OakButtonState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::OakButton(state_ident)
            }
            "spruce_button" => {
                let mut state_ident = SpruceButtonState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::SpruceButton(state_ident)
            }
            "birch_button" => {
                let mut state_ident = BirchButtonState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::BirchButton(state_ident)
            }
            "jungle_button" => {
                let mut state_ident = JungleButtonState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::JungleButton(state_ident)
            }
            "acacia_button" => {
                let mut state_ident = AcaciaButtonState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::AcaciaButton(state_ident)
            }
            "dark_oak_button" => {
                let mut state_ident = DarkOakButtonState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::DarkOakButton(state_ident)
            }
            "skeleton_skull" => {
                let mut state_ident = SkeletonSkullState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::SkeletonSkull(state_ident)
            }
            "skeleton_wall_skull" => {
                let mut state_ident = SkeletonWallSkullState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::SkeletonWallSkull(state_ident)
            }
            "wither_skeleton_skull" => {
                let mut state_ident = WitherSkeletonSkullState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::WitherSkeletonSkull(state_ident)
            }
            "wither_skeleton_wall_skull" => {
                let mut state_ident = WitherSkeletonWallSkullState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::WitherSkeletonWallSkull(state_ident)
            }
            "zombie_head" => {
                let mut state_ident = ZombieHeadState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::ZombieHead(state_ident)
            }
            "zombie_wall_head" => {
                let mut state_ident = ZombieWallHeadState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::ZombieWallHead(state_ident)
            }
            "player_head" => {
                let mut state_ident = PlayerHeadState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::PlayerHead(state_ident)
            }
            "player_wall_head" => {
                let mut state_ident = PlayerWallHeadState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::PlayerWallHead(state_ident)
            }
            "creeper_head" => {
                let mut state_ident = CreeperHeadState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::CreeperHead(state_ident)
            }
            "creeper_wall_head" => {
                let mut state_ident = CreeperWallHeadState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::CreeperWallHead(state_ident)
            }
            "dragon_head" => {
                let mut state_ident = DragonHeadState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::DragonHead(state_ident)
            }
            "dragon_wall_head" => {
                let mut state_ident = DragonWallHeadState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::DragonWallHead(state_ident)
            }
            "anvil" => {
                let mut state_ident = AnvilState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::Anvil(state_ident)
            }
            "chipped_anvil" => {
                let mut state_ident = ChippedAnvilState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::ChippedAnvil(state_ident)
            }
            "damaged_anvil" => {
                let mut state_ident = DamagedAnvilState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::DamagedAnvil(state_ident)
            }
            "trapped_chest" => {
                let mut state_ident = TrappedChestState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(ChestType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::TrappedChest(state_ident)
            }
            "light_weighted_pressure_plate" => {
                let mut state_ident = LightWeightedPressurePlateState::default();
                if let Some(prop) = props.get("power") {
                    state_ident.with_power(i32::from_str(prop)?);
                }
                Blocks::LightWeightedPressurePlate(state_ident)
            }
            "heavy_weighted_pressure_plate" => {
                let mut state_ident = HeavyWeightedPressurePlateState::default();
                if let Some(prop) = props.get("power") {
                    state_ident.with_power(i32::from_str(prop)?);
                }
                Blocks::HeavyWeightedPressurePlate(state_ident)
            }
            "comparator" => {
                let mut state_ident = ComparatorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("mode") {
                    state_ident.with_mode(ComparatorMode::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::Comparator(state_ident)
            }
            "daylight_detector" => {
                let mut state_ident = DaylightDetectorState::default();
                if let Some(prop) = props.get("inverted") {
                    state_ident.with_inverted(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("power") {
                    state_ident.with_power(i32::from_str(prop)?);
                }
                Blocks::DaylightDetector(state_ident)
            }
            "redstone_block" => Blocks::RedstoneBlock,
            "nether_quartz_ore" => Blocks::NetherQuartzOre,
            "hopper" => {
                let mut state_ident = HopperState::default();
                if let Some(prop) = props.get("enabled") {
                    state_ident.with_enabled(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HopperFacing::from_str(prop)?);
                }
                Blocks::Hopper(state_ident)
            }
            "quartz_block" => Blocks::QuartzBlock,
            "chiseled_quartz_block" => Blocks::ChiseledQuartzBlock,
            "quartz_pillar" => {
                let mut state_ident = QuartzPillarState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::QuartzPillar(state_ident)
            }
            "quartz_stairs" => {
                let mut state_ident = QuartzStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::QuartzStairs(state_ident)
            }
            "activator_rail" => {
                let mut state_ident = ActivatorRailState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StraightRailShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::ActivatorRail(state_ident)
            }
            "dropper" => {
                let mut state_ident = DropperState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("triggered") {
                    state_ident.with_triggered(bool::from_str(prop)?);
                }
                Blocks::Dropper(state_ident)
            }
            "white_terracotta" => Blocks::WhiteTerracotta,
            "orange_terracotta" => Blocks::OrangeTerracotta,
            "magenta_terracotta" => Blocks::MagentaTerracotta,
            "light_blue_terracotta" => Blocks::LightBlueTerracotta,
            "yellow_terracotta" => Blocks::YellowTerracotta,
            "lime_terracotta" => Blocks::LimeTerracotta,
            "pink_terracotta" => Blocks::PinkTerracotta,
            "gray_terracotta" => Blocks::GrayTerracotta,
            "light_gray_terracotta" => Blocks::LightGrayTerracotta,
            "cyan_terracotta" => Blocks::CyanTerracotta,
            "purple_terracotta" => Blocks::PurpleTerracotta,
            "blue_terracotta" => Blocks::BlueTerracotta,
            "brown_terracotta" => Blocks::BrownTerracotta,
            "green_terracotta" => Blocks::GreenTerracotta,
            "red_terracotta" => Blocks::RedTerracotta,
            "black_terracotta" => Blocks::BlackTerracotta,
            "white_stained_glass_pane" => {
                let mut state_ident = WhiteStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::WhiteStainedGlassPane(state_ident)
            }
            "orange_stained_glass_pane" => {
                let mut state_ident = OrangeStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::OrangeStainedGlassPane(state_ident)
            }
            "magenta_stained_glass_pane" => {
                let mut state_ident = MagentaStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::MagentaStainedGlassPane(state_ident)
            }
            "light_blue_stained_glass_pane" => {
                let mut state_ident = LightBlueStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::LightBlueStainedGlassPane(state_ident)
            }
            "yellow_stained_glass_pane" => {
                let mut state_ident = YellowStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::YellowStainedGlassPane(state_ident)
            }
            "lime_stained_glass_pane" => {
                let mut state_ident = LimeStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::LimeStainedGlassPane(state_ident)
            }
            "pink_stained_glass_pane" => {
                let mut state_ident = PinkStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::PinkStainedGlassPane(state_ident)
            }
            "gray_stained_glass_pane" => {
                let mut state_ident = GrayStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::GrayStainedGlassPane(state_ident)
            }
            "light_gray_stained_glass_pane" => {
                let mut state_ident = LightGrayStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::LightGrayStainedGlassPane(state_ident)
            }
            "cyan_stained_glass_pane" => {
                let mut state_ident = CyanStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::CyanStainedGlassPane(state_ident)
            }
            "purple_stained_glass_pane" => {
                let mut state_ident = PurpleStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::PurpleStainedGlassPane(state_ident)
            }
            "blue_stained_glass_pane" => {
                let mut state_ident = BlueStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::BlueStainedGlassPane(state_ident)
            }
            "brown_stained_glass_pane" => {
                let mut state_ident = BrownStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::BrownStainedGlassPane(state_ident)
            }
            "green_stained_glass_pane" => {
                let mut state_ident = GreenStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::GreenStainedGlassPane(state_ident)
            }
            "red_stained_glass_pane" => {
                let mut state_ident = RedStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::RedStainedGlassPane(state_ident)
            }
            "black_stained_glass_pane" => {
                let mut state_ident = BlackStainedGlassPaneState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::BlackStainedGlassPane(state_ident)
            }
            "acacia_stairs" => {
                let mut state_ident = AcaciaStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::AcaciaStairs(state_ident)
            }
            "dark_oak_stairs" => {
                let mut state_ident = DarkOakStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DarkOakStairs(state_ident)
            }
            "slime_block" => Blocks::SlimeBlock,
            "barrier" => Blocks::Barrier,
            "light" => {
                let mut state_ident = LightState::default();
                if let Some(prop) = props.get("level") {
                    state_ident.with_level(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::Light(state_ident)
            }
            "iron_trapdoor" => {
                let mut state_ident = IronTrapdoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::IronTrapdoor(state_ident)
            }
            "prismarine" => Blocks::Prismarine,
            "prismarine_bricks" => Blocks::PrismarineBricks,
            "dark_prismarine" => Blocks::DarkPrismarine,
            "prismarine_stairs" => {
                let mut state_ident = PrismarineStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PrismarineStairs(state_ident)
            }
            "prismarine_brick_stairs" => {
                let mut state_ident = PrismarineBrickStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PrismarineBrickStairs(state_ident)
            }
            "dark_prismarine_stairs" => {
                let mut state_ident = DarkPrismarineStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DarkPrismarineStairs(state_ident)
            }
            "prismarine_slab" => {
                let mut state_ident = PrismarineSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PrismarineSlab(state_ident)
            }
            "prismarine_brick_slab" => {
                let mut state_ident = PrismarineBrickSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PrismarineBrickSlab(state_ident)
            }
            "dark_prismarine_slab" => {
                let mut state_ident = DarkPrismarineSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DarkPrismarineSlab(state_ident)
            }
            "sea_lantern" => Blocks::SeaLantern,
            "hay_block" => {
                let mut state_ident = HayBlockState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::HayBlock(state_ident)
            }
            "white_carpet" => Blocks::WhiteCarpet,
            "orange_carpet" => Blocks::OrangeCarpet,
            "magenta_carpet" => Blocks::MagentaCarpet,
            "light_blue_carpet" => Blocks::LightBlueCarpet,
            "yellow_carpet" => Blocks::YellowCarpet,
            "lime_carpet" => Blocks::LimeCarpet,
            "pink_carpet" => Blocks::PinkCarpet,
            "gray_carpet" => Blocks::GrayCarpet,
            "light_gray_carpet" => Blocks::LightGrayCarpet,
            "cyan_carpet" => Blocks::CyanCarpet,
            "purple_carpet" => Blocks::PurpleCarpet,
            "blue_carpet" => Blocks::BlueCarpet,
            "brown_carpet" => Blocks::BrownCarpet,
            "green_carpet" => Blocks::GreenCarpet,
            "red_carpet" => Blocks::RedCarpet,
            "black_carpet" => Blocks::BlackCarpet,
            "terracotta" => Blocks::Terracotta,
            "coal_block" => Blocks::CoalBlock,
            "packed_ice" => Blocks::PackedIce,
            "sunflower" => {
                let mut state_ident = SunflowerState::default();
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                Blocks::Sunflower(state_ident)
            }
            "lilac" => {
                let mut state_ident = LilacState::default();
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                Blocks::Lilac(state_ident)
            }
            "rose_bush" => {
                let mut state_ident = RoseBushState::default();
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                Blocks::RoseBush(state_ident)
            }
            "peony" => {
                let mut state_ident = PeonyState::default();
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                Blocks::Peony(state_ident)
            }
            "tall_grass" => {
                let mut state_ident = TallGrassState::default();
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                Blocks::TallGrass(state_ident)
            }
            "large_fern" => {
                let mut state_ident = LargeFernState::default();
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                Blocks::LargeFern(state_ident)
            }
            "white_banner" => {
                let mut state_ident = WhiteBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::WhiteBanner(state_ident)
            }
            "orange_banner" => {
                let mut state_ident = OrangeBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::OrangeBanner(state_ident)
            }
            "magenta_banner" => {
                let mut state_ident = MagentaBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::MagentaBanner(state_ident)
            }
            "light_blue_banner" => {
                let mut state_ident = LightBlueBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::LightBlueBanner(state_ident)
            }
            "yellow_banner" => {
                let mut state_ident = YellowBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::YellowBanner(state_ident)
            }
            "lime_banner" => {
                let mut state_ident = LimeBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::LimeBanner(state_ident)
            }
            "pink_banner" => {
                let mut state_ident = PinkBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::PinkBanner(state_ident)
            }
            "gray_banner" => {
                let mut state_ident = GrayBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::GrayBanner(state_ident)
            }
            "light_gray_banner" => {
                let mut state_ident = LightGrayBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::LightGrayBanner(state_ident)
            }
            "cyan_banner" => {
                let mut state_ident = CyanBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::CyanBanner(state_ident)
            }
            "purple_banner" => {
                let mut state_ident = PurpleBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::PurpleBanner(state_ident)
            }
            "blue_banner" => {
                let mut state_ident = BlueBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::BlueBanner(state_ident)
            }
            "brown_banner" => {
                let mut state_ident = BrownBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::BrownBanner(state_ident)
            }
            "green_banner" => {
                let mut state_ident = GreenBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::GreenBanner(state_ident)
            }
            "red_banner" => {
                let mut state_ident = RedBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::RedBanner(state_ident)
            }
            "black_banner" => {
                let mut state_ident = BlackBannerState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                Blocks::BlackBanner(state_ident)
            }
            "white_wall_banner" => {
                let mut state_ident = WhiteWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::WhiteWallBanner(state_ident)
            }
            "orange_wall_banner" => {
                let mut state_ident = OrangeWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::OrangeWallBanner(state_ident)
            }
            "magenta_wall_banner" => {
                let mut state_ident = MagentaWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::MagentaWallBanner(state_ident)
            }
            "light_blue_wall_banner" => {
                let mut state_ident = LightBlueWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::LightBlueWallBanner(state_ident)
            }
            "yellow_wall_banner" => {
                let mut state_ident = YellowWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::YellowWallBanner(state_ident)
            }
            "lime_wall_banner" => {
                let mut state_ident = LimeWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::LimeWallBanner(state_ident)
            }
            "pink_wall_banner" => {
                let mut state_ident = PinkWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::PinkWallBanner(state_ident)
            }
            "gray_wall_banner" => {
                let mut state_ident = GrayWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::GrayWallBanner(state_ident)
            }
            "light_gray_wall_banner" => {
                let mut state_ident = LightGrayWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::LightGrayWallBanner(state_ident)
            }
            "cyan_wall_banner" => {
                let mut state_ident = CyanWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::CyanWallBanner(state_ident)
            }
            "purple_wall_banner" => {
                let mut state_ident = PurpleWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::PurpleWallBanner(state_ident)
            }
            "blue_wall_banner" => {
                let mut state_ident = BlueWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::BlueWallBanner(state_ident)
            }
            "brown_wall_banner" => {
                let mut state_ident = BrownWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::BrownWallBanner(state_ident)
            }
            "green_wall_banner" => {
                let mut state_ident = GreenWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::GreenWallBanner(state_ident)
            }
            "red_wall_banner" => {
                let mut state_ident = RedWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::RedWallBanner(state_ident)
            }
            "black_wall_banner" => {
                let mut state_ident = BlackWallBannerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::BlackWallBanner(state_ident)
            }
            "red_sandstone" => Blocks::RedSandstone,
            "chiseled_red_sandstone" => Blocks::ChiseledRedSandstone,
            "cut_red_sandstone" => Blocks::CutRedSandstone,
            "red_sandstone_stairs" => {
                let mut state_ident = RedSandstoneStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::RedSandstoneStairs(state_ident)
            }
            "oak_slab" => {
                let mut state_ident = OakSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::OakSlab(state_ident)
            }
            "spruce_slab" => {
                let mut state_ident = SpruceSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SpruceSlab(state_ident)
            }
            "birch_slab" => {
                let mut state_ident = BirchSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BirchSlab(state_ident)
            }
            "jungle_slab" => {
                let mut state_ident = JungleSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::JungleSlab(state_ident)
            }
            "acacia_slab" => {
                let mut state_ident = AcaciaSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::AcaciaSlab(state_ident)
            }
            "dark_oak_slab" => {
                let mut state_ident = DarkOakSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DarkOakSlab(state_ident)
            }
            "stone_slab" => {
                let mut state_ident = StoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::StoneSlab(state_ident)
            }
            "smooth_stone_slab" => {
                let mut state_ident = SmoothStoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SmoothStoneSlab(state_ident)
            }
            "sandstone_slab" => {
                let mut state_ident = SandstoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SandstoneSlab(state_ident)
            }
            "cut_sandstone_slab" => {
                let mut state_ident = CutSandstoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CutSandstoneSlab(state_ident)
            }
            "petrified_oak_slab" => {
                let mut state_ident = PetrifiedOakSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PetrifiedOakSlab(state_ident)
            }
            "cobblestone_slab" => {
                let mut state_ident = CobblestoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CobblestoneSlab(state_ident)
            }
            "brick_slab" => {
                let mut state_ident = BrickSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BrickSlab(state_ident)
            }
            "stone_brick_slab" => {
                let mut state_ident = StoneBrickSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::StoneBrickSlab(state_ident)
            }
            "nether_brick_slab" => {
                let mut state_ident = NetherBrickSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::NetherBrickSlab(state_ident)
            }
            "quartz_slab" => {
                let mut state_ident = QuartzSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::QuartzSlab(state_ident)
            }
            "red_sandstone_slab" => {
                let mut state_ident = RedSandstoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::RedSandstoneSlab(state_ident)
            }
            "cut_red_sandstone_slab" => {
                let mut state_ident = CutRedSandstoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CutRedSandstoneSlab(state_ident)
            }
            "purpur_slab" => {
                let mut state_ident = PurpurSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PurpurSlab(state_ident)
            }
            "smooth_stone" => Blocks::SmoothStone,
            "smooth_sandstone" => Blocks::SmoothSandstone,
            "smooth_quartz" => Blocks::SmoothQuartz,
            "smooth_red_sandstone" => Blocks::SmoothRedSandstone,
            "spruce_fence_gate" => {
                let mut state_ident = SpruceFenceGateState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("in_wall") {
                    state_ident.with_in_wall(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::SpruceFenceGate(state_ident)
            }
            "birch_fence_gate" => {
                let mut state_ident = BirchFenceGateState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("in_wall") {
                    state_ident.with_in_wall(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::BirchFenceGate(state_ident)
            }
            "jungle_fence_gate" => {
                let mut state_ident = JungleFenceGateState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("in_wall") {
                    state_ident.with_in_wall(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::JungleFenceGate(state_ident)
            }
            "acacia_fence_gate" => {
                let mut state_ident = AcaciaFenceGateState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("in_wall") {
                    state_ident.with_in_wall(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::AcaciaFenceGate(state_ident)
            }
            "dark_oak_fence_gate" => {
                let mut state_ident = DarkOakFenceGateState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("in_wall") {
                    state_ident.with_in_wall(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::DarkOakFenceGate(state_ident)
            }
            "spruce_fence" => {
                let mut state_ident = SpruceFenceState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::SpruceFence(state_ident)
            }
            "birch_fence" => {
                let mut state_ident = BirchFenceState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::BirchFence(state_ident)
            }
            "jungle_fence" => {
                let mut state_ident = JungleFenceState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::JungleFence(state_ident)
            }
            "acacia_fence" => {
                let mut state_ident = AcaciaFenceState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::AcaciaFence(state_ident)
            }
            "dark_oak_fence" => {
                let mut state_ident = DarkOakFenceState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::DarkOakFence(state_ident)
            }
            "spruce_door" => {
                let mut state_ident = SpruceDoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("hinge") {
                    state_ident.with_hinge(Hinge::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::SpruceDoor(state_ident)
            }
            "birch_door" => {
                let mut state_ident = BirchDoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("hinge") {
                    state_ident.with_hinge(Hinge::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::BirchDoor(state_ident)
            }
            "jungle_door" => {
                let mut state_ident = JungleDoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("hinge") {
                    state_ident.with_hinge(Hinge::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::JungleDoor(state_ident)
            }
            "acacia_door" => {
                let mut state_ident = AcaciaDoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("hinge") {
                    state_ident.with_hinge(Hinge::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::AcaciaDoor(state_ident)
            }
            "dark_oak_door" => {
                let mut state_ident = DarkOakDoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("hinge") {
                    state_ident.with_hinge(Hinge::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::DarkOakDoor(state_ident)
            }
            "end_rod" => {
                let mut state_ident = EndRodState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::EndRod(state_ident)
            }
            "chorus_plant" => {
                let mut state_ident = ChorusPlantState::default();
                if let Some(prop) = props.get("down") {
                    state_ident.with_down(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::ChorusPlant(state_ident)
            }
            "chorus_flower" => {
                let mut state_ident = ChorusFlowerState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::ChorusFlower(state_ident)
            }
            "purpur_block" => Blocks::PurpurBlock,
            "purpur_pillar" => {
                let mut state_ident = PurpurPillarState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::PurpurPillar(state_ident)
            }
            "purpur_stairs" => {
                let mut state_ident = PurpurStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PurpurStairs(state_ident)
            }
            "end_stone_bricks" => Blocks::EndStoneBricks,
            "beetroots" => {
                let mut state_ident = BeetrootsState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::Beetroots(state_ident)
            }
            "dirt_path" => Blocks::DirtPath,
            "end_gateway" => Blocks::EndGateway,
            "repeating_command_block" => {
                let mut state_ident = RepeatingCommandBlockState::default();
                if let Some(prop) = props.get("conditional") {
                    state_ident.with_conditional(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::RepeatingCommandBlock(state_ident)
            }
            "chain_command_block" => {
                let mut state_ident = ChainCommandBlockState::default();
                if let Some(prop) = props.get("conditional") {
                    state_ident.with_conditional(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::ChainCommandBlock(state_ident)
            }
            "frosted_ice" => {
                let mut state_ident = FrostedIceState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::FrostedIce(state_ident)
            }
            "magma_block" => Blocks::MagmaBlock,
            "nether_wart_block" => Blocks::NetherWartBlock,
            "red_nether_bricks" => Blocks::RedNetherBricks,
            "bone_block" => {
                let mut state_ident = BoneBlockState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::BoneBlock(state_ident)
            }
            "structure_void" => Blocks::StructureVoid,
            "observer" => {
                let mut state_ident = ObserverState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::Observer(state_ident)
            }
            "shulker_box" => {
                let mut state_ident = ShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::ShulkerBox(state_ident)
            }
            "white_shulker_box" => {
                let mut state_ident = WhiteShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::WhiteShulkerBox(state_ident)
            }
            "orange_shulker_box" => {
                let mut state_ident = OrangeShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::OrangeShulkerBox(state_ident)
            }
            "magenta_shulker_box" => {
                let mut state_ident = MagentaShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::MagentaShulkerBox(state_ident)
            }
            "light_blue_shulker_box" => {
                let mut state_ident = LightBlueShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::LightBlueShulkerBox(state_ident)
            }
            "yellow_shulker_box" => {
                let mut state_ident = YellowShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::YellowShulkerBox(state_ident)
            }
            "lime_shulker_box" => {
                let mut state_ident = LimeShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::LimeShulkerBox(state_ident)
            }
            "pink_shulker_box" => {
                let mut state_ident = PinkShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::PinkShulkerBox(state_ident)
            }
            "gray_shulker_box" => {
                let mut state_ident = GrayShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::GrayShulkerBox(state_ident)
            }
            "light_gray_shulker_box" => {
                let mut state_ident = LightGrayShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::LightGrayShulkerBox(state_ident)
            }
            "cyan_shulker_box" => {
                let mut state_ident = CyanShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::CyanShulkerBox(state_ident)
            }
            "purple_shulker_box" => {
                let mut state_ident = PurpleShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::PurpleShulkerBox(state_ident)
            }
            "blue_shulker_box" => {
                let mut state_ident = BlueShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::BlueShulkerBox(state_ident)
            }
            "brown_shulker_box" => {
                let mut state_ident = BrownShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::BrownShulkerBox(state_ident)
            }
            "green_shulker_box" => {
                let mut state_ident = GreenShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::GreenShulkerBox(state_ident)
            }
            "red_shulker_box" => {
                let mut state_ident = RedShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::RedShulkerBox(state_ident)
            }
            "black_shulker_box" => {
                let mut state_ident = BlackShulkerBoxState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                Blocks::BlackShulkerBox(state_ident)
            }
            "white_glazed_terracotta" => {
                let mut state_ident = WhiteGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::WhiteGlazedTerracotta(state_ident)
            }
            "orange_glazed_terracotta" => {
                let mut state_ident = OrangeGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::OrangeGlazedTerracotta(state_ident)
            }
            "magenta_glazed_terracotta" => {
                let mut state_ident = MagentaGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::MagentaGlazedTerracotta(state_ident)
            }
            "light_blue_glazed_terracotta" => {
                let mut state_ident = LightBlueGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::LightBlueGlazedTerracotta(state_ident)
            }
            "yellow_glazed_terracotta" => {
                let mut state_ident = YellowGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::YellowGlazedTerracotta(state_ident)
            }
            "lime_glazed_terracotta" => {
                let mut state_ident = LimeGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::LimeGlazedTerracotta(state_ident)
            }
            "pink_glazed_terracotta" => {
                let mut state_ident = PinkGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::PinkGlazedTerracotta(state_ident)
            }
            "gray_glazed_terracotta" => {
                let mut state_ident = GrayGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::GrayGlazedTerracotta(state_ident)
            }
            "light_gray_glazed_terracotta" => {
                let mut state_ident = LightGrayGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::LightGrayGlazedTerracotta(state_ident)
            }
            "cyan_glazed_terracotta" => {
                let mut state_ident = CyanGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::CyanGlazedTerracotta(state_ident)
            }
            "purple_glazed_terracotta" => {
                let mut state_ident = PurpleGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::PurpleGlazedTerracotta(state_ident)
            }
            "blue_glazed_terracotta" => {
                let mut state_ident = BlueGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::BlueGlazedTerracotta(state_ident)
            }
            "brown_glazed_terracotta" => {
                let mut state_ident = BrownGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::BrownGlazedTerracotta(state_ident)
            }
            "green_glazed_terracotta" => {
                let mut state_ident = GreenGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::GreenGlazedTerracotta(state_ident)
            }
            "red_glazed_terracotta" => {
                let mut state_ident = RedGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::RedGlazedTerracotta(state_ident)
            }
            "black_glazed_terracotta" => {
                let mut state_ident = BlackGlazedTerracottaState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::BlackGlazedTerracotta(state_ident)
            }
            "white_concrete" => Blocks::WhiteConcrete,
            "orange_concrete" => Blocks::OrangeConcrete,
            "magenta_concrete" => Blocks::MagentaConcrete,
            "light_blue_concrete" => Blocks::LightBlueConcrete,
            "yellow_concrete" => Blocks::YellowConcrete,
            "lime_concrete" => Blocks::LimeConcrete,
            "pink_concrete" => Blocks::PinkConcrete,
            "gray_concrete" => Blocks::GrayConcrete,
            "light_gray_concrete" => Blocks::LightGrayConcrete,
            "cyan_concrete" => Blocks::CyanConcrete,
            "purple_concrete" => Blocks::PurpleConcrete,
            "blue_concrete" => Blocks::BlueConcrete,
            "brown_concrete" => Blocks::BrownConcrete,
            "green_concrete" => Blocks::GreenConcrete,
            "red_concrete" => Blocks::RedConcrete,
            "black_concrete" => Blocks::BlackConcrete,
            "white_concrete_powder" => Blocks::WhiteConcretePowder,
            "orange_concrete_powder" => Blocks::OrangeConcretePowder,
            "magenta_concrete_powder" => Blocks::MagentaConcretePowder,
            "light_blue_concrete_powder" => Blocks::LightBlueConcretePowder,
            "yellow_concrete_powder" => Blocks::YellowConcretePowder,
            "lime_concrete_powder" => Blocks::LimeConcretePowder,
            "pink_concrete_powder" => Blocks::PinkConcretePowder,
            "gray_concrete_powder" => Blocks::GrayConcretePowder,
            "light_gray_concrete_powder" => Blocks::LightGrayConcretePowder,
            "cyan_concrete_powder" => Blocks::CyanConcretePowder,
            "purple_concrete_powder" => Blocks::PurpleConcretePowder,
            "blue_concrete_powder" => Blocks::BlueConcretePowder,
            "brown_concrete_powder" => Blocks::BrownConcretePowder,
            "green_concrete_powder" => Blocks::GreenConcretePowder,
            "red_concrete_powder" => Blocks::RedConcretePowder,
            "black_concrete_powder" => Blocks::BlackConcretePowder,
            "kelp" => {
                let mut state_ident = KelpState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::Kelp(state_ident)
            }
            "kelp_plant" => Blocks::KelpPlant,
            "dried_kelp_block" => Blocks::DriedKelpBlock,
            "turtle_egg" => {
                let mut state_ident = TurtleEggState::default();
                if let Some(prop) = props.get("eggs") {
                    state_ident.with_eggs(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("hatch") {
                    state_ident.with_hatch(i32::from_str(prop)?);
                }
                Blocks::TurtleEgg(state_ident)
            }
            "dead_tube_coral_block" => Blocks::DeadTubeCoralBlock,
            "dead_brain_coral_block" => Blocks::DeadBrainCoralBlock,
            "dead_bubble_coral_block" => Blocks::DeadBubbleCoralBlock,
            "dead_fire_coral_block" => Blocks::DeadFireCoralBlock,
            "dead_horn_coral_block" => Blocks::DeadHornCoralBlock,
            "tube_coral_block" => Blocks::TubeCoralBlock,
            "brain_coral_block" => Blocks::BrainCoralBlock,
            "bubble_coral_block" => Blocks::BubbleCoralBlock,
            "fire_coral_block" => Blocks::FireCoralBlock,
            "horn_coral_block" => Blocks::HornCoralBlock,
            "dead_tube_coral" => {
                let mut state_ident = DeadTubeCoralState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadTubeCoral(state_ident)
            }
            "dead_brain_coral" => {
                let mut state_ident = DeadBrainCoralState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadBrainCoral(state_ident)
            }
            "dead_bubble_coral" => {
                let mut state_ident = DeadBubbleCoralState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadBubbleCoral(state_ident)
            }
            "dead_fire_coral" => {
                let mut state_ident = DeadFireCoralState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadFireCoral(state_ident)
            }
            "dead_horn_coral" => {
                let mut state_ident = DeadHornCoralState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadHornCoral(state_ident)
            }
            "tube_coral" => {
                let mut state_ident = TubeCoralState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::TubeCoral(state_ident)
            }
            "brain_coral" => {
                let mut state_ident = BrainCoralState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BrainCoral(state_ident)
            }
            "bubble_coral" => {
                let mut state_ident = BubbleCoralState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BubbleCoral(state_ident)
            }
            "fire_coral" => {
                let mut state_ident = FireCoralState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::FireCoral(state_ident)
            }
            "horn_coral" => {
                let mut state_ident = HornCoralState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::HornCoral(state_ident)
            }
            "dead_tube_coral_fan" => {
                let mut state_ident = DeadTubeCoralFanState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadTubeCoralFan(state_ident)
            }
            "dead_brain_coral_fan" => {
                let mut state_ident = DeadBrainCoralFanState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadBrainCoralFan(state_ident)
            }
            "dead_bubble_coral_fan" => {
                let mut state_ident = DeadBubbleCoralFanState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadBubbleCoralFan(state_ident)
            }
            "dead_fire_coral_fan" => {
                let mut state_ident = DeadFireCoralFanState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadFireCoralFan(state_ident)
            }
            "dead_horn_coral_fan" => {
                let mut state_ident = DeadHornCoralFanState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadHornCoralFan(state_ident)
            }
            "tube_coral_fan" => {
                let mut state_ident = TubeCoralFanState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::TubeCoralFan(state_ident)
            }
            "brain_coral_fan" => {
                let mut state_ident = BrainCoralFanState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BrainCoralFan(state_ident)
            }
            "bubble_coral_fan" => {
                let mut state_ident = BubbleCoralFanState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BubbleCoralFan(state_ident)
            }
            "fire_coral_fan" => {
                let mut state_ident = FireCoralFanState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::FireCoralFan(state_ident)
            }
            "horn_coral_fan" => {
                let mut state_ident = HornCoralFanState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::HornCoralFan(state_ident)
            }
            "dead_tube_coral_wall_fan" => {
                let mut state_ident = DeadTubeCoralWallFanState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadTubeCoralWallFan(state_ident)
            }
            "dead_brain_coral_wall_fan" => {
                let mut state_ident = DeadBrainCoralWallFanState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadBrainCoralWallFan(state_ident)
            }
            "dead_bubble_coral_wall_fan" => {
                let mut state_ident = DeadBubbleCoralWallFanState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadBubbleCoralWallFan(state_ident)
            }
            "dead_fire_coral_wall_fan" => {
                let mut state_ident = DeadFireCoralWallFanState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadFireCoralWallFan(state_ident)
            }
            "dead_horn_coral_wall_fan" => {
                let mut state_ident = DeadHornCoralWallFanState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeadHornCoralWallFan(state_ident)
            }
            "tube_coral_wall_fan" => {
                let mut state_ident = TubeCoralWallFanState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::TubeCoralWallFan(state_ident)
            }
            "brain_coral_wall_fan" => {
                let mut state_ident = BrainCoralWallFanState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BrainCoralWallFan(state_ident)
            }
            "bubble_coral_wall_fan" => {
                let mut state_ident = BubbleCoralWallFanState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BubbleCoralWallFan(state_ident)
            }
            "fire_coral_wall_fan" => {
                let mut state_ident = FireCoralWallFanState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::FireCoralWallFan(state_ident)
            }
            "horn_coral_wall_fan" => {
                let mut state_ident = HornCoralWallFanState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::HornCoralWallFan(state_ident)
            }
            "sea_pickle" => {
                let mut state_ident = SeaPickleState::default();
                if let Some(prop) = props.get("pickles") {
                    state_ident.with_pickles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SeaPickle(state_ident)
            }
            "blue_ice" => Blocks::BlueIce,
            "conduit" => {
                let mut state_ident = ConduitState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::Conduit(state_ident)
            }
            "bamboo_sapling" => Blocks::BambooSapling,
            "bamboo" => {
                let mut state_ident = BambooState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("leaves") {
                    state_ident.with_leaves(Leaves::from_str(prop)?);
                }
                if let Some(prop) = props.get("stage") {
                    state_ident.with_stage(i32::from_str(prop)?);
                }
                Blocks::Bamboo(state_ident)
            }
            "potted_bamboo" => Blocks::PottedBamboo,
            "void_air" => Blocks::VoidAir,
            "cave_air" => Blocks::CaveAir,
            "bubble_column" => {
                let mut state_ident = BubbleColumnState::default();
                if let Some(prop) = props.get("drag") {
                    state_ident.with_drag(bool::from_str(prop)?);
                }
                Blocks::BubbleColumn(state_ident)
            }
            "polished_granite_stairs" => {
                let mut state_ident = PolishedGraniteStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedGraniteStairs(state_ident)
            }
            "smooth_red_sandstone_stairs" => {
                let mut state_ident = SmoothRedSandstoneStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SmoothRedSandstoneStairs(state_ident)
            }
            "mossy_stone_brick_stairs" => {
                let mut state_ident = MossyStoneBrickStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::MossyStoneBrickStairs(state_ident)
            }
            "polished_diorite_stairs" => {
                let mut state_ident = PolishedDioriteStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedDioriteStairs(state_ident)
            }
            "mossy_cobblestone_stairs" => {
                let mut state_ident = MossyCobblestoneStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::MossyCobblestoneStairs(state_ident)
            }
            "end_stone_brick_stairs" => {
                let mut state_ident = EndStoneBrickStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::EndStoneBrickStairs(state_ident)
            }
            "stone_stairs" => {
                let mut state_ident = StoneStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::StoneStairs(state_ident)
            }
            "smooth_sandstone_stairs" => {
                let mut state_ident = SmoothSandstoneStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SmoothSandstoneStairs(state_ident)
            }
            "smooth_quartz_stairs" => {
                let mut state_ident = SmoothQuartzStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SmoothQuartzStairs(state_ident)
            }
            "granite_stairs" => {
                let mut state_ident = GraniteStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::GraniteStairs(state_ident)
            }
            "andesite_stairs" => {
                let mut state_ident = AndesiteStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::AndesiteStairs(state_ident)
            }
            "red_nether_brick_stairs" => {
                let mut state_ident = RedNetherBrickStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::RedNetherBrickStairs(state_ident)
            }
            "polished_andesite_stairs" => {
                let mut state_ident = PolishedAndesiteStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedAndesiteStairs(state_ident)
            }
            "diorite_stairs" => {
                let mut state_ident = DioriteStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DioriteStairs(state_ident)
            }
            "polished_granite_slab" => {
                let mut state_ident = PolishedGraniteSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedGraniteSlab(state_ident)
            }
            "smooth_red_sandstone_slab" => {
                let mut state_ident = SmoothRedSandstoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SmoothRedSandstoneSlab(state_ident)
            }
            "mossy_stone_brick_slab" => {
                let mut state_ident = MossyStoneBrickSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::MossyStoneBrickSlab(state_ident)
            }
            "polished_diorite_slab" => {
                let mut state_ident = PolishedDioriteSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedDioriteSlab(state_ident)
            }
            "mossy_cobblestone_slab" => {
                let mut state_ident = MossyCobblestoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::MossyCobblestoneSlab(state_ident)
            }
            "end_stone_brick_slab" => {
                let mut state_ident = EndStoneBrickSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::EndStoneBrickSlab(state_ident)
            }
            "smooth_sandstone_slab" => {
                let mut state_ident = SmoothSandstoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SmoothSandstoneSlab(state_ident)
            }
            "smooth_quartz_slab" => {
                let mut state_ident = SmoothQuartzSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SmoothQuartzSlab(state_ident)
            }
            "granite_slab" => {
                let mut state_ident = GraniteSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::GraniteSlab(state_ident)
            }
            "andesite_slab" => {
                let mut state_ident = AndesiteSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::AndesiteSlab(state_ident)
            }
            "red_nether_brick_slab" => {
                let mut state_ident = RedNetherBrickSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::RedNetherBrickSlab(state_ident)
            }
            "polished_andesite_slab" => {
                let mut state_ident = PolishedAndesiteSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedAndesiteSlab(state_ident)
            }
            "diorite_slab" => {
                let mut state_ident = DioriteSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DioriteSlab(state_ident)
            }
            "brick_wall" => {
                let mut state_ident = BrickWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::BrickWall(state_ident)
            }
            "prismarine_wall" => {
                let mut state_ident = PrismarineWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::PrismarineWall(state_ident)
            }
            "red_sandstone_wall" => {
                let mut state_ident = RedSandstoneWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::RedSandstoneWall(state_ident)
            }
            "mossy_stone_brick_wall" => {
                let mut state_ident = MossyStoneBrickWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::MossyStoneBrickWall(state_ident)
            }
            "granite_wall" => {
                let mut state_ident = GraniteWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::GraniteWall(state_ident)
            }
            "stone_brick_wall" => {
                let mut state_ident = StoneBrickWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::StoneBrickWall(state_ident)
            }
            "nether_brick_wall" => {
                let mut state_ident = NetherBrickWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::NetherBrickWall(state_ident)
            }
            "andesite_wall" => {
                let mut state_ident = AndesiteWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::AndesiteWall(state_ident)
            }
            "red_nether_brick_wall" => {
                let mut state_ident = RedNetherBrickWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::RedNetherBrickWall(state_ident)
            }
            "sandstone_wall" => {
                let mut state_ident = SandstoneWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::SandstoneWall(state_ident)
            }
            "end_stone_brick_wall" => {
                let mut state_ident = EndStoneBrickWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::EndStoneBrickWall(state_ident)
            }
            "diorite_wall" => {
                let mut state_ident = DioriteWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::DioriteWall(state_ident)
            }
            "scaffolding" => {
                let mut state_ident = ScaffoldingState::default();
                if let Some(prop) = props.get("bottom") {
                    state_ident.with_bottom(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("distance") {
                    state_ident.with_distance(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::Scaffolding(state_ident)
            }
            "loom" => {
                let mut state_ident = LoomState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::Loom(state_ident)
            }
            "barrel" => {
                let mut state_ident = BarrelState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                Blocks::Barrel(state_ident)
            }
            "smoker" => {
                let mut state_ident = SmokerState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::Smoker(state_ident)
            }
            "blast_furnace" => {
                let mut state_ident = BlastFurnaceState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::BlastFurnace(state_ident)
            }
            "cartography_table" => Blocks::CartographyTable,
            "fletching_table" => Blocks::FletchingTable,
            "grindstone" => {
                let mut state_ident = GrindstoneState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::Grindstone(state_ident)
            }
            "lectern" => {
                let mut state_ident = LecternState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("has_book") {
                    state_ident.with_has_book(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::Lectern(state_ident)
            }
            "smithing_table" => Blocks::SmithingTable,
            "stonecutter" => {
                let mut state_ident = StonecutterState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                Blocks::Stonecutter(state_ident)
            }
            "bell" => {
                let mut state_ident = BellState::default();
                if let Some(prop) = props.get("attachment") {
                    state_ident.with_attachment(Attachment::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::Bell(state_ident)
            }
            "lantern" => {
                let mut state_ident = LanternState::default();
                if let Some(prop) = props.get("hanging") {
                    state_ident.with_hanging(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::Lantern(state_ident)
            }
            "soul_lantern" => {
                let mut state_ident = SoulLanternState::default();
                if let Some(prop) = props.get("hanging") {
                    state_ident.with_hanging(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SoulLantern(state_ident)
            }
            "campfire" => {
                let mut state_ident = CampfireState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("signal_fire") {
                    state_ident.with_signal_fire(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::Campfire(state_ident)
            }
            "soul_campfire" => {
                let mut state_ident = SoulCampfireState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("signal_fire") {
                    state_ident.with_signal_fire(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SoulCampfire(state_ident)
            }
            "sweet_berry_bush" => {
                let mut state_ident = SweetBerryBushState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::SweetBerryBush(state_ident)
            }
            "warped_stem" => {
                let mut state_ident = WarpedStemState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::WarpedStem(state_ident)
            }
            "stripped_warped_stem" => {
                let mut state_ident = StrippedWarpedStemState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedWarpedStem(state_ident)
            }
            "warped_hyphae" => {
                let mut state_ident = WarpedHyphaeState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::WarpedHyphae(state_ident)
            }
            "stripped_warped_hyphae" => {
                let mut state_ident = StrippedWarpedHyphaeState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedWarpedHyphae(state_ident)
            }
            "warped_nylium" => Blocks::WarpedNylium,
            "warped_fungus" => Blocks::WarpedFungus,
            "warped_wart_block" => Blocks::WarpedWartBlock,
            "warped_roots" => Blocks::WarpedRoots,
            "nether_sprouts" => Blocks::NetherSprouts,
            "crimson_stem" => {
                let mut state_ident = CrimsonStemState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::CrimsonStem(state_ident)
            }
            "stripped_crimson_stem" => {
                let mut state_ident = StrippedCrimsonStemState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedCrimsonStem(state_ident)
            }
            "crimson_hyphae" => {
                let mut state_ident = CrimsonHyphaeState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::CrimsonHyphae(state_ident)
            }
            "stripped_crimson_hyphae" => {
                let mut state_ident = StrippedCrimsonHyphaeState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::StrippedCrimsonHyphae(state_ident)
            }
            "crimson_nylium" => Blocks::CrimsonNylium,
            "crimson_fungus" => Blocks::CrimsonFungus,
            "shroomlight" => Blocks::Shroomlight,
            "weeping_vines" => {
                let mut state_ident = WeepingVinesState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::WeepingVines(state_ident)
            }
            "weeping_vines_plant" => Blocks::WeepingVinesPlant,
            "twisting_vines" => {
                let mut state_ident = TwistingVinesState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                Blocks::TwistingVines(state_ident)
            }
            "twisting_vines_plant" => Blocks::TwistingVinesPlant,
            "crimson_roots" => Blocks::CrimsonRoots,
            "crimson_planks" => Blocks::CrimsonPlanks,
            "warped_planks" => Blocks::WarpedPlanks,
            "crimson_slab" => {
                let mut state_ident = CrimsonSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CrimsonSlab(state_ident)
            }
            "warped_slab" => {
                let mut state_ident = WarpedSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WarpedSlab(state_ident)
            }
            "crimson_pressure_plate" => {
                let mut state_ident = CrimsonPressurePlateState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::CrimsonPressurePlate(state_ident)
            }
            "warped_pressure_plate" => {
                let mut state_ident = WarpedPressurePlateState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::WarpedPressurePlate(state_ident)
            }
            "crimson_fence" => {
                let mut state_ident = CrimsonFenceState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::CrimsonFence(state_ident)
            }
            "warped_fence" => {
                let mut state_ident = WarpedFenceState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(bool::from_str(prop)?);
                }
                Blocks::WarpedFence(state_ident)
            }
            "crimson_trapdoor" => {
                let mut state_ident = CrimsonTrapdoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CrimsonTrapdoor(state_ident)
            }
            "warped_trapdoor" => {
                let mut state_ident = WarpedTrapdoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WarpedTrapdoor(state_ident)
            }
            "crimson_fence_gate" => {
                let mut state_ident = CrimsonFenceGateState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("in_wall") {
                    state_ident.with_in_wall(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::CrimsonFenceGate(state_ident)
            }
            "warped_fence_gate" => {
                let mut state_ident = WarpedFenceGateState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("in_wall") {
                    state_ident.with_in_wall(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::WarpedFenceGate(state_ident)
            }
            "crimson_stairs" => {
                let mut state_ident = CrimsonStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CrimsonStairs(state_ident)
            }
            "warped_stairs" => {
                let mut state_ident = WarpedStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WarpedStairs(state_ident)
            }
            "crimson_button" => {
                let mut state_ident = CrimsonButtonState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::CrimsonButton(state_ident)
            }
            "warped_button" => {
                let mut state_ident = WarpedButtonState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::WarpedButton(state_ident)
            }
            "crimson_door" => {
                let mut state_ident = CrimsonDoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("hinge") {
                    state_ident.with_hinge(Hinge::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::CrimsonDoor(state_ident)
            }
            "warped_door" => {
                let mut state_ident = WarpedDoorState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("hinge") {
                    state_ident.with_hinge(Hinge::from_str(prop)?);
                }
                if let Some(prop) = props.get("open") {
                    state_ident.with_open(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::WarpedDoor(state_ident)
            }
            "crimson_sign" => {
                let mut state_ident = CrimsonSignState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CrimsonSign(state_ident)
            }
            "warped_sign" => {
                let mut state_ident = WarpedSignState::default();
                if let Some(prop) = props.get("rotation") {
                    state_ident.with_rotation(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WarpedSign(state_ident)
            }
            "crimson_wall_sign" => {
                let mut state_ident = CrimsonWallSignState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CrimsonWallSign(state_ident)
            }
            "warped_wall_sign" => {
                let mut state_ident = WarpedWallSignState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WarpedWallSign(state_ident)
            }
            "structure_block" => {
                let mut state_ident = StructureBlockState::default();
                if let Some(prop) = props.get("mode") {
                    state_ident.with_mode(StructureBlockMode::from_str(prop)?);
                }
                Blocks::StructureBlock(state_ident)
            }
            "jigsaw" => {
                let mut state_ident = JigsawState::default();
                if let Some(prop) = props.get("orientation") {
                    state_ident.with_orientation(Orientation::from_str(prop)?);
                }
                Blocks::Jigsaw(state_ident)
            }
            "composter" => {
                let mut state_ident = ComposterState::default();
                if let Some(prop) = props.get("level") {
                    state_ident.with_level(i32::from_str(prop)?);
                }
                Blocks::Composter(state_ident)
            }
            "target" => {
                let mut state_ident = TargetState::default();
                if let Some(prop) = props.get("power") {
                    state_ident.with_power(i32::from_str(prop)?);
                }
                Blocks::Target(state_ident)
            }
            "bee_nest" => {
                let mut state_ident = BeeNestState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("honey_level") {
                    state_ident.with_honey_level(i32::from_str(prop)?);
                }
                Blocks::BeeNest(state_ident)
            }
            "beehive" => {
                let mut state_ident = BeehiveState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("honey_level") {
                    state_ident.with_honey_level(i32::from_str(prop)?);
                }
                Blocks::Beehive(state_ident)
            }
            "honey_block" => Blocks::HoneyBlock,
            "honeycomb_block" => Blocks::HoneycombBlock,
            "netherite_block" => Blocks::NetheriteBlock,
            "ancient_debris" => Blocks::AncientDebris,
            "crying_obsidian" => Blocks::CryingObsidian,
            "respawn_anchor" => {
                let mut state_ident = RespawnAnchorState::default();
                if let Some(prop) = props.get("charges") {
                    state_ident.with_charges(i32::from_str(prop)?);
                }
                Blocks::RespawnAnchor(state_ident)
            }
            "potted_crimson_fungus" => Blocks::PottedCrimsonFungus,
            "potted_warped_fungus" => Blocks::PottedWarpedFungus,
            "potted_crimson_roots" => Blocks::PottedCrimsonRoots,
            "potted_warped_roots" => Blocks::PottedWarpedRoots,
            "lodestone" => Blocks::Lodestone,
            "blackstone" => Blocks::Blackstone,
            "blackstone_stairs" => {
                let mut state_ident = BlackstoneStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BlackstoneStairs(state_ident)
            }
            "blackstone_wall" => {
                let mut state_ident = BlackstoneWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::BlackstoneWall(state_ident)
            }
            "blackstone_slab" => {
                let mut state_ident = BlackstoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BlackstoneSlab(state_ident)
            }
            "polished_blackstone" => Blocks::PolishedBlackstone,
            "polished_blackstone_bricks" => Blocks::PolishedBlackstoneBricks,
            "cracked_polished_blackstone_bricks" => Blocks::CrackedPolishedBlackstoneBricks,
            "chiseled_polished_blackstone" => Blocks::ChiseledPolishedBlackstone,
            "polished_blackstone_brick_slab" => {
                let mut state_ident = PolishedBlackstoneBrickSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedBlackstoneBrickSlab(state_ident)
            }
            "polished_blackstone_brick_stairs" => {
                let mut state_ident = PolishedBlackstoneBrickStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedBlackstoneBrickStairs(state_ident)
            }
            "polished_blackstone_brick_wall" => {
                let mut state_ident = PolishedBlackstoneBrickWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::PolishedBlackstoneBrickWall(state_ident)
            }
            "gilded_blackstone" => Blocks::GildedBlackstone,
            "polished_blackstone_stairs" => {
                let mut state_ident = PolishedBlackstoneStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedBlackstoneStairs(state_ident)
            }
            "polished_blackstone_slab" => {
                let mut state_ident = PolishedBlackstoneSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedBlackstoneSlab(state_ident)
            }
            "polished_blackstone_pressure_plate" => {
                let mut state_ident = PolishedBlackstonePressurePlateState::default();
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::PolishedBlackstonePressurePlate(state_ident)
            }
            "polished_blackstone_button" => {
                let mut state_ident = PolishedBlackstoneButtonState::default();
                if let Some(prop) = props.get("face") {
                    state_ident.with_face(Face::from_str(prop)?);
                }
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                Blocks::PolishedBlackstoneButton(state_ident)
            }
            "polished_blackstone_wall" => {
                let mut state_ident = PolishedBlackstoneWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::PolishedBlackstoneWall(state_ident)
            }
            "chiseled_nether_bricks" => Blocks::ChiseledNetherBricks,
            "cracked_nether_bricks" => Blocks::CrackedNetherBricks,
            "quartz_bricks" => Blocks::QuartzBricks,
            "candle" => {
                let mut state_ident = CandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::Candle(state_ident)
            }
            "white_candle" => {
                let mut state_ident = WhiteCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WhiteCandle(state_ident)
            }
            "orange_candle" => {
                let mut state_ident = OrangeCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::OrangeCandle(state_ident)
            }
            "magenta_candle" => {
                let mut state_ident = MagentaCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::MagentaCandle(state_ident)
            }
            "light_blue_candle" => {
                let mut state_ident = LightBlueCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::LightBlueCandle(state_ident)
            }
            "yellow_candle" => {
                let mut state_ident = YellowCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::YellowCandle(state_ident)
            }
            "lime_candle" => {
                let mut state_ident = LimeCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::LimeCandle(state_ident)
            }
            "pink_candle" => {
                let mut state_ident = PinkCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PinkCandle(state_ident)
            }
            "gray_candle" => {
                let mut state_ident = GrayCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::GrayCandle(state_ident)
            }
            "light_gray_candle" => {
                let mut state_ident = LightGrayCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::LightGrayCandle(state_ident)
            }
            "cyan_candle" => {
                let mut state_ident = CyanCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CyanCandle(state_ident)
            }
            "purple_candle" => {
                let mut state_ident = PurpleCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PurpleCandle(state_ident)
            }
            "blue_candle" => {
                let mut state_ident = BlueCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BlueCandle(state_ident)
            }
            "brown_candle" => {
                let mut state_ident = BrownCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BrownCandle(state_ident)
            }
            "green_candle" => {
                let mut state_ident = GreenCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::GreenCandle(state_ident)
            }
            "red_candle" => {
                let mut state_ident = RedCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::RedCandle(state_ident)
            }
            "black_candle" => {
                let mut state_ident = BlackCandleState::default();
                if let Some(prop) = props.get("candles") {
                    state_ident.with_candles(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BlackCandle(state_ident)
            }
            "candle_cake" => {
                let mut state_ident = CandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::CandleCake(state_ident)
            }
            "white_candle_cake" => {
                let mut state_ident = WhiteCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::WhiteCandleCake(state_ident)
            }
            "orange_candle_cake" => {
                let mut state_ident = OrangeCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::OrangeCandleCake(state_ident)
            }
            "magenta_candle_cake" => {
                let mut state_ident = MagentaCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::MagentaCandleCake(state_ident)
            }
            "light_blue_candle_cake" => {
                let mut state_ident = LightBlueCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::LightBlueCandleCake(state_ident)
            }
            "yellow_candle_cake" => {
                let mut state_ident = YellowCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::YellowCandleCake(state_ident)
            }
            "lime_candle_cake" => {
                let mut state_ident = LimeCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::LimeCandleCake(state_ident)
            }
            "pink_candle_cake" => {
                let mut state_ident = PinkCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::PinkCandleCake(state_ident)
            }
            "gray_candle_cake" => {
                let mut state_ident = GrayCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::GrayCandleCake(state_ident)
            }
            "light_gray_candle_cake" => {
                let mut state_ident = LightGrayCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::LightGrayCandleCake(state_ident)
            }
            "cyan_candle_cake" => {
                let mut state_ident = CyanCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::CyanCandleCake(state_ident)
            }
            "purple_candle_cake" => {
                let mut state_ident = PurpleCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::PurpleCandleCake(state_ident)
            }
            "blue_candle_cake" => {
                let mut state_ident = BlueCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::BlueCandleCake(state_ident)
            }
            "brown_candle_cake" => {
                let mut state_ident = BrownCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::BrownCandleCake(state_ident)
            }
            "green_candle_cake" => {
                let mut state_ident = GreenCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::GreenCandleCake(state_ident)
            }
            "red_candle_cake" => {
                let mut state_ident = RedCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::RedCandleCake(state_ident)
            }
            "black_candle_cake" => {
                let mut state_ident = BlackCandleCakeState::default();
                if let Some(prop) = props.get("lit") {
                    state_ident.with_lit(bool::from_str(prop)?);
                }
                Blocks::BlackCandleCake(state_ident)
            }
            "amethyst_block" => Blocks::AmethystBlock,
            "budding_amethyst" => Blocks::BuddingAmethyst,
            "amethyst_cluster" => {
                let mut state_ident = AmethystClusterState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::AmethystCluster(state_ident)
            }
            "large_amethyst_bud" => {
                let mut state_ident = LargeAmethystBudState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::LargeAmethystBud(state_ident)
            }
            "medium_amethyst_bud" => {
                let mut state_ident = MediumAmethystBudState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::MediumAmethystBud(state_ident)
            }
            "small_amethyst_bud" => {
                let mut state_ident = SmallAmethystBudState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SmallAmethystBud(state_ident)
            }
            "tuff" => Blocks::Tuff,
            "calcite" => Blocks::Calcite,
            "tinted_glass" => Blocks::TintedGlass,
            "powder_snow" => Blocks::PowderSnow,
            "sculk_sensor" => {
                let mut state_ident = SculkSensorState::default();
                if let Some(prop) = props.get("power") {
                    state_ident.with_power(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("sculk_sensor_phase") {
                    state_ident.with_sculk_sensor_phase(SculkSensorPhase::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SculkSensor(state_ident)
            }
            "oxidized_copper" => Blocks::OxidizedCopper,
            "weathered_copper" => Blocks::WeatheredCopper,
            "exposed_copper" => Blocks::ExposedCopper,
            "copper_block" => Blocks::CopperBlock,
            "copper_ore" => Blocks::CopperOre,
            "deepslate_copper_ore" => Blocks::DeepslateCopperOre,
            "oxidized_cut_copper" => Blocks::OxidizedCutCopper,
            "weathered_cut_copper" => Blocks::WeatheredCutCopper,
            "exposed_cut_copper" => Blocks::ExposedCutCopper,
            "cut_copper" => Blocks::CutCopper,
            "oxidized_cut_copper_stairs" => {
                let mut state_ident = OxidizedCutCopperStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::OxidizedCutCopperStairs(state_ident)
            }
            "weathered_cut_copper_stairs" => {
                let mut state_ident = WeatheredCutCopperStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WeatheredCutCopperStairs(state_ident)
            }
            "exposed_cut_copper_stairs" => {
                let mut state_ident = ExposedCutCopperStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::ExposedCutCopperStairs(state_ident)
            }
            "cut_copper_stairs" => {
                let mut state_ident = CutCopperStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CutCopperStairs(state_ident)
            }
            "oxidized_cut_copper_slab" => {
                let mut state_ident = OxidizedCutCopperSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::OxidizedCutCopperSlab(state_ident)
            }
            "weathered_cut_copper_slab" => {
                let mut state_ident = WeatheredCutCopperSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WeatheredCutCopperSlab(state_ident)
            }
            "exposed_cut_copper_slab" => {
                let mut state_ident = ExposedCutCopperSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::ExposedCutCopperSlab(state_ident)
            }
            "cut_copper_slab" => {
                let mut state_ident = CutCopperSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CutCopperSlab(state_ident)
            }
            "waxed_copper_block" => Blocks::WaxedCopperBlock,
            "waxed_weathered_copper" => Blocks::WaxedWeatheredCopper,
            "waxed_exposed_copper" => Blocks::WaxedExposedCopper,
            "waxed_oxidized_copper" => Blocks::WaxedOxidizedCopper,
            "waxed_oxidized_cut_copper" => Blocks::WaxedOxidizedCutCopper,
            "waxed_weathered_cut_copper" => Blocks::WaxedWeatheredCutCopper,
            "waxed_exposed_cut_copper" => Blocks::WaxedExposedCutCopper,
            "waxed_cut_copper" => Blocks::WaxedCutCopper,
            "waxed_oxidized_cut_copper_stairs" => {
                let mut state_ident = WaxedOxidizedCutCopperStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WaxedOxidizedCutCopperStairs(state_ident)
            }
            "waxed_weathered_cut_copper_stairs" => {
                let mut state_ident = WaxedWeatheredCutCopperStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WaxedWeatheredCutCopperStairs(state_ident)
            }
            "waxed_exposed_cut_copper_stairs" => {
                let mut state_ident = WaxedExposedCutCopperStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WaxedExposedCutCopperStairs(state_ident)
            }
            "waxed_cut_copper_stairs" => {
                let mut state_ident = WaxedCutCopperStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WaxedCutCopperStairs(state_ident)
            }
            "waxed_oxidized_cut_copper_slab" => {
                let mut state_ident = WaxedOxidizedCutCopperSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WaxedOxidizedCutCopperSlab(state_ident)
            }
            "waxed_weathered_cut_copper_slab" => {
                let mut state_ident = WaxedWeatheredCutCopperSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WaxedWeatheredCutCopperSlab(state_ident)
            }
            "waxed_exposed_cut_copper_slab" => {
                let mut state_ident = WaxedExposedCutCopperSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WaxedExposedCutCopperSlab(state_ident)
            }
            "waxed_cut_copper_slab" => {
                let mut state_ident = WaxedCutCopperSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::WaxedCutCopperSlab(state_ident)
            }
            "lightning_rod" => {
                let mut state_ident = LightningRodState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(AllFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("powered") {
                    state_ident.with_powered(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::LightningRod(state_ident)
            }
            "pointed_dripstone" => {
                let mut state_ident = PointedDripstoneState::default();
                if let Some(prop) = props.get("thickness") {
                    state_ident.with_thickness(Thickness::from_str(prop)?);
                }
                if let Some(prop) = props.get("vertical_direction") {
                    state_ident.with_vertical_direction(VerticalDirection::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PointedDripstone(state_ident)
            }
            "dripstone_block" => Blocks::DripstoneBlock,
            "cave_vines" => {
                let mut state_ident = CaveVinesState::default();
                if let Some(prop) = props.get("age") {
                    state_ident.with_age(i32::from_str(prop)?);
                }
                if let Some(prop) = props.get("berries") {
                    state_ident.with_berries(bool::from_str(prop)?);
                }
                Blocks::CaveVines(state_ident)
            }
            "cave_vines_plant" => {
                let mut state_ident = CaveVinesPlantState::default();
                if let Some(prop) = props.get("berries") {
                    state_ident.with_berries(bool::from_str(prop)?);
                }
                Blocks::CaveVinesPlant(state_ident)
            }
            "spore_blossom" => Blocks::SporeBlossom,
            "azalea" => Blocks::Azalea,
            "flowering_azalea" => Blocks::FloweringAzalea,
            "moss_carpet" => Blocks::MossCarpet,
            "moss_block" => Blocks::MossBlock,
            "big_dripleaf" => {
                let mut state_ident = BigDripleafState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("tilt") {
                    state_ident.with_tilt(Tilt::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BigDripleaf(state_ident)
            }
            "big_dripleaf_stem" => {
                let mut state_ident = BigDripleafStemState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::BigDripleafStem(state_ident)
            }
            "small_dripleaf" => {
                let mut state_ident = SmallDripleafState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(DoubleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::SmallDripleaf(state_ident)
            }
            "hanging_roots" => {
                let mut state_ident = HangingRootsState::default();
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::HangingRoots(state_ident)
            }
            "rooted_dirt" => Blocks::RootedDirt,
            "deepslate" => {
                let mut state_ident = DeepslateState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::Deepslate(state_ident)
            }
            "cobbled_deepslate" => Blocks::CobbledDeepslate,
            "cobbled_deepslate_stairs" => {
                let mut state_ident = CobbledDeepslateStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CobbledDeepslateStairs(state_ident)
            }
            "cobbled_deepslate_slab" => {
                let mut state_ident = CobbledDeepslateSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::CobbledDeepslateSlab(state_ident)
            }
            "cobbled_deepslate_wall" => {
                let mut state_ident = CobbledDeepslateWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::CobbledDeepslateWall(state_ident)
            }
            "polished_deepslate" => Blocks::PolishedDeepslate,
            "polished_deepslate_stairs" => {
                let mut state_ident = PolishedDeepslateStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedDeepslateStairs(state_ident)
            }
            "polished_deepslate_slab" => {
                let mut state_ident = PolishedDeepslateSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::PolishedDeepslateSlab(state_ident)
            }
            "polished_deepslate_wall" => {
                let mut state_ident = PolishedDeepslateWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::PolishedDeepslateWall(state_ident)
            }
            "deepslate_tiles" => Blocks::DeepslateTiles,
            "deepslate_tile_stairs" => {
                let mut state_ident = DeepslateTileStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeepslateTileStairs(state_ident)
            }
            "deepslate_tile_slab" => {
                let mut state_ident = DeepslateTileSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeepslateTileSlab(state_ident)
            }
            "deepslate_tile_wall" => {
                let mut state_ident = DeepslateTileWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::DeepslateTileWall(state_ident)
            }
            "deepslate_bricks" => Blocks::DeepslateBricks,
            "deepslate_brick_stairs" => {
                let mut state_ident = DeepslateBrickStairsState::default();
                if let Some(prop) = props.get("facing") {
                    state_ident.with_facing(HorizontalFacing::from_str(prop)?);
                }
                if let Some(prop) = props.get("half") {
                    state_ident.with_half(SingleBlockHalf::from_str(prop)?);
                }
                if let Some(prop) = props.get("shape") {
                    state_ident.with_shape(StairShape::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeepslateBrickStairs(state_ident)
            }
            "deepslate_brick_slab" => {
                let mut state_ident = DeepslateBrickSlabState::default();
                if let Some(prop) = props.get("typed") {
                    state_ident.with_typed(SlabType::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                Blocks::DeepslateBrickSlab(state_ident)
            }
            "deepslate_brick_wall" => {
                let mut state_ident = DeepslateBrickWallState::default();
                if let Some(prop) = props.get("east") {
                    state_ident.with_east(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("north") {
                    state_ident.with_north(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("south") {
                    state_ident.with_south(WallType::from_str(prop)?);
                }
                if let Some(prop) = props.get("up") {
                    state_ident.with_up(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("waterlogged") {
                    state_ident.with_waterlogged(bool::from_str(prop)?);
                }
                if let Some(prop) = props.get("west") {
                    state_ident.with_west(WallType::from_str(prop)?);
                }
                Blocks::DeepslateBrickWall(state_ident)
            }
            "chiseled_deepslate" => Blocks::ChiseledDeepslate,
            "cracked_deepslate_bricks" => Blocks::CrackedDeepslateBricks,
            "cracked_deepslate_tiles" => Blocks::CrackedDeepslateTiles,
            "infested_deepslate" => {
                let mut state_ident = InfestedDeepslateState::default();
                if let Some(prop) = props.get("axis") {
                    state_ident.with_axis(Axis::from_str(prop)?);
                }
                Blocks::InfestedDeepslate(state_ident)
            }
            "smooth_basalt" => Blocks::SmoothBasalt,
            "raw_iron_block" => Blocks::RawIronBlock,
            "raw_copper_block" => Blocks::RawCopperBlock,
            "raw_gold_block" => Blocks::RawGoldBlock,
            "potted_azalea_bush" => Blocks::PottedAzaleaBush,
            "potted_flowering_azalea_bush" => Blocks::PottedFloweringAzaleaBush,
            _ => return Err(ParseBlockError::UnknownBlock),
        })
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum PortalAxis {
    X,
    Z,
}
impl std::str::FromStr for PortalAxis {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "x" => Ok(PortalAxis::X),
            "z" => Ok(PortalAxis::Z),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum HorizontalFacing {
    North,
    South,
    West,
    East,
}
impl std::str::FromStr for HorizontalFacing {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "north" => Ok(HorizontalFacing::North),
            "south" => Ok(HorizontalFacing::South),
            "west" => Ok(HorizontalFacing::West),
            "east" => Ok(HorizontalFacing::East),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum HopperFacing {
    Down,
    North,
    South,
    West,
    East,
}
impl std::str::FromStr for HopperFacing {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "down" => Ok(HopperFacing::Down),
            "north" => Ok(HopperFacing::North),
            "south" => Ok(HopperFacing::South),
            "west" => Ok(HopperFacing::West),
            "east" => Ok(HopperFacing::East),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum AllFacing {
    North,
    East,
    South,
    West,
    Up,
    Down,
}
impl std::str::FromStr for AllFacing {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "north" => Ok(AllFacing::North),
            "east" => Ok(AllFacing::East),
            "south" => Ok(AllFacing::South),
            "west" => Ok(AllFacing::West),
            "up" => Ok(AllFacing::Up),
            "down" => Ok(AllFacing::Down),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum DoubleBlockHalf {
    Upper,
    Lower,
}
impl std::str::FromStr for DoubleBlockHalf {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "upper" => Ok(DoubleBlockHalf::Upper),
            "lower" => Ok(DoubleBlockHalf::Lower),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum SingleBlockHalf {
    Top,
    Bottom,
}
impl std::str::FromStr for SingleBlockHalf {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "top" => Ok(SingleBlockHalf::Top),
            "bottom" => Ok(SingleBlockHalf::Bottom),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum ComparatorMode {
    Compare,
    Subtract,
}
impl std::str::FromStr for ComparatorMode {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "compare" => Ok(ComparatorMode::Compare),
            "subtract" => Ok(ComparatorMode::Subtract),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum StructureBlockMode {
    Save,
    Load,
    Corner,
    Data,
}
impl std::str::FromStr for StructureBlockMode {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "save" => Ok(StructureBlockMode::Save),
            "load" => Ok(StructureBlockMode::Load),
            "corner" => Ok(StructureBlockMode::Corner),
            "data" => Ok(StructureBlockMode::Data),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum StraightRailShape {
    NorthSouth,
    EastWest,
    AscendingEast,
    AscendingWest,
    AscendingNorth,
    AscendingSouth,
}
impl std::str::FromStr for StraightRailShape {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "north_south" => Ok(StraightRailShape::NorthSouth),
            "east_west" => Ok(StraightRailShape::EastWest),
            "ascending_east" => Ok(StraightRailShape::AscendingEast),
            "ascending_west" => Ok(StraightRailShape::AscendingWest),
            "ascending_north" => Ok(StraightRailShape::AscendingNorth),
            "ascending_south" => Ok(StraightRailShape::AscendingSouth),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum RailShape {
    NorthSouth,
    EastWest,
    AscendingEast,
    AscendingWest,
    AscendingNorth,
    AscendingSouth,
    SouthEast,
    SouthWest,
    NorthWest,
    NorthEast,
}
impl std::str::FromStr for RailShape {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "north_south" => Ok(RailShape::NorthSouth),
            "east_west" => Ok(RailShape::EastWest),
            "ascending_east" => Ok(RailShape::AscendingEast),
            "ascending_west" => Ok(RailShape::AscendingWest),
            "ascending_north" => Ok(RailShape::AscendingNorth),
            "ascending_south" => Ok(RailShape::AscendingSouth),
            "south_east" => Ok(RailShape::SouthEast),
            "south_west" => Ok(RailShape::SouthWest),
            "north_west" => Ok(RailShape::NorthWest),
            "north_east" => Ok(RailShape::NorthEast),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum StairShape {
    Straight,
    InnerLeft,
    InnerRight,
    OuterLeft,
    OuterRight,
}
impl std::str::FromStr for StairShape {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "straight" => Ok(StairShape::Straight),
            "inner_left" => Ok(StairShape::InnerLeft),
            "inner_right" => Ok(StairShape::InnerRight),
            "outer_left" => Ok(StairShape::OuterLeft),
            "outer_right" => Ok(StairShape::OuterRight),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum ChestType {
    Single,
    Left,
    Right,
}
impl std::str::FromStr for ChestType {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "single" => Ok(ChestType::Single),
            "left" => Ok(ChestType::Left),
            "right" => Ok(ChestType::Right),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum PistonType {
    Normal,
    Sticky,
}
impl std::str::FromStr for PistonType {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "normal" => Ok(PistonType::Normal),
            "sticky" => Ok(PistonType::Sticky),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum RedstoneType {
    Up,
    Side,
    None,
}
impl std::str::FromStr for RedstoneType {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "up" => Ok(RedstoneType::Up),
            "side" => Ok(RedstoneType::Side),
            "none" => Ok(RedstoneType::None),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum SlabType {
    Top,
    Bottom,
    Double,
}
impl std::str::FromStr for SlabType {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "top" => Ok(SlabType::Top),
            "bottom" => Ok(SlabType::Bottom),
            "double" => Ok(SlabType::Double),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum WallType {
    None,
    Low,
    Tall,
}
impl std::str::FromStr for WallType {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "none" => Ok(WallType::None),
            "low" => Ok(WallType::Low),
            "tall" => Ok(WallType::Tall),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Axis {
    X,
    Y,
    Z,
}
impl std::str::FromStr for Axis {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "x" => Ok(Axis::X),
            "y" => Ok(Axis::Y),
            "z" => Ok(Axis::Z),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Instrument {
    Harp,
    Basedrum,
    Snare,
    Hat,
    Bass,
    Flute,
    Bell,
    Guitar,
    Chime,
    Xylophone,
    IronXylophone,
    CowBell,
    Didgeridoo,
    Bit,
    Banjo,
    Pling,
}
impl std::str::FromStr for Instrument {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "harp" => Ok(Instrument::Harp),
            "basedrum" => Ok(Instrument::Basedrum),
            "snare" => Ok(Instrument::Snare),
            "hat" => Ok(Instrument::Hat),
            "bass" => Ok(Instrument::Bass),
            "flute" => Ok(Instrument::Flute),
            "bell" => Ok(Instrument::Bell),
            "guitar" => Ok(Instrument::Guitar),
            "chime" => Ok(Instrument::Chime),
            "xylophone" => Ok(Instrument::Xylophone),
            "iron_xylophone" => Ok(Instrument::IronXylophone),
            "cow_bell" => Ok(Instrument::CowBell),
            "didgeridoo" => Ok(Instrument::Didgeridoo),
            "bit" => Ok(Instrument::Bit),
            "banjo" => Ok(Instrument::Banjo),
            "pling" => Ok(Instrument::Pling),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Part {
    Head,
    Foot,
}
impl std::str::FromStr for Part {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "head" => Ok(Part::Head),
            "foot" => Ok(Part::Foot),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Hinge {
    Left,
    Right,
}
impl std::str::FromStr for Hinge {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "left" => Ok(Hinge::Left),
            "right" => Ok(Hinge::Right),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Face {
    Floor,
    Wall,
    Ceiling,
}
impl std::str::FromStr for Face {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "floor" => Ok(Face::Floor),
            "wall" => Ok(Face::Wall),
            "ceiling" => Ok(Face::Ceiling),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Leaves {
    None,
    Small,
    Large,
}
impl std::str::FromStr for Leaves {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "none" => Ok(Leaves::None),
            "small" => Ok(Leaves::Small),
            "large" => Ok(Leaves::Large),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Attachment {
    Floor,
    Ceiling,
    SingleWall,
    DoubleWall,
}
impl std::str::FromStr for Attachment {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "floor" => Ok(Attachment::Floor),
            "ceiling" => Ok(Attachment::Ceiling),
            "single_wall" => Ok(Attachment::SingleWall),
            "double_wall" => Ok(Attachment::DoubleWall),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Orientation {
    DownEast,
    DownNorth,
    DownSouth,
    DownWest,
    UpEast,
    UpNorth,
    UpSouth,
    UpWest,
    WestUp,
    EastUp,
    NorthUp,
    SouthUp,
}
impl std::str::FromStr for Orientation {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "down_east" => Ok(Orientation::DownEast),
            "down_north" => Ok(Orientation::DownNorth),
            "down_south" => Ok(Orientation::DownSouth),
            "down_west" => Ok(Orientation::DownWest),
            "up_east" => Ok(Orientation::UpEast),
            "up_north" => Ok(Orientation::UpNorth),
            "up_south" => Ok(Orientation::UpSouth),
            "up_west" => Ok(Orientation::UpWest),
            "west_up" => Ok(Orientation::WestUp),
            "east_up" => Ok(Orientation::EastUp),
            "north_up" => Ok(Orientation::NorthUp),
            "south_up" => Ok(Orientation::SouthUp),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum SculkSensorPhase {
    Inactive,
    Active,
    Cooldown,
}
impl std::str::FromStr for SculkSensorPhase {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "inactive" => Ok(SculkSensorPhase::Inactive),
            "active" => Ok(SculkSensorPhase::Active),
            "cooldown" => Ok(SculkSensorPhase::Cooldown),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Thickness {
    TipMerge,
    Tip,
    Frustum,
    Middle,
    Base,
}
impl std::str::FromStr for Thickness {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "tip_merge" => Ok(Thickness::TipMerge),
            "tip" => Ok(Thickness::Tip),
            "frustum" => Ok(Thickness::Frustum),
            "middle" => Ok(Thickness::Middle),
            "base" => Ok(Thickness::Base),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum VerticalDirection {
    Up,
    Down,
}
impl std::str::FromStr for VerticalDirection {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "up" => Ok(VerticalDirection::Up),
            "down" => Ok(VerticalDirection::Down),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Tilt {
    None,
    Unstable,
    Partial,
    Full,
}
impl std::str::FromStr for Tilt {
    type Err = ParseBlockError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "none" => Ok(Tilt::None),
            "unstable" => Ok(Tilt::Unstable),
            "partial" => Ok(Tilt::Partial),
            "full" => Ok(Tilt::Full),
            _ => Err(ParseBlockError::InvalidProperty),
        }
    }
}
